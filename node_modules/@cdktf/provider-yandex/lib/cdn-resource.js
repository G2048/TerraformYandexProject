"use strict";
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CdnResource = exports.CdnResourceTimeoutsOutputReference = exports.cdnResourceTimeoutsToTerraform = exports.CdnResourceSslCertificateOutputReference = exports.cdnResourceSslCertificateToTerraform = exports.CdnResourceOptionsOutputReference = exports.cdnResourceOptionsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function cdnResourceOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allowed_http_methods: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowedHttpMethods),
        browser_cache_settings: cdktf.numberToTerraform(struct.browserCacheSettings),
        cache_http_headers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.cacheHttpHeaders),
        cors: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.cors),
        custom_host_header: cdktf.stringToTerraform(struct.customHostHeader),
        custom_server_name: cdktf.stringToTerraform(struct.customServerName),
        disable_cache: cdktf.booleanToTerraform(struct.disableCache),
        disable_proxy_force_ranges: cdktf.booleanToTerraform(struct.disableProxyForceRanges),
        edge_cache_settings: cdktf.numberToTerraform(struct.edgeCacheSettings),
        fetched_compressed: cdktf.booleanToTerraform(struct.fetchedCompressed),
        forward_host_header: cdktf.booleanToTerraform(struct.forwardHostHeader),
        gzip_on: cdktf.booleanToTerraform(struct.gzipOn),
        ignore_cookie: cdktf.booleanToTerraform(struct.ignoreCookie),
        ignore_query_params: cdktf.booleanToTerraform(struct.ignoreQueryParams),
        proxy_cache_methods_set: cdktf.booleanToTerraform(struct.proxyCacheMethodsSet),
        query_params_blacklist: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.queryParamsBlacklist),
        query_params_whitelist: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.queryParamsWhitelist),
        redirect_http_to_https: cdktf.booleanToTerraform(struct.redirectHttpToHttps),
        redirect_https_to_http: cdktf.booleanToTerraform(struct.redirectHttpsToHttp),
        slice: cdktf.booleanToTerraform(struct.slice),
        static_request_headers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.staticRequestHeaders),
        static_response_headers: cdktf.hashMapper(cdktf.stringToTerraform)(struct.staticResponseHeaders),
    };
}
exports.cdnResourceOptionsToTerraform = cdnResourceOptionsToTerraform;
class CdnResourceOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowedHttpMethods !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedHttpMethods = this._allowedHttpMethods;
        }
        if (this._browserCacheSettings !== undefined) {
            hasAnyValues = true;
            internalValueResult.browserCacheSettings = this._browserCacheSettings;
        }
        if (this._cacheHttpHeaders !== undefined) {
            hasAnyValues = true;
            internalValueResult.cacheHttpHeaders = this._cacheHttpHeaders;
        }
        if (this._cors !== undefined) {
            hasAnyValues = true;
            internalValueResult.cors = this._cors;
        }
        if (this._customHostHeader !== undefined) {
            hasAnyValues = true;
            internalValueResult.customHostHeader = this._customHostHeader;
        }
        if (this._customServerName !== undefined) {
            hasAnyValues = true;
            internalValueResult.customServerName = this._customServerName;
        }
        if (this._disableCache !== undefined) {
            hasAnyValues = true;
            internalValueResult.disableCache = this._disableCache;
        }
        if (this._disableProxyForceRanges !== undefined) {
            hasAnyValues = true;
            internalValueResult.disableProxyForceRanges = this._disableProxyForceRanges;
        }
        if (this._edgeCacheSettings !== undefined) {
            hasAnyValues = true;
            internalValueResult.edgeCacheSettings = this._edgeCacheSettings;
        }
        if (this._fetchedCompressed !== undefined) {
            hasAnyValues = true;
            internalValueResult.fetchedCompressed = this._fetchedCompressed;
        }
        if (this._forwardHostHeader !== undefined) {
            hasAnyValues = true;
            internalValueResult.forwardHostHeader = this._forwardHostHeader;
        }
        if (this._gzipOn !== undefined) {
            hasAnyValues = true;
            internalValueResult.gzipOn = this._gzipOn;
        }
        if (this._ignoreCookie !== undefined) {
            hasAnyValues = true;
            internalValueResult.ignoreCookie = this._ignoreCookie;
        }
        if (this._ignoreQueryParams !== undefined) {
            hasAnyValues = true;
            internalValueResult.ignoreQueryParams = this._ignoreQueryParams;
        }
        if (this._proxyCacheMethodsSet !== undefined) {
            hasAnyValues = true;
            internalValueResult.proxyCacheMethodsSet = this._proxyCacheMethodsSet;
        }
        if (this._queryParamsBlacklist !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryParamsBlacklist = this._queryParamsBlacklist;
        }
        if (this._queryParamsWhitelist !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryParamsWhitelist = this._queryParamsWhitelist;
        }
        if (this._redirectHttpToHttps !== undefined) {
            hasAnyValues = true;
            internalValueResult.redirectHttpToHttps = this._redirectHttpToHttps;
        }
        if (this._redirectHttpsToHttp !== undefined) {
            hasAnyValues = true;
            internalValueResult.redirectHttpsToHttp = this._redirectHttpsToHttp;
        }
        if (this._slice !== undefined) {
            hasAnyValues = true;
            internalValueResult.slice = this._slice;
        }
        if (this._staticRequestHeaders !== undefined) {
            hasAnyValues = true;
            internalValueResult.staticRequestHeaders = this._staticRequestHeaders;
        }
        if (this._staticResponseHeaders !== undefined) {
            hasAnyValues = true;
            internalValueResult.staticResponseHeaders = this._staticResponseHeaders;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowedHttpMethods = undefined;
            this._browserCacheSettings = undefined;
            this._cacheHttpHeaders = undefined;
            this._cors = undefined;
            this._customHostHeader = undefined;
            this._customServerName = undefined;
            this._disableCache = undefined;
            this._disableProxyForceRanges = undefined;
            this._edgeCacheSettings = undefined;
            this._fetchedCompressed = undefined;
            this._forwardHostHeader = undefined;
            this._gzipOn = undefined;
            this._ignoreCookie = undefined;
            this._ignoreQueryParams = undefined;
            this._proxyCacheMethodsSet = undefined;
            this._queryParamsBlacklist = undefined;
            this._queryParamsWhitelist = undefined;
            this._redirectHttpToHttps = undefined;
            this._redirectHttpsToHttp = undefined;
            this._slice = undefined;
            this._staticRequestHeaders = undefined;
            this._staticResponseHeaders = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowedHttpMethods = value.allowedHttpMethods;
            this._browserCacheSettings = value.browserCacheSettings;
            this._cacheHttpHeaders = value.cacheHttpHeaders;
            this._cors = value.cors;
            this._customHostHeader = value.customHostHeader;
            this._customServerName = value.customServerName;
            this._disableCache = value.disableCache;
            this._disableProxyForceRanges = value.disableProxyForceRanges;
            this._edgeCacheSettings = value.edgeCacheSettings;
            this._fetchedCompressed = value.fetchedCompressed;
            this._forwardHostHeader = value.forwardHostHeader;
            this._gzipOn = value.gzipOn;
            this._ignoreCookie = value.ignoreCookie;
            this._ignoreQueryParams = value.ignoreQueryParams;
            this._proxyCacheMethodsSet = value.proxyCacheMethodsSet;
            this._queryParamsBlacklist = value.queryParamsBlacklist;
            this._queryParamsWhitelist = value.queryParamsWhitelist;
            this._redirectHttpToHttps = value.redirectHttpToHttps;
            this._redirectHttpsToHttp = value.redirectHttpsToHttp;
            this._slice = value.slice;
            this._staticRequestHeaders = value.staticRequestHeaders;
            this._staticResponseHeaders = value.staticResponseHeaders;
        }
    }
    get allowedHttpMethods() {
        return this.getListAttribute('allowed_http_methods');
    }
    set allowedHttpMethods(value) {
        this._allowedHttpMethods = value;
    }
    resetAllowedHttpMethods() {
        this._allowedHttpMethods = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedHttpMethodsInput() {
        return this._allowedHttpMethods;
    }
    get browserCacheSettings() {
        return this.getNumberAttribute('browser_cache_settings');
    }
    set browserCacheSettings(value) {
        this._browserCacheSettings = value;
    }
    resetBrowserCacheSettings() {
        this._browserCacheSettings = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get browserCacheSettingsInput() {
        return this._browserCacheSettings;
    }
    get cacheHttpHeaders() {
        return this.getListAttribute('cache_http_headers');
    }
    set cacheHttpHeaders(value) {
        this._cacheHttpHeaders = value;
    }
    resetCacheHttpHeaders() {
        this._cacheHttpHeaders = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cacheHttpHeadersInput() {
        return this._cacheHttpHeaders;
    }
    get cors() {
        return this.getListAttribute('cors');
    }
    set cors(value) {
        this._cors = value;
    }
    resetCors() {
        this._cors = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get corsInput() {
        return this._cors;
    }
    get customHostHeader() {
        return this.getStringAttribute('custom_host_header');
    }
    set customHostHeader(value) {
        this._customHostHeader = value;
    }
    resetCustomHostHeader() {
        this._customHostHeader = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customHostHeaderInput() {
        return this._customHostHeader;
    }
    get customServerName() {
        return this.getStringAttribute('custom_server_name');
    }
    set customServerName(value) {
        this._customServerName = value;
    }
    resetCustomServerName() {
        this._customServerName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customServerNameInput() {
        return this._customServerName;
    }
    get disableCache() {
        return this.getBooleanAttribute('disable_cache');
    }
    set disableCache(value) {
        this._disableCache = value;
    }
    resetDisableCache() {
        this._disableCache = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disableCacheInput() {
        return this._disableCache;
    }
    get disableProxyForceRanges() {
        return this.getBooleanAttribute('disable_proxy_force_ranges');
    }
    set disableProxyForceRanges(value) {
        this._disableProxyForceRanges = value;
    }
    resetDisableProxyForceRanges() {
        this._disableProxyForceRanges = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disableProxyForceRangesInput() {
        return this._disableProxyForceRanges;
    }
    get edgeCacheSettings() {
        return this.getNumberAttribute('edge_cache_settings');
    }
    set edgeCacheSettings(value) {
        this._edgeCacheSettings = value;
    }
    resetEdgeCacheSettings() {
        this._edgeCacheSettings = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get edgeCacheSettingsInput() {
        return this._edgeCacheSettings;
    }
    get fetchedCompressed() {
        return this.getBooleanAttribute('fetched_compressed');
    }
    set fetchedCompressed(value) {
        this._fetchedCompressed = value;
    }
    resetFetchedCompressed() {
        this._fetchedCompressed = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fetchedCompressedInput() {
        return this._fetchedCompressed;
    }
    get forwardHostHeader() {
        return this.getBooleanAttribute('forward_host_header');
    }
    set forwardHostHeader(value) {
        this._forwardHostHeader = value;
    }
    resetForwardHostHeader() {
        this._forwardHostHeader = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get forwardHostHeaderInput() {
        return this._forwardHostHeader;
    }
    get gzipOn() {
        return this.getBooleanAttribute('gzip_on');
    }
    set gzipOn(value) {
        this._gzipOn = value;
    }
    resetGzipOn() {
        this._gzipOn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gzipOnInput() {
        return this._gzipOn;
    }
    get ignoreCookie() {
        return this.getBooleanAttribute('ignore_cookie');
    }
    set ignoreCookie(value) {
        this._ignoreCookie = value;
    }
    resetIgnoreCookie() {
        this._ignoreCookie = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ignoreCookieInput() {
        return this._ignoreCookie;
    }
    get ignoreQueryParams() {
        return this.getBooleanAttribute('ignore_query_params');
    }
    set ignoreQueryParams(value) {
        this._ignoreQueryParams = value;
    }
    resetIgnoreQueryParams() {
        this._ignoreQueryParams = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ignoreQueryParamsInput() {
        return this._ignoreQueryParams;
    }
    get proxyCacheMethodsSet() {
        return this.getBooleanAttribute('proxy_cache_methods_set');
    }
    set proxyCacheMethodsSet(value) {
        this._proxyCacheMethodsSet = value;
    }
    resetProxyCacheMethodsSet() {
        this._proxyCacheMethodsSet = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get proxyCacheMethodsSetInput() {
        return this._proxyCacheMethodsSet;
    }
    get queryParamsBlacklist() {
        return this.getListAttribute('query_params_blacklist');
    }
    set queryParamsBlacklist(value) {
        this._queryParamsBlacklist = value;
    }
    resetQueryParamsBlacklist() {
        this._queryParamsBlacklist = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryParamsBlacklistInput() {
        return this._queryParamsBlacklist;
    }
    get queryParamsWhitelist() {
        return this.getListAttribute('query_params_whitelist');
    }
    set queryParamsWhitelist(value) {
        this._queryParamsWhitelist = value;
    }
    resetQueryParamsWhitelist() {
        this._queryParamsWhitelist = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryParamsWhitelistInput() {
        return this._queryParamsWhitelist;
    }
    get redirectHttpToHttps() {
        return this.getBooleanAttribute('redirect_http_to_https');
    }
    set redirectHttpToHttps(value) {
        this._redirectHttpToHttps = value;
    }
    resetRedirectHttpToHttps() {
        this._redirectHttpToHttps = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redirectHttpToHttpsInput() {
        return this._redirectHttpToHttps;
    }
    get redirectHttpsToHttp() {
        return this.getBooleanAttribute('redirect_https_to_http');
    }
    set redirectHttpsToHttp(value) {
        this._redirectHttpsToHttp = value;
    }
    resetRedirectHttpsToHttp() {
        this._redirectHttpsToHttp = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redirectHttpsToHttpInput() {
        return this._redirectHttpsToHttp;
    }
    get slice() {
        return this.getBooleanAttribute('slice');
    }
    set slice(value) {
        this._slice = value;
    }
    resetSlice() {
        this._slice = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sliceInput() {
        return this._slice;
    }
    get staticRequestHeaders() {
        return this.getListAttribute('static_request_headers');
    }
    set staticRequestHeaders(value) {
        this._staticRequestHeaders = value;
    }
    resetStaticRequestHeaders() {
        this._staticRequestHeaders = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get staticRequestHeadersInput() {
        return this._staticRequestHeaders;
    }
    get staticResponseHeaders() {
        return this.getStringMapAttribute('static_response_headers');
    }
    set staticResponseHeaders(value) {
        this._staticResponseHeaders = value;
    }
    resetStaticResponseHeaders() {
        this._staticResponseHeaders = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get staticResponseHeadersInput() {
        return this._staticResponseHeaders;
    }
}
exports.CdnResourceOptionsOutputReference = CdnResourceOptionsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
CdnResourceOptionsOutputReference[_a] = { fqn: "@cdktf/provider-yandex.CdnResourceOptionsOutputReference", version: "2.0.32" };
function cdnResourceSslCertificateToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        certificate_manager_id: cdktf.stringToTerraform(struct.certificateManagerId),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.cdnResourceSslCertificateToTerraform = cdnResourceSslCertificateToTerraform;
class CdnResourceSslCertificateOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._certificateManagerId !== undefined) {
            hasAnyValues = true;
            internalValueResult.certificateManagerId = this._certificateManagerId;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._certificateManagerId = undefined;
            this._type = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._certificateManagerId = value.certificateManagerId;
            this._type = value.type;
        }
    }
    get certificateManagerId() {
        return this.getStringAttribute('certificate_manager_id');
    }
    set certificateManagerId(value) {
        this._certificateManagerId = value;
    }
    resetCertificateManagerId() {
        this._certificateManagerId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get certificateManagerIdInput() {
        return this._certificateManagerId;
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getStringAttribute('status');
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
}
exports.CdnResourceSslCertificateOutputReference = CdnResourceSslCertificateOutputReference;
_b = JSII_RTTI_SYMBOL_1;
CdnResourceSslCertificateOutputReference[_b] = { fqn: "@cdktf/provider-yandex.CdnResourceSslCertificateOutputReference", version: "2.0.32" };
function cdnResourceTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.cdnResourceTimeoutsToTerraform = cdnResourceTimeoutsToTerraform;
class CdnResourceTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.CdnResourceTimeoutsOutputReference = CdnResourceTimeoutsOutputReference;
_c = JSII_RTTI_SYMBOL_1;
CdnResourceTimeoutsOutputReference[_c] = { fqn: "@cdktf/provider-yandex.CdnResourceTimeoutsOutputReference", version: "2.0.32" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/yandex/r/cdn_resource yandex_cdn_resource}
*/
class CdnResource extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/yandex/r/cdn_resource yandex_cdn_resource} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options CdnResourceConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'yandex_cdn_resource',
            terraformGeneratorMetadata: {
                providerName: 'yandex',
                providerVersion: '0.77.0',
                providerVersionConstraint: '~> 0.73'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // options - computed: false, optional: true, required: false
        this._options = new CdnResourceOptionsOutputReference(this, "options");
        // ssl_certificate - computed: false, optional: true, required: false
        this._sslCertificate = new CdnResourceSslCertificateOutputReference(this, "ssl_certificate");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new CdnResourceTimeoutsOutputReference(this, "timeouts");
        this._active = config.active;
        this._cname = config.cname;
        this._folderId = config.folderId;
        this._id = config.id;
        this._originGroupId = config.originGroupId;
        this._originGroupName = config.originGroupName;
        this._originProtocol = config.originProtocol;
        this._secondaryHostnames = config.secondaryHostnames;
        this._updatedAt = config.updatedAt;
        this._options.internalValue = config.options;
        this._sslCertificate.internalValue = config.sslCertificate;
        this._timeouts.internalValue = config.timeouts;
    }
    get active() {
        return this.getBooleanAttribute('active');
    }
    set active(value) {
        this._active = value;
    }
    resetActive() {
        this._active = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get activeInput() {
        return this._active;
    }
    get cname() {
        return this.getStringAttribute('cname');
    }
    set cname(value) {
        this._cname = value;
    }
    resetCname() {
        this._cname = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cnameInput() {
        return this._cname;
    }
    // created_at - computed: true, optional: false, required: false
    get createdAt() {
        return this.getStringAttribute('created_at');
    }
    get folderId() {
        return this.getStringAttribute('folder_id');
    }
    set folderId(value) {
        this._folderId = value;
    }
    resetFolderId() {
        this._folderId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get folderIdInput() {
        return this._folderId;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get originGroupId() {
        return this.getNumberAttribute('origin_group_id');
    }
    set originGroupId(value) {
        this._originGroupId = value;
    }
    resetOriginGroupId() {
        this._originGroupId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get originGroupIdInput() {
        return this._originGroupId;
    }
    get originGroupName() {
        return this.getStringAttribute('origin_group_name');
    }
    set originGroupName(value) {
        this._originGroupName = value;
    }
    resetOriginGroupName() {
        this._originGroupName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get originGroupNameInput() {
        return this._originGroupName;
    }
    get originProtocol() {
        return this.getStringAttribute('origin_protocol');
    }
    set originProtocol(value) {
        this._originProtocol = value;
    }
    resetOriginProtocol() {
        this._originProtocol = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get originProtocolInput() {
        return this._originProtocol;
    }
    get secondaryHostnames() {
        return cdktf.Fn.tolist(this.getListAttribute('secondary_hostnames'));
    }
    set secondaryHostnames(value) {
        this._secondaryHostnames = value;
    }
    resetSecondaryHostnames() {
        this._secondaryHostnames = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secondaryHostnamesInput() {
        return this._secondaryHostnames;
    }
    get updatedAt() {
        return this.getStringAttribute('updated_at');
    }
    set updatedAt(value) {
        this._updatedAt = value;
    }
    resetUpdatedAt() {
        this._updatedAt = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updatedAtInput() {
        return this._updatedAt;
    }
    get options() {
        return this._options;
    }
    putOptions(value) {
        this._options.internalValue = value;
    }
    resetOptions() {
        this._options.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get optionsInput() {
        return this._options.internalValue;
    }
    get sslCertificate() {
        return this._sslCertificate;
    }
    putSslCertificate(value) {
        this._sslCertificate.internalValue = value;
    }
    resetSslCertificate() {
        this._sslCertificate.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sslCertificateInput() {
        return this._sslCertificate.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            active: cdktf.booleanToTerraform(this._active),
            cname: cdktf.stringToTerraform(this._cname),
            folder_id: cdktf.stringToTerraform(this._folderId),
            id: cdktf.stringToTerraform(this._id),
            origin_group_id: cdktf.numberToTerraform(this._originGroupId),
            origin_group_name: cdktf.stringToTerraform(this._originGroupName),
            origin_protocol: cdktf.stringToTerraform(this._originProtocol),
            secondary_hostnames: cdktf.listMapper(cdktf.stringToTerraform, false)(this._secondaryHostnames),
            updated_at: cdktf.stringToTerraform(this._updatedAt),
            options: cdnResourceOptionsToTerraform(this._options.internalValue),
            ssl_certificate: cdnResourceSslCertificateToTerraform(this._sslCertificate.internalValue),
            timeouts: cdnResourceTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
}
exports.CdnResource = CdnResource;
_d = JSII_RTTI_SYMBOL_1;
CdnResource[_d] = { fqn: "@cdktf/provider-yandex.CdnResource", version: "2.0.32" };
// =================
// STATIC PROPERTIES
// =================
CdnResource.tfResourceType = "yandex_cdn_resource";
//# sourceMappingURL=data:application/json;base64,