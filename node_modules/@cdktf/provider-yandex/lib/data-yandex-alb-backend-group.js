"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataYandexAlbBackendGroup = exports.DataYandexAlbBackendGroupStreamBackendList = exports.DataYandexAlbBackendGroupStreamBackendOutputReference = exports.dataYandexAlbBackendGroupStreamBackendToTerraform = exports.DataYandexAlbBackendGroupStreamBackendTlsOutputReference = exports.dataYandexAlbBackendGroupStreamBackendTlsToTerraform = exports.DataYandexAlbBackendGroupStreamBackendTlsValidationContextOutputReference = exports.dataYandexAlbBackendGroupStreamBackendTlsValidationContextToTerraform = exports.DataYandexAlbBackendGroupStreamBackendLoadBalancingConfigOutputReference = exports.dataYandexAlbBackendGroupStreamBackendLoadBalancingConfigToTerraform = exports.DataYandexAlbBackendGroupStreamBackendHealthcheckOutputReference = exports.dataYandexAlbBackendGroupStreamBackendHealthcheckToTerraform = exports.DataYandexAlbBackendGroupStreamBackendHealthcheckStreamHealthcheckOutputReference = exports.dataYandexAlbBackendGroupStreamBackendHealthcheckStreamHealthcheckToTerraform = exports.DataYandexAlbBackendGroupStreamBackendHealthcheckHttpHealthcheckOutputReference = exports.dataYandexAlbBackendGroupStreamBackendHealthcheckHttpHealthcheckToTerraform = exports.DataYandexAlbBackendGroupStreamBackendHealthcheckGrpcHealthcheckOutputReference = exports.dataYandexAlbBackendGroupStreamBackendHealthcheckGrpcHealthcheckToTerraform = exports.DataYandexAlbBackendGroupSessionAffinityOutputReference = exports.dataYandexAlbBackendGroupSessionAffinityToTerraform = exports.DataYandexAlbBackendGroupSessionAffinityHeaderOutputReference = exports.dataYandexAlbBackendGroupSessionAffinityHeaderToTerraform = exports.DataYandexAlbBackendGroupSessionAffinityCookieOutputReference = exports.dataYandexAlbBackendGroupSessionAffinityCookieToTerraform = exports.DataYandexAlbBackendGroupSessionAffinityConnectionOutputReference = exports.dataYandexAlbBackendGroupSessionAffinityConnectionToTerraform = exports.DataYandexAlbBackendGroupHttpBackendList = exports.DataYandexAlbBackendGroupHttpBackendOutputReference = exports.dataYandexAlbBackendGroupHttpBackendToTerraform = exports.DataYandexAlbBackendGroupHttpBackendTlsOutputReference = exports.dataYandexAlbBackendGroupHttpBackendTlsToTerraform = exports.DataYandexAlbBackendGroupHttpBackendTlsValidationContextOutputReference = exports.dataYandexAlbBackendGroupHttpBackendTlsValidationContextToTerraform = exports.DataYandexAlbBackendGroupHttpBackendLoadBalancingConfigOutputReference = exports.dataYandexAlbBackendGroupHttpBackendLoadBalancingConfigToTerraform = exports.DataYandexAlbBackendGroupHttpBackendHealthcheckOutputReference = exports.dataYandexAlbBackendGroupHttpBackendHealthcheckToTerraform = exports.DataYandexAlbBackendGroupHttpBackendHealthcheckStreamHealthcheckOutputReference = exports.dataYandexAlbBackendGroupHttpBackendHealthcheckStreamHealthcheckToTerraform = exports.DataYandexAlbBackendGroupHttpBackendHealthcheckHttpHealthcheckOutputReference = exports.dataYandexAlbBackendGroupHttpBackendHealthcheckHttpHealthcheckToTerraform = exports.DataYandexAlbBackendGroupHttpBackendHealthcheckGrpcHealthcheckOutputReference = exports.dataYandexAlbBackendGroupHttpBackendHealthcheckGrpcHealthcheckToTerraform = exports.DataYandexAlbBackendGroupGrpcBackendList = exports.DataYandexAlbBackendGroupGrpcBackendOutputReference = exports.dataYandexAlbBackendGroupGrpcBackendToTerraform = exports.DataYandexAlbBackendGroupGrpcBackendTlsOutputReference = exports.dataYandexAlbBackendGroupGrpcBackendTlsToTerraform = exports.DataYandexAlbBackendGroupGrpcBackendTlsValidationContextOutputReference = exports.dataYandexAlbBackendGroupGrpcBackendTlsValidationContextToTerraform = exports.DataYandexAlbBackendGroupGrpcBackendLoadBalancingConfigOutputReference = exports.dataYandexAlbBackendGroupGrpcBackendLoadBalancingConfigToTerraform = exports.DataYandexAlbBackendGroupGrpcBackendHealthcheckOutputReference = exports.dataYandexAlbBackendGroupGrpcBackendHealthcheckToTerraform = exports.DataYandexAlbBackendGroupGrpcBackendHealthcheckStreamHealthcheckOutputReference = exports.dataYandexAlbBackendGroupGrpcBackendHealthcheckStreamHealthcheckToTerraform = exports.DataYandexAlbBackendGroupGrpcBackendHealthcheckHttpHealthcheckOutputReference = exports.dataYandexAlbBackendGroupGrpcBackendHealthcheckHttpHealthcheckToTerraform = exports.DataYandexAlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheckOutputReference = exports.dataYandexAlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheckToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function dataYandexAlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheckToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        service_name: cdktf.stringToTerraform(struct.serviceName),
    };
}
exports.dataYandexAlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheckToTerraform = dataYandexAlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheckToTerraform;
class DataYandexAlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheckOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._serviceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceName = this._serviceName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._serviceName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._serviceName = value.serviceName;
        }
    }
    get serviceName() {
        return this.getStringAttribute('service_name');
    }
    set serviceName(value) {
        this._serviceName = value;
    }
    resetServiceName() {
        this._serviceName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceNameInput() {
        return this._serviceName;
    }
}
exports.DataYandexAlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheckOutputReference = DataYandexAlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheckOutputReference;
_a = JSII_RTTI_SYMBOL_1;
DataYandexAlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheckOutputReference[_a] = { fqn: "@cdktf/provider-yandex.DataYandexAlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheckOutputReference", version: "2.0.32" };
function dataYandexAlbBackendGroupGrpcBackendHealthcheckHttpHealthcheckToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        host: cdktf.stringToTerraform(struct.host),
        http2: cdktf.booleanToTerraform(struct.http2),
    };
}
exports.dataYandexAlbBackendGroupGrpcBackendHealthcheckHttpHealthcheckToTerraform = dataYandexAlbBackendGroupGrpcBackendHealthcheckHttpHealthcheckToTerraform;
class DataYandexAlbBackendGroupGrpcBackendHealthcheckHttpHealthcheckOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._host !== undefined) {
            hasAnyValues = true;
            internalValueResult.host = this._host;
        }
        if (this._http2 !== undefined) {
            hasAnyValues = true;
            internalValueResult.http2 = this._http2;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._host = undefined;
            this._http2 = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._host = value.host;
            this._http2 = value.http2;
        }
    }
    get host() {
        return this.getStringAttribute('host');
    }
    set host(value) {
        this._host = value;
    }
    resetHost() {
        this._host = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostInput() {
        return this._host;
    }
    get http2() {
        return this.getBooleanAttribute('http2');
    }
    set http2(value) {
        this._http2 = value;
    }
    resetHttp2() {
        this._http2 = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get http2Input() {
        return this._http2;
    }
    // path - computed: true, optional: false, required: false
    get path() {
        return this.getStringAttribute('path');
    }
}
exports.DataYandexAlbBackendGroupGrpcBackendHealthcheckHttpHealthcheckOutputReference = DataYandexAlbBackendGroupGrpcBackendHealthcheckHttpHealthcheckOutputReference;
_b = JSII_RTTI_SYMBOL_1;
DataYandexAlbBackendGroupGrpcBackendHealthcheckHttpHealthcheckOutputReference[_b] = { fqn: "@cdktf/provider-yandex.DataYandexAlbBackendGroupGrpcBackendHealthcheckHttpHealthcheckOutputReference", version: "2.0.32" };
function dataYandexAlbBackendGroupGrpcBackendHealthcheckStreamHealthcheckToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        receive: cdktf.stringToTerraform(struct.receive),
        send: cdktf.stringToTerraform(struct.send),
    };
}
exports.dataYandexAlbBackendGroupGrpcBackendHealthcheckStreamHealthcheckToTerraform = dataYandexAlbBackendGroupGrpcBackendHealthcheckStreamHealthcheckToTerraform;
class DataYandexAlbBackendGroupGrpcBackendHealthcheckStreamHealthcheckOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._receive !== undefined) {
            hasAnyValues = true;
            internalValueResult.receive = this._receive;
        }
        if (this._send !== undefined) {
            hasAnyValues = true;
            internalValueResult.send = this._send;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._receive = undefined;
            this._send = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._receive = value.receive;
            this._send = value.send;
        }
    }
    get receive() {
        return this.getStringAttribute('receive');
    }
    set receive(value) {
        this._receive = value;
    }
    resetReceive() {
        this._receive = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get receiveInput() {
        return this._receive;
    }
    get send() {
        return this.getStringAttribute('send');
    }
    set send(value) {
        this._send = value;
    }
    resetSend() {
        this._send = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sendInput() {
        return this._send;
    }
}
exports.DataYandexAlbBackendGroupGrpcBackendHealthcheckStreamHealthcheckOutputReference = DataYandexAlbBackendGroupGrpcBackendHealthcheckStreamHealthcheckOutputReference;
_c = JSII_RTTI_SYMBOL_1;
DataYandexAlbBackendGroupGrpcBackendHealthcheckStreamHealthcheckOutputReference[_c] = { fqn: "@cdktf/provider-yandex.DataYandexAlbBackendGroupGrpcBackendHealthcheckStreamHealthcheckOutputReference", version: "2.0.32" };
function dataYandexAlbBackendGroupGrpcBackendHealthcheckToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        healthcheck_port: cdktf.numberToTerraform(struct.healthcheckPort),
        healthy_threshold: cdktf.numberToTerraform(struct.healthyThreshold),
        interval_jitter_percent: cdktf.numberToTerraform(struct.intervalJitterPercent),
        unhealthy_threshold: cdktf.numberToTerraform(struct.unhealthyThreshold),
        grpc_healthcheck: dataYandexAlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheckToTerraform(struct.grpcHealthcheck),
        http_healthcheck: dataYandexAlbBackendGroupGrpcBackendHealthcheckHttpHealthcheckToTerraform(struct.httpHealthcheck),
        stream_healthcheck: dataYandexAlbBackendGroupGrpcBackendHealthcheckStreamHealthcheckToTerraform(struct.streamHealthcheck),
    };
}
exports.dataYandexAlbBackendGroupGrpcBackendHealthcheckToTerraform = dataYandexAlbBackendGroupGrpcBackendHealthcheckToTerraform;
class DataYandexAlbBackendGroupGrpcBackendHealthcheckOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // grpc_healthcheck - computed: false, optional: true, required: false
        this._grpcHealthcheck = new DataYandexAlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheckOutputReference(this, "grpc_healthcheck");
        // http_healthcheck - computed: false, optional: true, required: false
        this._httpHealthcheck = new DataYandexAlbBackendGroupGrpcBackendHealthcheckHttpHealthcheckOutputReference(this, "http_healthcheck");
        // stream_healthcheck - computed: false, optional: true, required: false
        this._streamHealthcheck = new DataYandexAlbBackendGroupGrpcBackendHealthcheckStreamHealthcheckOutputReference(this, "stream_healthcheck");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._healthcheckPort !== undefined) {
            hasAnyValues = true;
            internalValueResult.healthcheckPort = this._healthcheckPort;
        }
        if (this._healthyThreshold !== undefined) {
            hasAnyValues = true;
            internalValueResult.healthyThreshold = this._healthyThreshold;
        }
        if (this._intervalJitterPercent !== undefined) {
            hasAnyValues = true;
            internalValueResult.intervalJitterPercent = this._intervalJitterPercent;
        }
        if (this._unhealthyThreshold !== undefined) {
            hasAnyValues = true;
            internalValueResult.unhealthyThreshold = this._unhealthyThreshold;
        }
        if (this._grpcHealthcheck?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.grpcHealthcheck = this._grpcHealthcheck?.internalValue;
        }
        if (this._httpHealthcheck?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpHealthcheck = this._httpHealthcheck?.internalValue;
        }
        if (this._streamHealthcheck?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.streamHealthcheck = this._streamHealthcheck?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._healthcheckPort = undefined;
            this._healthyThreshold = undefined;
            this._intervalJitterPercent = undefined;
            this._unhealthyThreshold = undefined;
            this._grpcHealthcheck.internalValue = undefined;
            this._httpHealthcheck.internalValue = undefined;
            this._streamHealthcheck.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._healthcheckPort = value.healthcheckPort;
            this._healthyThreshold = value.healthyThreshold;
            this._intervalJitterPercent = value.intervalJitterPercent;
            this._unhealthyThreshold = value.unhealthyThreshold;
            this._grpcHealthcheck.internalValue = value.grpcHealthcheck;
            this._httpHealthcheck.internalValue = value.httpHealthcheck;
            this._streamHealthcheck.internalValue = value.streamHealthcheck;
        }
    }
    get healthcheckPort() {
        return this.getNumberAttribute('healthcheck_port');
    }
    set healthcheckPort(value) {
        this._healthcheckPort = value;
    }
    resetHealthcheckPort() {
        this._healthcheckPort = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get healthcheckPortInput() {
        return this._healthcheckPort;
    }
    get healthyThreshold() {
        return this.getNumberAttribute('healthy_threshold');
    }
    set healthyThreshold(value) {
        this._healthyThreshold = value;
    }
    resetHealthyThreshold() {
        this._healthyThreshold = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get healthyThresholdInput() {
        return this._healthyThreshold;
    }
    // interval - computed: true, optional: false, required: false
    get interval() {
        return this.getStringAttribute('interval');
    }
    get intervalJitterPercent() {
        return this.getNumberAttribute('interval_jitter_percent');
    }
    set intervalJitterPercent(value) {
        this._intervalJitterPercent = value;
    }
    resetIntervalJitterPercent() {
        this._intervalJitterPercent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get intervalJitterPercentInput() {
        return this._intervalJitterPercent;
    }
    // timeout - computed: true, optional: false, required: false
    get timeout() {
        return this.getStringAttribute('timeout');
    }
    get unhealthyThreshold() {
        return this.getNumberAttribute('unhealthy_threshold');
    }
    set unhealthyThreshold(value) {
        this._unhealthyThreshold = value;
    }
    resetUnhealthyThreshold() {
        this._unhealthyThreshold = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get unhealthyThresholdInput() {
        return this._unhealthyThreshold;
    }
    get grpcHealthcheck() {
        return this._grpcHealthcheck;
    }
    putGrpcHealthcheck(value) {
        this._grpcHealthcheck.internalValue = value;
    }
    resetGrpcHealthcheck() {
        this._grpcHealthcheck.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get grpcHealthcheckInput() {
        return this._grpcHealthcheck.internalValue;
    }
    get httpHealthcheck() {
        return this._httpHealthcheck;
    }
    putHttpHealthcheck(value) {
        this._httpHealthcheck.internalValue = value;
    }
    resetHttpHealthcheck() {
        this._httpHealthcheck.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpHealthcheckInput() {
        return this._httpHealthcheck.internalValue;
    }
    get streamHealthcheck() {
        return this._streamHealthcheck;
    }
    putStreamHealthcheck(value) {
        this._streamHealthcheck.internalValue = value;
    }
    resetStreamHealthcheck() {
        this._streamHealthcheck.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get streamHealthcheckInput() {
        return this._streamHealthcheck.internalValue;
    }
}
exports.DataYandexAlbBackendGroupGrpcBackendHealthcheckOutputReference = DataYandexAlbBackendGroupGrpcBackendHealthcheckOutputReference;
_d = JSII_RTTI_SYMBOL_1;
DataYandexAlbBackendGroupGrpcBackendHealthcheckOutputReference[_d] = { fqn: "@cdktf/provider-yandex.DataYandexAlbBackendGroupGrpcBackendHealthcheckOutputReference", version: "2.0.32" };
function dataYandexAlbBackendGroupGrpcBackendLoadBalancingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        locality_aware_routing_percent: cdktf.numberToTerraform(struct.localityAwareRoutingPercent),
        mode: cdktf.stringToTerraform(struct.mode),
        panic_threshold: cdktf.numberToTerraform(struct.panicThreshold),
        strict_locality: cdktf.booleanToTerraform(struct.strictLocality),
    };
}
exports.dataYandexAlbBackendGroupGrpcBackendLoadBalancingConfigToTerraform = dataYandexAlbBackendGroupGrpcBackendLoadBalancingConfigToTerraform;
class DataYandexAlbBackendGroupGrpcBackendLoadBalancingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._localityAwareRoutingPercent !== undefined) {
            hasAnyValues = true;
            internalValueResult.localityAwareRoutingPercent = this._localityAwareRoutingPercent;
        }
        if (this._mode !== undefined) {
            hasAnyValues = true;
            internalValueResult.mode = this._mode;
        }
        if (this._panicThreshold !== undefined) {
            hasAnyValues = true;
            internalValueResult.panicThreshold = this._panicThreshold;
        }
        if (this._strictLocality !== undefined) {
            hasAnyValues = true;
            internalValueResult.strictLocality = this._strictLocality;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._localityAwareRoutingPercent = undefined;
            this._mode = undefined;
            this._panicThreshold = undefined;
            this._strictLocality = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._localityAwareRoutingPercent = value.localityAwareRoutingPercent;
            this._mode = value.mode;
            this._panicThreshold = value.panicThreshold;
            this._strictLocality = value.strictLocality;
        }
    }
    get localityAwareRoutingPercent() {
        return this.getNumberAttribute('locality_aware_routing_percent');
    }
    set localityAwareRoutingPercent(value) {
        this._localityAwareRoutingPercent = value;
    }
    resetLocalityAwareRoutingPercent() {
        this._localityAwareRoutingPercent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localityAwareRoutingPercentInput() {
        return this._localityAwareRoutingPercent;
    }
    get mode() {
        return this.getStringAttribute('mode');
    }
    set mode(value) {
        this._mode = value;
    }
    resetMode() {
        this._mode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get modeInput() {
        return this._mode;
    }
    get panicThreshold() {
        return this.getNumberAttribute('panic_threshold');
    }
    set panicThreshold(value) {
        this._panicThreshold = value;
    }
    resetPanicThreshold() {
        this._panicThreshold = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get panicThresholdInput() {
        return this._panicThreshold;
    }
    get strictLocality() {
        return this.getBooleanAttribute('strict_locality');
    }
    set strictLocality(value) {
        this._strictLocality = value;
    }
    resetStrictLocality() {
        this._strictLocality = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get strictLocalityInput() {
        return this._strictLocality;
    }
}
exports.DataYandexAlbBackendGroupGrpcBackendLoadBalancingConfigOutputReference = DataYandexAlbBackendGroupGrpcBackendLoadBalancingConfigOutputReference;
_e = JSII_RTTI_SYMBOL_1;
DataYandexAlbBackendGroupGrpcBackendLoadBalancingConfigOutputReference[_e] = { fqn: "@cdktf/provider-yandex.DataYandexAlbBackendGroupGrpcBackendLoadBalancingConfigOutputReference", version: "2.0.32" };
function dataYandexAlbBackendGroupGrpcBackendTlsValidationContextToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        trusted_ca_bytes: cdktf.stringToTerraform(struct.trustedCaBytes),
        trusted_ca_id: cdktf.stringToTerraform(struct.trustedCaId),
    };
}
exports.dataYandexAlbBackendGroupGrpcBackendTlsValidationContextToTerraform = dataYandexAlbBackendGroupGrpcBackendTlsValidationContextToTerraform;
class DataYandexAlbBackendGroupGrpcBackendTlsValidationContextOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._trustedCaBytes !== undefined) {
            hasAnyValues = true;
            internalValueResult.trustedCaBytes = this._trustedCaBytes;
        }
        if (this._trustedCaId !== undefined) {
            hasAnyValues = true;
            internalValueResult.trustedCaId = this._trustedCaId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._trustedCaBytes = undefined;
            this._trustedCaId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._trustedCaBytes = value.trustedCaBytes;
            this._trustedCaId = value.trustedCaId;
        }
    }
    get trustedCaBytes() {
        return this.getStringAttribute('trusted_ca_bytes');
    }
    set trustedCaBytes(value) {
        this._trustedCaBytes = value;
    }
    resetTrustedCaBytes() {
        this._trustedCaBytes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get trustedCaBytesInput() {
        return this._trustedCaBytes;
    }
    get trustedCaId() {
        return this.getStringAttribute('trusted_ca_id');
    }
    set trustedCaId(value) {
        this._trustedCaId = value;
    }
    resetTrustedCaId() {
        this._trustedCaId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get trustedCaIdInput() {
        return this._trustedCaId;
    }
}
exports.DataYandexAlbBackendGroupGrpcBackendTlsValidationContextOutputReference = DataYandexAlbBackendGroupGrpcBackendTlsValidationContextOutputReference;
_f = JSII_RTTI_SYMBOL_1;
DataYandexAlbBackendGroupGrpcBackendTlsValidationContextOutputReference[_f] = { fqn: "@cdktf/provider-yandex.DataYandexAlbBackendGroupGrpcBackendTlsValidationContextOutputReference", version: "2.0.32" };
function dataYandexAlbBackendGroupGrpcBackendTlsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        sni: cdktf.stringToTerraform(struct.sni),
        validation_context: dataYandexAlbBackendGroupGrpcBackendTlsValidationContextToTerraform(struct.validationContext),
    };
}
exports.dataYandexAlbBackendGroupGrpcBackendTlsToTerraform = dataYandexAlbBackendGroupGrpcBackendTlsToTerraform;
class DataYandexAlbBackendGroupGrpcBackendTlsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // validation_context - computed: false, optional: true, required: false
        this._validationContext = new DataYandexAlbBackendGroupGrpcBackendTlsValidationContextOutputReference(this, "validation_context");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._sni !== undefined) {
            hasAnyValues = true;
            internalValueResult.sni = this._sni;
        }
        if (this._validationContext?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.validationContext = this._validationContext?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._sni = undefined;
            this._validationContext.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._sni = value.sni;
            this._validationContext.internalValue = value.validationContext;
        }
    }
    get sni() {
        return this.getStringAttribute('sni');
    }
    set sni(value) {
        this._sni = value;
    }
    resetSni() {
        this._sni = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sniInput() {
        return this._sni;
    }
    get validationContext() {
        return this._validationContext;
    }
    putValidationContext(value) {
        this._validationContext.internalValue = value;
    }
    resetValidationContext() {
        this._validationContext.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get validationContextInput() {
        return this._validationContext.internalValue;
    }
}
exports.DataYandexAlbBackendGroupGrpcBackendTlsOutputReference = DataYandexAlbBackendGroupGrpcBackendTlsOutputReference;
_g = JSII_RTTI_SYMBOL_1;
DataYandexAlbBackendGroupGrpcBackendTlsOutputReference[_g] = { fqn: "@cdktf/provider-yandex.DataYandexAlbBackendGroupGrpcBackendTlsOutputReference", version: "2.0.32" };
function dataYandexAlbBackendGroupGrpcBackendToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        port: cdktf.numberToTerraform(struct.port),
        weight: cdktf.numberToTerraform(struct.weight),
        healthcheck: dataYandexAlbBackendGroupGrpcBackendHealthcheckToTerraform(struct.healthcheck),
        load_balancing_config: dataYandexAlbBackendGroupGrpcBackendLoadBalancingConfigToTerraform(struct.loadBalancingConfig),
        tls: dataYandexAlbBackendGroupGrpcBackendTlsToTerraform(struct.tls),
    };
}
exports.dataYandexAlbBackendGroupGrpcBackendToTerraform = dataYandexAlbBackendGroupGrpcBackendToTerraform;
class DataYandexAlbBackendGroupGrpcBackendOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // healthcheck - computed: false, optional: true, required: false
        this._healthcheck = new DataYandexAlbBackendGroupGrpcBackendHealthcheckOutputReference(this, "healthcheck");
        // load_balancing_config - computed: false, optional: true, required: false
        this._loadBalancingConfig = new DataYandexAlbBackendGroupGrpcBackendLoadBalancingConfigOutputReference(this, "load_balancing_config");
        // tls - computed: false, optional: true, required: false
        this._tls = new DataYandexAlbBackendGroupGrpcBackendTlsOutputReference(this, "tls");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        if (this._weight !== undefined) {
            hasAnyValues = true;
            internalValueResult.weight = this._weight;
        }
        if (this._healthcheck?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.healthcheck = this._healthcheck?.internalValue;
        }
        if (this._loadBalancingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.loadBalancingConfig = this._loadBalancingConfig?.internalValue;
        }
        if (this._tls?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tls = this._tls?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._port = undefined;
            this._weight = undefined;
            this._healthcheck.internalValue = undefined;
            this._loadBalancingConfig.internalValue = undefined;
            this._tls.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._port = value.port;
            this._weight = value.weight;
            this._healthcheck.internalValue = value.healthcheck;
            this._loadBalancingConfig.internalValue = value.loadBalancingConfig;
            this._tls.internalValue = value.tls;
        }
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    resetPort() {
        this._port = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
    // target_group_ids - computed: true, optional: false, required: false
    get targetGroupIds() {
        return this.getListAttribute('target_group_ids');
    }
    get weight() {
        return this.getNumberAttribute('weight');
    }
    set weight(value) {
        this._weight = value;
    }
    resetWeight() {
        this._weight = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get weightInput() {
        return this._weight;
    }
    get healthcheck() {
        return this._healthcheck;
    }
    putHealthcheck(value) {
        this._healthcheck.internalValue = value;
    }
    resetHealthcheck() {
        this._healthcheck.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get healthcheckInput() {
        return this._healthcheck.internalValue;
    }
    get loadBalancingConfig() {
        return this._loadBalancingConfig;
    }
    putLoadBalancingConfig(value) {
        this._loadBalancingConfig.internalValue = value;
    }
    resetLoadBalancingConfig() {
        this._loadBalancingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loadBalancingConfigInput() {
        return this._loadBalancingConfig.internalValue;
    }
    get tls() {
        return this._tls;
    }
    putTls(value) {
        this._tls.internalValue = value;
    }
    resetTls() {
        this._tls.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tlsInput() {
        return this._tls.internalValue;
    }
}
exports.DataYandexAlbBackendGroupGrpcBackendOutputReference = DataYandexAlbBackendGroupGrpcBackendOutputReference;
_h = JSII_RTTI_SYMBOL_1;
DataYandexAlbBackendGroupGrpcBackendOutputReference[_h] = { fqn: "@cdktf/provider-yandex.DataYandexAlbBackendGroupGrpcBackendOutputReference", version: "2.0.32" };
class DataYandexAlbBackendGroupGrpcBackendList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataYandexAlbBackendGroupGrpcBackendOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataYandexAlbBackendGroupGrpcBackendList = DataYandexAlbBackendGroupGrpcBackendList;
_j = JSII_RTTI_SYMBOL_1;
DataYandexAlbBackendGroupGrpcBackendList[_j] = { fqn: "@cdktf/provider-yandex.DataYandexAlbBackendGroupGrpcBackendList", version: "2.0.32" };
function dataYandexAlbBackendGroupHttpBackendHealthcheckGrpcHealthcheckToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        service_name: cdktf.stringToTerraform(struct.serviceName),
    };
}
exports.dataYandexAlbBackendGroupHttpBackendHealthcheckGrpcHealthcheckToTerraform = dataYandexAlbBackendGroupHttpBackendHealthcheckGrpcHealthcheckToTerraform;
class DataYandexAlbBackendGroupHttpBackendHealthcheckGrpcHealthcheckOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._serviceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceName = this._serviceName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._serviceName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._serviceName = value.serviceName;
        }
    }
    get serviceName() {
        return this.getStringAttribute('service_name');
    }
    set serviceName(value) {
        this._serviceName = value;
    }
    resetServiceName() {
        this._serviceName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceNameInput() {
        return this._serviceName;
    }
}
exports.DataYandexAlbBackendGroupHttpBackendHealthcheckGrpcHealthcheckOutputReference = DataYandexAlbBackendGroupHttpBackendHealthcheckGrpcHealthcheckOutputReference;
_k = JSII_RTTI_SYMBOL_1;
DataYandexAlbBackendGroupHttpBackendHealthcheckGrpcHealthcheckOutputReference[_k] = { fqn: "@cdktf/provider-yandex.DataYandexAlbBackendGroupHttpBackendHealthcheckGrpcHealthcheckOutputReference", version: "2.0.32" };
function dataYandexAlbBackendGroupHttpBackendHealthcheckHttpHealthcheckToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        host: cdktf.stringToTerraform(struct.host),
        http2: cdktf.booleanToTerraform(struct.http2),
    };
}
exports.dataYandexAlbBackendGroupHttpBackendHealthcheckHttpHealthcheckToTerraform = dataYandexAlbBackendGroupHttpBackendHealthcheckHttpHealthcheckToTerraform;
class DataYandexAlbBackendGroupHttpBackendHealthcheckHttpHealthcheckOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._host !== undefined) {
            hasAnyValues = true;
            internalValueResult.host = this._host;
        }
        if (this._http2 !== undefined) {
            hasAnyValues = true;
            internalValueResult.http2 = this._http2;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._host = undefined;
            this._http2 = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._host = value.host;
            this._http2 = value.http2;
        }
    }
    get host() {
        return this.getStringAttribute('host');
    }
    set host(value) {
        this._host = value;
    }
    resetHost() {
        this._host = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostInput() {
        return this._host;
    }
    get http2() {
        return this.getBooleanAttribute('http2');
    }
    set http2(value) {
        this._http2 = value;
    }
    resetHttp2() {
        this._http2 = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get http2Input() {
        return this._http2;
    }
    // path - computed: true, optional: false, required: false
    get path() {
        return this.getStringAttribute('path');
    }
}
exports.DataYandexAlbBackendGroupHttpBackendHealthcheckHttpHealthcheckOutputReference = DataYandexAlbBackendGroupHttpBackendHealthcheckHttpHealthcheckOutputReference;
_l = JSII_RTTI_SYMBOL_1;
DataYandexAlbBackendGroupHttpBackendHealthcheckHttpHealthcheckOutputReference[_l] = { fqn: "@cdktf/provider-yandex.DataYandexAlbBackendGroupHttpBackendHealthcheckHttpHealthcheckOutputReference", version: "2.0.32" };
function dataYandexAlbBackendGroupHttpBackendHealthcheckStreamHealthcheckToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        receive: cdktf.stringToTerraform(struct.receive),
        send: cdktf.stringToTerraform(struct.send),
    };
}
exports.dataYandexAlbBackendGroupHttpBackendHealthcheckStreamHealthcheckToTerraform = dataYandexAlbBackendGroupHttpBackendHealthcheckStreamHealthcheckToTerraform;
class DataYandexAlbBackendGroupHttpBackendHealthcheckStreamHealthcheckOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._receive !== undefined) {
            hasAnyValues = true;
            internalValueResult.receive = this._receive;
        }
        if (this._send !== undefined) {
            hasAnyValues = true;
            internalValueResult.send = this._send;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._receive = undefined;
            this._send = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._receive = value.receive;
            this._send = value.send;
        }
    }
    get receive() {
        return this.getStringAttribute('receive');
    }
    set receive(value) {
        this._receive = value;
    }
    resetReceive() {
        this._receive = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get receiveInput() {
        return this._receive;
    }
    get send() {
        return this.getStringAttribute('send');
    }
    set send(value) {
        this._send = value;
    }
    resetSend() {
        this._send = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sendInput() {
        return this._send;
    }
}
exports.DataYandexAlbBackendGroupHttpBackendHealthcheckStreamHealthcheckOutputReference = DataYandexAlbBackendGroupHttpBackendHealthcheckStreamHealthcheckOutputReference;
_m = JSII_RTTI_SYMBOL_1;
DataYandexAlbBackendGroupHttpBackendHealthcheckStreamHealthcheckOutputReference[_m] = { fqn: "@cdktf/provider-yandex.DataYandexAlbBackendGroupHttpBackendHealthcheckStreamHealthcheckOutputReference", version: "2.0.32" };
function dataYandexAlbBackendGroupHttpBackendHealthcheckToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        healthcheck_port: cdktf.numberToTerraform(struct.healthcheckPort),
        healthy_threshold: cdktf.numberToTerraform(struct.healthyThreshold),
        interval_jitter_percent: cdktf.numberToTerraform(struct.intervalJitterPercent),
        unhealthy_threshold: cdktf.numberToTerraform(struct.unhealthyThreshold),
        grpc_healthcheck: dataYandexAlbBackendGroupHttpBackendHealthcheckGrpcHealthcheckToTerraform(struct.grpcHealthcheck),
        http_healthcheck: dataYandexAlbBackendGroupHttpBackendHealthcheckHttpHealthcheckToTerraform(struct.httpHealthcheck),
        stream_healthcheck: dataYandexAlbBackendGroupHttpBackendHealthcheckStreamHealthcheckToTerraform(struct.streamHealthcheck),
    };
}
exports.dataYandexAlbBackendGroupHttpBackendHealthcheckToTerraform = dataYandexAlbBackendGroupHttpBackendHealthcheckToTerraform;
class DataYandexAlbBackendGroupHttpBackendHealthcheckOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // grpc_healthcheck - computed: false, optional: true, required: false
        this._grpcHealthcheck = new DataYandexAlbBackendGroupHttpBackendHealthcheckGrpcHealthcheckOutputReference(this, "grpc_healthcheck");
        // http_healthcheck - computed: false, optional: true, required: false
        this._httpHealthcheck = new DataYandexAlbBackendGroupHttpBackendHealthcheckHttpHealthcheckOutputReference(this, "http_healthcheck");
        // stream_healthcheck - computed: false, optional: true, required: false
        this._streamHealthcheck = new DataYandexAlbBackendGroupHttpBackendHealthcheckStreamHealthcheckOutputReference(this, "stream_healthcheck");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._healthcheckPort !== undefined) {
            hasAnyValues = true;
            internalValueResult.healthcheckPort = this._healthcheckPort;
        }
        if (this._healthyThreshold !== undefined) {
            hasAnyValues = true;
            internalValueResult.healthyThreshold = this._healthyThreshold;
        }
        if (this._intervalJitterPercent !== undefined) {
            hasAnyValues = true;
            internalValueResult.intervalJitterPercent = this._intervalJitterPercent;
        }
        if (this._unhealthyThreshold !== undefined) {
            hasAnyValues = true;
            internalValueResult.unhealthyThreshold = this._unhealthyThreshold;
        }
        if (this._grpcHealthcheck?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.grpcHealthcheck = this._grpcHealthcheck?.internalValue;
        }
        if (this._httpHealthcheck?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpHealthcheck = this._httpHealthcheck?.internalValue;
        }
        if (this._streamHealthcheck?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.streamHealthcheck = this._streamHealthcheck?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._healthcheckPort = undefined;
            this._healthyThreshold = undefined;
            this._intervalJitterPercent = undefined;
            this._unhealthyThreshold = undefined;
            this._grpcHealthcheck.internalValue = undefined;
            this._httpHealthcheck.internalValue = undefined;
            this._streamHealthcheck.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._healthcheckPort = value.healthcheckPort;
            this._healthyThreshold = value.healthyThreshold;
            this._intervalJitterPercent = value.intervalJitterPercent;
            this._unhealthyThreshold = value.unhealthyThreshold;
            this._grpcHealthcheck.internalValue = value.grpcHealthcheck;
            this._httpHealthcheck.internalValue = value.httpHealthcheck;
            this._streamHealthcheck.internalValue = value.streamHealthcheck;
        }
    }
    get healthcheckPort() {
        return this.getNumberAttribute('healthcheck_port');
    }
    set healthcheckPort(value) {
        this._healthcheckPort = value;
    }
    resetHealthcheckPort() {
        this._healthcheckPort = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get healthcheckPortInput() {
        return this._healthcheckPort;
    }
    get healthyThreshold() {
        return this.getNumberAttribute('healthy_threshold');
    }
    set healthyThreshold(value) {
        this._healthyThreshold = value;
    }
    resetHealthyThreshold() {
        this._healthyThreshold = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get healthyThresholdInput() {
        return this._healthyThreshold;
    }
    // interval - computed: true, optional: false, required: false
    get interval() {
        return this.getStringAttribute('interval');
    }
    get intervalJitterPercent() {
        return this.getNumberAttribute('interval_jitter_percent');
    }
    set intervalJitterPercent(value) {
        this._intervalJitterPercent = value;
    }
    resetIntervalJitterPercent() {
        this._intervalJitterPercent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get intervalJitterPercentInput() {
        return this._intervalJitterPercent;
    }
    // timeout - computed: true, optional: false, required: false
    get timeout() {
        return this.getStringAttribute('timeout');
    }
    get unhealthyThreshold() {
        return this.getNumberAttribute('unhealthy_threshold');
    }
    set unhealthyThreshold(value) {
        this._unhealthyThreshold = value;
    }
    resetUnhealthyThreshold() {
        this._unhealthyThreshold = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get unhealthyThresholdInput() {
        return this._unhealthyThreshold;
    }
    get grpcHealthcheck() {
        return this._grpcHealthcheck;
    }
    putGrpcHealthcheck(value) {
        this._grpcHealthcheck.internalValue = value;
    }
    resetGrpcHealthcheck() {
        this._grpcHealthcheck.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get grpcHealthcheckInput() {
        return this._grpcHealthcheck.internalValue;
    }
    get httpHealthcheck() {
        return this._httpHealthcheck;
    }
    putHttpHealthcheck(value) {
        this._httpHealthcheck.internalValue = value;
    }
    resetHttpHealthcheck() {
        this._httpHealthcheck.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpHealthcheckInput() {
        return this._httpHealthcheck.internalValue;
    }
    get streamHealthcheck() {
        return this._streamHealthcheck;
    }
    putStreamHealthcheck(value) {
        this._streamHealthcheck.internalValue = value;
    }
    resetStreamHealthcheck() {
        this._streamHealthcheck.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get streamHealthcheckInput() {
        return this._streamHealthcheck.internalValue;
    }
}
exports.DataYandexAlbBackendGroupHttpBackendHealthcheckOutputReference = DataYandexAlbBackendGroupHttpBackendHealthcheckOutputReference;
_o = JSII_RTTI_SYMBOL_1;
DataYandexAlbBackendGroupHttpBackendHealthcheckOutputReference[_o] = { fqn: "@cdktf/provider-yandex.DataYandexAlbBackendGroupHttpBackendHealthcheckOutputReference", version: "2.0.32" };
function dataYandexAlbBackendGroupHttpBackendLoadBalancingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        locality_aware_routing_percent: cdktf.numberToTerraform(struct.localityAwareRoutingPercent),
        mode: cdktf.stringToTerraform(struct.mode),
        panic_threshold: cdktf.numberToTerraform(struct.panicThreshold),
        strict_locality: cdktf.booleanToTerraform(struct.strictLocality),
    };
}
exports.dataYandexAlbBackendGroupHttpBackendLoadBalancingConfigToTerraform = dataYandexAlbBackendGroupHttpBackendLoadBalancingConfigToTerraform;
class DataYandexAlbBackendGroupHttpBackendLoadBalancingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._localityAwareRoutingPercent !== undefined) {
            hasAnyValues = true;
            internalValueResult.localityAwareRoutingPercent = this._localityAwareRoutingPercent;
        }
        if (this._mode !== undefined) {
            hasAnyValues = true;
            internalValueResult.mode = this._mode;
        }
        if (this._panicThreshold !== undefined) {
            hasAnyValues = true;
            internalValueResult.panicThreshold = this._panicThreshold;
        }
        if (this._strictLocality !== undefined) {
            hasAnyValues = true;
            internalValueResult.strictLocality = this._strictLocality;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._localityAwareRoutingPercent = undefined;
            this._mode = undefined;
            this._panicThreshold = undefined;
            this._strictLocality = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._localityAwareRoutingPercent = value.localityAwareRoutingPercent;
            this._mode = value.mode;
            this._panicThreshold = value.panicThreshold;
            this._strictLocality = value.strictLocality;
        }
    }
    get localityAwareRoutingPercent() {
        return this.getNumberAttribute('locality_aware_routing_percent');
    }
    set localityAwareRoutingPercent(value) {
        this._localityAwareRoutingPercent = value;
    }
    resetLocalityAwareRoutingPercent() {
        this._localityAwareRoutingPercent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localityAwareRoutingPercentInput() {
        return this._localityAwareRoutingPercent;
    }
    get mode() {
        return this.getStringAttribute('mode');
    }
    set mode(value) {
        this._mode = value;
    }
    resetMode() {
        this._mode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get modeInput() {
        return this._mode;
    }
    get panicThreshold() {
        return this.getNumberAttribute('panic_threshold');
    }
    set panicThreshold(value) {
        this._panicThreshold = value;
    }
    resetPanicThreshold() {
        this._panicThreshold = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get panicThresholdInput() {
        return this._panicThreshold;
    }
    get strictLocality() {
        return this.getBooleanAttribute('strict_locality');
    }
    set strictLocality(value) {
        this._strictLocality = value;
    }
    resetStrictLocality() {
        this._strictLocality = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get strictLocalityInput() {
        return this._strictLocality;
    }
}
exports.DataYandexAlbBackendGroupHttpBackendLoadBalancingConfigOutputReference = DataYandexAlbBackendGroupHttpBackendLoadBalancingConfigOutputReference;
_p = JSII_RTTI_SYMBOL_1;
DataYandexAlbBackendGroupHttpBackendLoadBalancingConfigOutputReference[_p] = { fqn: "@cdktf/provider-yandex.DataYandexAlbBackendGroupHttpBackendLoadBalancingConfigOutputReference", version: "2.0.32" };
function dataYandexAlbBackendGroupHttpBackendTlsValidationContextToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        trusted_ca_bytes: cdktf.stringToTerraform(struct.trustedCaBytes),
        trusted_ca_id: cdktf.stringToTerraform(struct.trustedCaId),
    };
}
exports.dataYandexAlbBackendGroupHttpBackendTlsValidationContextToTerraform = dataYandexAlbBackendGroupHttpBackendTlsValidationContextToTerraform;
class DataYandexAlbBackendGroupHttpBackendTlsValidationContextOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._trustedCaBytes !== undefined) {
            hasAnyValues = true;
            internalValueResult.trustedCaBytes = this._trustedCaBytes;
        }
        if (this._trustedCaId !== undefined) {
            hasAnyValues = true;
            internalValueResult.trustedCaId = this._trustedCaId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._trustedCaBytes = undefined;
            this._trustedCaId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._trustedCaBytes = value.trustedCaBytes;
            this._trustedCaId = value.trustedCaId;
        }
    }
    get trustedCaBytes() {
        return this.getStringAttribute('trusted_ca_bytes');
    }
    set trustedCaBytes(value) {
        this._trustedCaBytes = value;
    }
    resetTrustedCaBytes() {
        this._trustedCaBytes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get trustedCaBytesInput() {
        return this._trustedCaBytes;
    }
    get trustedCaId() {
        return this.getStringAttribute('trusted_ca_id');
    }
    set trustedCaId(value) {
        this._trustedCaId = value;
    }
    resetTrustedCaId() {
        this._trustedCaId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get trustedCaIdInput() {
        return this._trustedCaId;
    }
}
exports.DataYandexAlbBackendGroupHttpBackendTlsValidationContextOutputReference = DataYandexAlbBackendGroupHttpBackendTlsValidationContextOutputReference;
_q = JSII_RTTI_SYMBOL_1;
DataYandexAlbBackendGroupHttpBackendTlsValidationContextOutputReference[_q] = { fqn: "@cdktf/provider-yandex.DataYandexAlbBackendGroupHttpBackendTlsValidationContextOutputReference", version: "2.0.32" };
function dataYandexAlbBackendGroupHttpBackendTlsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        sni: cdktf.stringToTerraform(struct.sni),
        validation_context: dataYandexAlbBackendGroupHttpBackendTlsValidationContextToTerraform(struct.validationContext),
    };
}
exports.dataYandexAlbBackendGroupHttpBackendTlsToTerraform = dataYandexAlbBackendGroupHttpBackendTlsToTerraform;
class DataYandexAlbBackendGroupHttpBackendTlsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // validation_context - computed: false, optional: true, required: false
        this._validationContext = new DataYandexAlbBackendGroupHttpBackendTlsValidationContextOutputReference(this, "validation_context");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._sni !== undefined) {
            hasAnyValues = true;
            internalValueResult.sni = this._sni;
        }
        if (this._validationContext?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.validationContext = this._validationContext?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._sni = undefined;
            this._validationContext.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._sni = value.sni;
            this._validationContext.internalValue = value.validationContext;
        }
    }
    get sni() {
        return this.getStringAttribute('sni');
    }
    set sni(value) {
        this._sni = value;
    }
    resetSni() {
        this._sni = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sniInput() {
        return this._sni;
    }
    get validationContext() {
        return this._validationContext;
    }
    putValidationContext(value) {
        this._validationContext.internalValue = value;
    }
    resetValidationContext() {
        this._validationContext.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get validationContextInput() {
        return this._validationContext.internalValue;
    }
}
exports.DataYandexAlbBackendGroupHttpBackendTlsOutputReference = DataYandexAlbBackendGroupHttpBackendTlsOutputReference;
_r = JSII_RTTI_SYMBOL_1;
DataYandexAlbBackendGroupHttpBackendTlsOutputReference[_r] = { fqn: "@cdktf/provider-yandex.DataYandexAlbBackendGroupHttpBackendTlsOutputReference", version: "2.0.32" };
function dataYandexAlbBackendGroupHttpBackendToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        http2: cdktf.booleanToTerraform(struct.http2),
        port: cdktf.numberToTerraform(struct.port),
        storage_bucket: cdktf.stringToTerraform(struct.storageBucket),
        target_group_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.targetGroupIds),
        weight: cdktf.numberToTerraform(struct.weight),
        healthcheck: dataYandexAlbBackendGroupHttpBackendHealthcheckToTerraform(struct.healthcheck),
        load_balancing_config: dataYandexAlbBackendGroupHttpBackendLoadBalancingConfigToTerraform(struct.loadBalancingConfig),
        tls: dataYandexAlbBackendGroupHttpBackendTlsToTerraform(struct.tls),
    };
}
exports.dataYandexAlbBackendGroupHttpBackendToTerraform = dataYandexAlbBackendGroupHttpBackendToTerraform;
class DataYandexAlbBackendGroupHttpBackendOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // healthcheck - computed: false, optional: true, required: false
        this._healthcheck = new DataYandexAlbBackendGroupHttpBackendHealthcheckOutputReference(this, "healthcheck");
        // load_balancing_config - computed: false, optional: true, required: false
        this._loadBalancingConfig = new DataYandexAlbBackendGroupHttpBackendLoadBalancingConfigOutputReference(this, "load_balancing_config");
        // tls - computed: false, optional: true, required: false
        this._tls = new DataYandexAlbBackendGroupHttpBackendTlsOutputReference(this, "tls");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._http2 !== undefined) {
            hasAnyValues = true;
            internalValueResult.http2 = this._http2;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        if (this._storageBucket !== undefined) {
            hasAnyValues = true;
            internalValueResult.storageBucket = this._storageBucket;
        }
        if (this._targetGroupIds !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetGroupIds = this._targetGroupIds;
        }
        if (this._weight !== undefined) {
            hasAnyValues = true;
            internalValueResult.weight = this._weight;
        }
        if (this._healthcheck?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.healthcheck = this._healthcheck?.internalValue;
        }
        if (this._loadBalancingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.loadBalancingConfig = this._loadBalancingConfig?.internalValue;
        }
        if (this._tls?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tls = this._tls?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._http2 = undefined;
            this._port = undefined;
            this._storageBucket = undefined;
            this._targetGroupIds = undefined;
            this._weight = undefined;
            this._healthcheck.internalValue = undefined;
            this._loadBalancingConfig.internalValue = undefined;
            this._tls.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._http2 = value.http2;
            this._port = value.port;
            this._storageBucket = value.storageBucket;
            this._targetGroupIds = value.targetGroupIds;
            this._weight = value.weight;
            this._healthcheck.internalValue = value.healthcheck;
            this._loadBalancingConfig.internalValue = value.loadBalancingConfig;
            this._tls.internalValue = value.tls;
        }
    }
    get http2() {
        return this.getBooleanAttribute('http2');
    }
    set http2(value) {
        this._http2 = value;
    }
    resetHttp2() {
        this._http2 = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get http2Input() {
        return this._http2;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    resetPort() {
        this._port = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
    get storageBucket() {
        return this.getStringAttribute('storage_bucket');
    }
    set storageBucket(value) {
        this._storageBucket = value;
    }
    resetStorageBucket() {
        this._storageBucket = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storageBucketInput() {
        return this._storageBucket;
    }
    get targetGroupIds() {
        return this.getListAttribute('target_group_ids');
    }
    set targetGroupIds(value) {
        this._targetGroupIds = value;
    }
    resetTargetGroupIds() {
        this._targetGroupIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetGroupIdsInput() {
        return this._targetGroupIds;
    }
    get weight() {
        return this.getNumberAttribute('weight');
    }
    set weight(value) {
        this._weight = value;
    }
    resetWeight() {
        this._weight = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get weightInput() {
        return this._weight;
    }
    get healthcheck() {
        return this._healthcheck;
    }
    putHealthcheck(value) {
        this._healthcheck.internalValue = value;
    }
    resetHealthcheck() {
        this._healthcheck.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get healthcheckInput() {
        return this._healthcheck.internalValue;
    }
    get loadBalancingConfig() {
        return this._loadBalancingConfig;
    }
    putLoadBalancingConfig(value) {
        this._loadBalancingConfig.internalValue = value;
    }
    resetLoadBalancingConfig() {
        this._loadBalancingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loadBalancingConfigInput() {
        return this._loadBalancingConfig.internalValue;
    }
    get tls() {
        return this._tls;
    }
    putTls(value) {
        this._tls.internalValue = value;
    }
    resetTls() {
        this._tls.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tlsInput() {
        return this._tls.internalValue;
    }
}
exports.DataYandexAlbBackendGroupHttpBackendOutputReference = DataYandexAlbBackendGroupHttpBackendOutputReference;
_s = JSII_RTTI_SYMBOL_1;
DataYandexAlbBackendGroupHttpBackendOutputReference[_s] = { fqn: "@cdktf/provider-yandex.DataYandexAlbBackendGroupHttpBackendOutputReference", version: "2.0.32" };
class DataYandexAlbBackendGroupHttpBackendList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataYandexAlbBackendGroupHttpBackendOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataYandexAlbBackendGroupHttpBackendList = DataYandexAlbBackendGroupHttpBackendList;
_t = JSII_RTTI_SYMBOL_1;
DataYandexAlbBackendGroupHttpBackendList[_t] = { fqn: "@cdktf/provider-yandex.DataYandexAlbBackendGroupHttpBackendList", version: "2.0.32" };
function dataYandexAlbBackendGroupSessionAffinityConnectionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        source_ip: cdktf.booleanToTerraform(struct.sourceIp),
    };
}
exports.dataYandexAlbBackendGroupSessionAffinityConnectionToTerraform = dataYandexAlbBackendGroupSessionAffinityConnectionToTerraform;
class DataYandexAlbBackendGroupSessionAffinityConnectionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._sourceIp !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceIp = this._sourceIp;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._sourceIp = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._sourceIp = value.sourceIp;
        }
    }
    get sourceIp() {
        return this.getBooleanAttribute('source_ip');
    }
    set sourceIp(value) {
        this._sourceIp = value;
    }
    resetSourceIp() {
        this._sourceIp = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceIpInput() {
        return this._sourceIp;
    }
}
exports.DataYandexAlbBackendGroupSessionAffinityConnectionOutputReference = DataYandexAlbBackendGroupSessionAffinityConnectionOutputReference;
_u = JSII_RTTI_SYMBOL_1;
DataYandexAlbBackendGroupSessionAffinityConnectionOutputReference[_u] = { fqn: "@cdktf/provider-yandex.DataYandexAlbBackendGroupSessionAffinityConnectionOutputReference", version: "2.0.32" };
function dataYandexAlbBackendGroupSessionAffinityCookieToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ttl: cdktf.stringToTerraform(struct.ttl),
    };
}
exports.dataYandexAlbBackendGroupSessionAffinityCookieToTerraform = dataYandexAlbBackendGroupSessionAffinityCookieToTerraform;
class DataYandexAlbBackendGroupSessionAffinityCookieOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._ttl !== undefined) {
            hasAnyValues = true;
            internalValueResult.ttl = this._ttl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._ttl = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._ttl = value.ttl;
        }
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get ttl() {
        return this.getStringAttribute('ttl');
    }
    set ttl(value) {
        this._ttl = value;
    }
    resetTtl() {
        this._ttl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ttlInput() {
        return this._ttl;
    }
}
exports.DataYandexAlbBackendGroupSessionAffinityCookieOutputReference = DataYandexAlbBackendGroupSessionAffinityCookieOutputReference;
_v = JSII_RTTI_SYMBOL_1;
DataYandexAlbBackendGroupSessionAffinityCookieOutputReference[_v] = { fqn: "@cdktf/provider-yandex.DataYandexAlbBackendGroupSessionAffinityCookieOutputReference", version: "2.0.32" };
function dataYandexAlbBackendGroupSessionAffinityHeaderToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataYandexAlbBackendGroupSessionAffinityHeaderToTerraform = dataYandexAlbBackendGroupSessionAffinityHeaderToTerraform;
class DataYandexAlbBackendGroupSessionAffinityHeaderOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // header_name - computed: true, optional: false, required: false
    get headerName() {
        return this.getStringAttribute('header_name');
    }
}
exports.DataYandexAlbBackendGroupSessionAffinityHeaderOutputReference = DataYandexAlbBackendGroupSessionAffinityHeaderOutputReference;
_w = JSII_RTTI_SYMBOL_1;
DataYandexAlbBackendGroupSessionAffinityHeaderOutputReference[_w] = { fqn: "@cdktf/provider-yandex.DataYandexAlbBackendGroupSessionAffinityHeaderOutputReference", version: "2.0.32" };
function dataYandexAlbBackendGroupSessionAffinityToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        connection: dataYandexAlbBackendGroupSessionAffinityConnectionToTerraform(struct.connection),
        cookie: dataYandexAlbBackendGroupSessionAffinityCookieToTerraform(struct.cookie),
        header: dataYandexAlbBackendGroupSessionAffinityHeaderToTerraform(struct.header),
    };
}
exports.dataYandexAlbBackendGroupSessionAffinityToTerraform = dataYandexAlbBackendGroupSessionAffinityToTerraform;
class DataYandexAlbBackendGroupSessionAffinityOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // connection - computed: false, optional: true, required: false
        this._connection = new DataYandexAlbBackendGroupSessionAffinityConnectionOutputReference(this, "connection");
        // cookie - computed: false, optional: true, required: false
        this._cookie = new DataYandexAlbBackendGroupSessionAffinityCookieOutputReference(this, "cookie");
        // header - computed: false, optional: true, required: false
        this._header = new DataYandexAlbBackendGroupSessionAffinityHeaderOutputReference(this, "header");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._connection?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.connection = this._connection?.internalValue;
        }
        if (this._cookie?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cookie = this._cookie?.internalValue;
        }
        if (this._header?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.header = this._header?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._connection.internalValue = undefined;
            this._cookie.internalValue = undefined;
            this._header.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._connection.internalValue = value.connection;
            this._cookie.internalValue = value.cookie;
            this._header.internalValue = value.header;
        }
    }
    get connection() {
        return this._connection;
    }
    putConnection(value) {
        this._connection.internalValue = value;
    }
    resetConnection() {
        this._connection.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionInput() {
        return this._connection.internalValue;
    }
    get cookie() {
        return this._cookie;
    }
    putCookie(value) {
        this._cookie.internalValue = value;
    }
    resetCookie() {
        this._cookie.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cookieInput() {
        return this._cookie.internalValue;
    }
    get header() {
        return this._header;
    }
    putHeader(value) {
        this._header.internalValue = value;
    }
    resetHeader() {
        this._header.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get headerInput() {
        return this._header.internalValue;
    }
}
exports.DataYandexAlbBackendGroupSessionAffinityOutputReference = DataYandexAlbBackendGroupSessionAffinityOutputReference;
_x = JSII_RTTI_SYMBOL_1;
DataYandexAlbBackendGroupSessionAffinityOutputReference[_x] = { fqn: "@cdktf/provider-yandex.DataYandexAlbBackendGroupSessionAffinityOutputReference", version: "2.0.32" };
function dataYandexAlbBackendGroupStreamBackendHealthcheckGrpcHealthcheckToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        service_name: cdktf.stringToTerraform(struct.serviceName),
    };
}
exports.dataYandexAlbBackendGroupStreamBackendHealthcheckGrpcHealthcheckToTerraform = dataYandexAlbBackendGroupStreamBackendHealthcheckGrpcHealthcheckToTerraform;
class DataYandexAlbBackendGroupStreamBackendHealthcheckGrpcHealthcheckOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._serviceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceName = this._serviceName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._serviceName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._serviceName = value.serviceName;
        }
    }
    get serviceName() {
        return this.getStringAttribute('service_name');
    }
    set serviceName(value) {
        this._serviceName = value;
    }
    resetServiceName() {
        this._serviceName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceNameInput() {
        return this._serviceName;
    }
}
exports.DataYandexAlbBackendGroupStreamBackendHealthcheckGrpcHealthcheckOutputReference = DataYandexAlbBackendGroupStreamBackendHealthcheckGrpcHealthcheckOutputReference;
_y = JSII_RTTI_SYMBOL_1;
DataYandexAlbBackendGroupStreamBackendHealthcheckGrpcHealthcheckOutputReference[_y] = { fqn: "@cdktf/provider-yandex.DataYandexAlbBackendGroupStreamBackendHealthcheckGrpcHealthcheckOutputReference", version: "2.0.32" };
function dataYandexAlbBackendGroupStreamBackendHealthcheckHttpHealthcheckToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        host: cdktf.stringToTerraform(struct.host),
        http2: cdktf.booleanToTerraform(struct.http2),
    };
}
exports.dataYandexAlbBackendGroupStreamBackendHealthcheckHttpHealthcheckToTerraform = dataYandexAlbBackendGroupStreamBackendHealthcheckHttpHealthcheckToTerraform;
class DataYandexAlbBackendGroupStreamBackendHealthcheckHttpHealthcheckOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._host !== undefined) {
            hasAnyValues = true;
            internalValueResult.host = this._host;
        }
        if (this._http2 !== undefined) {
            hasAnyValues = true;
            internalValueResult.http2 = this._http2;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._host = undefined;
            this._http2 = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._host = value.host;
            this._http2 = value.http2;
        }
    }
    get host() {
        return this.getStringAttribute('host');
    }
    set host(value) {
        this._host = value;
    }
    resetHost() {
        this._host = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostInput() {
        return this._host;
    }
    get http2() {
        return this.getBooleanAttribute('http2');
    }
    set http2(value) {
        this._http2 = value;
    }
    resetHttp2() {
        this._http2 = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get http2Input() {
        return this._http2;
    }
    // path - computed: true, optional: false, required: false
    get path() {
        return this.getStringAttribute('path');
    }
}
exports.DataYandexAlbBackendGroupStreamBackendHealthcheckHttpHealthcheckOutputReference = DataYandexAlbBackendGroupStreamBackendHealthcheckHttpHealthcheckOutputReference;
_z = JSII_RTTI_SYMBOL_1;
DataYandexAlbBackendGroupStreamBackendHealthcheckHttpHealthcheckOutputReference[_z] = { fqn: "@cdktf/provider-yandex.DataYandexAlbBackendGroupStreamBackendHealthcheckHttpHealthcheckOutputReference", version: "2.0.32" };
function dataYandexAlbBackendGroupStreamBackendHealthcheckStreamHealthcheckToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        receive: cdktf.stringToTerraform(struct.receive),
        send: cdktf.stringToTerraform(struct.send),
    };
}
exports.dataYandexAlbBackendGroupStreamBackendHealthcheckStreamHealthcheckToTerraform = dataYandexAlbBackendGroupStreamBackendHealthcheckStreamHealthcheckToTerraform;
class DataYandexAlbBackendGroupStreamBackendHealthcheckStreamHealthcheckOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._receive !== undefined) {
            hasAnyValues = true;
            internalValueResult.receive = this._receive;
        }
        if (this._send !== undefined) {
            hasAnyValues = true;
            internalValueResult.send = this._send;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._receive = undefined;
            this._send = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._receive = value.receive;
            this._send = value.send;
        }
    }
    get receive() {
        return this.getStringAttribute('receive');
    }
    set receive(value) {
        this._receive = value;
    }
    resetReceive() {
        this._receive = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get receiveInput() {
        return this._receive;
    }
    get send() {
        return this.getStringAttribute('send');
    }
    set send(value) {
        this._send = value;
    }
    resetSend() {
        this._send = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sendInput() {
        return this._send;
    }
}
exports.DataYandexAlbBackendGroupStreamBackendHealthcheckStreamHealthcheckOutputReference = DataYandexAlbBackendGroupStreamBackendHealthcheckStreamHealthcheckOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
DataYandexAlbBackendGroupStreamBackendHealthcheckStreamHealthcheckOutputReference[_0] = { fqn: "@cdktf/provider-yandex.DataYandexAlbBackendGroupStreamBackendHealthcheckStreamHealthcheckOutputReference", version: "2.0.32" };
function dataYandexAlbBackendGroupStreamBackendHealthcheckToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        healthcheck_port: cdktf.numberToTerraform(struct.healthcheckPort),
        healthy_threshold: cdktf.numberToTerraform(struct.healthyThreshold),
        interval_jitter_percent: cdktf.numberToTerraform(struct.intervalJitterPercent),
        unhealthy_threshold: cdktf.numberToTerraform(struct.unhealthyThreshold),
        grpc_healthcheck: dataYandexAlbBackendGroupStreamBackendHealthcheckGrpcHealthcheckToTerraform(struct.grpcHealthcheck),
        http_healthcheck: dataYandexAlbBackendGroupStreamBackendHealthcheckHttpHealthcheckToTerraform(struct.httpHealthcheck),
        stream_healthcheck: dataYandexAlbBackendGroupStreamBackendHealthcheckStreamHealthcheckToTerraform(struct.streamHealthcheck),
    };
}
exports.dataYandexAlbBackendGroupStreamBackendHealthcheckToTerraform = dataYandexAlbBackendGroupStreamBackendHealthcheckToTerraform;
class DataYandexAlbBackendGroupStreamBackendHealthcheckOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // grpc_healthcheck - computed: false, optional: true, required: false
        this._grpcHealthcheck = new DataYandexAlbBackendGroupStreamBackendHealthcheckGrpcHealthcheckOutputReference(this, "grpc_healthcheck");
        // http_healthcheck - computed: false, optional: true, required: false
        this._httpHealthcheck = new DataYandexAlbBackendGroupStreamBackendHealthcheckHttpHealthcheckOutputReference(this, "http_healthcheck");
        // stream_healthcheck - computed: false, optional: true, required: false
        this._streamHealthcheck = new DataYandexAlbBackendGroupStreamBackendHealthcheckStreamHealthcheckOutputReference(this, "stream_healthcheck");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._healthcheckPort !== undefined) {
            hasAnyValues = true;
            internalValueResult.healthcheckPort = this._healthcheckPort;
        }
        if (this._healthyThreshold !== undefined) {
            hasAnyValues = true;
            internalValueResult.healthyThreshold = this._healthyThreshold;
        }
        if (this._intervalJitterPercent !== undefined) {
            hasAnyValues = true;
            internalValueResult.intervalJitterPercent = this._intervalJitterPercent;
        }
        if (this._unhealthyThreshold !== undefined) {
            hasAnyValues = true;
            internalValueResult.unhealthyThreshold = this._unhealthyThreshold;
        }
        if (this._grpcHealthcheck?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.grpcHealthcheck = this._grpcHealthcheck?.internalValue;
        }
        if (this._httpHealthcheck?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpHealthcheck = this._httpHealthcheck?.internalValue;
        }
        if (this._streamHealthcheck?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.streamHealthcheck = this._streamHealthcheck?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._healthcheckPort = undefined;
            this._healthyThreshold = undefined;
            this._intervalJitterPercent = undefined;
            this._unhealthyThreshold = undefined;
            this._grpcHealthcheck.internalValue = undefined;
            this._httpHealthcheck.internalValue = undefined;
            this._streamHealthcheck.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._healthcheckPort = value.healthcheckPort;
            this._healthyThreshold = value.healthyThreshold;
            this._intervalJitterPercent = value.intervalJitterPercent;
            this._unhealthyThreshold = value.unhealthyThreshold;
            this._grpcHealthcheck.internalValue = value.grpcHealthcheck;
            this._httpHealthcheck.internalValue = value.httpHealthcheck;
            this._streamHealthcheck.internalValue = value.streamHealthcheck;
        }
    }
    get healthcheckPort() {
        return this.getNumberAttribute('healthcheck_port');
    }
    set healthcheckPort(value) {
        this._healthcheckPort = value;
    }
    resetHealthcheckPort() {
        this._healthcheckPort = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get healthcheckPortInput() {
        return this._healthcheckPort;
    }
    get healthyThreshold() {
        return this.getNumberAttribute('healthy_threshold');
    }
    set healthyThreshold(value) {
        this._healthyThreshold = value;
    }
    resetHealthyThreshold() {
        this._healthyThreshold = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get healthyThresholdInput() {
        return this._healthyThreshold;
    }
    // interval - computed: true, optional: false, required: false
    get interval() {
        return this.getStringAttribute('interval');
    }
    get intervalJitterPercent() {
        return this.getNumberAttribute('interval_jitter_percent');
    }
    set intervalJitterPercent(value) {
        this._intervalJitterPercent = value;
    }
    resetIntervalJitterPercent() {
        this._intervalJitterPercent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get intervalJitterPercentInput() {
        return this._intervalJitterPercent;
    }
    // timeout - computed: true, optional: false, required: false
    get timeout() {
        return this.getStringAttribute('timeout');
    }
    get unhealthyThreshold() {
        return this.getNumberAttribute('unhealthy_threshold');
    }
    set unhealthyThreshold(value) {
        this._unhealthyThreshold = value;
    }
    resetUnhealthyThreshold() {
        this._unhealthyThreshold = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get unhealthyThresholdInput() {
        return this._unhealthyThreshold;
    }
    get grpcHealthcheck() {
        return this._grpcHealthcheck;
    }
    putGrpcHealthcheck(value) {
        this._grpcHealthcheck.internalValue = value;
    }
    resetGrpcHealthcheck() {
        this._grpcHealthcheck.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get grpcHealthcheckInput() {
        return this._grpcHealthcheck.internalValue;
    }
    get httpHealthcheck() {
        return this._httpHealthcheck;
    }
    putHttpHealthcheck(value) {
        this._httpHealthcheck.internalValue = value;
    }
    resetHttpHealthcheck() {
        this._httpHealthcheck.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpHealthcheckInput() {
        return this._httpHealthcheck.internalValue;
    }
    get streamHealthcheck() {
        return this._streamHealthcheck;
    }
    putStreamHealthcheck(value) {
        this._streamHealthcheck.internalValue = value;
    }
    resetStreamHealthcheck() {
        this._streamHealthcheck.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get streamHealthcheckInput() {
        return this._streamHealthcheck.internalValue;
    }
}
exports.DataYandexAlbBackendGroupStreamBackendHealthcheckOutputReference = DataYandexAlbBackendGroupStreamBackendHealthcheckOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
DataYandexAlbBackendGroupStreamBackendHealthcheckOutputReference[_1] = { fqn: "@cdktf/provider-yandex.DataYandexAlbBackendGroupStreamBackendHealthcheckOutputReference", version: "2.0.32" };
function dataYandexAlbBackendGroupStreamBackendLoadBalancingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        locality_aware_routing_percent: cdktf.numberToTerraform(struct.localityAwareRoutingPercent),
        mode: cdktf.stringToTerraform(struct.mode),
        panic_threshold: cdktf.numberToTerraform(struct.panicThreshold),
        strict_locality: cdktf.booleanToTerraform(struct.strictLocality),
    };
}
exports.dataYandexAlbBackendGroupStreamBackendLoadBalancingConfigToTerraform = dataYandexAlbBackendGroupStreamBackendLoadBalancingConfigToTerraform;
class DataYandexAlbBackendGroupStreamBackendLoadBalancingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._localityAwareRoutingPercent !== undefined) {
            hasAnyValues = true;
            internalValueResult.localityAwareRoutingPercent = this._localityAwareRoutingPercent;
        }
        if (this._mode !== undefined) {
            hasAnyValues = true;
            internalValueResult.mode = this._mode;
        }
        if (this._panicThreshold !== undefined) {
            hasAnyValues = true;
            internalValueResult.panicThreshold = this._panicThreshold;
        }
        if (this._strictLocality !== undefined) {
            hasAnyValues = true;
            internalValueResult.strictLocality = this._strictLocality;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._localityAwareRoutingPercent = undefined;
            this._mode = undefined;
            this._panicThreshold = undefined;
            this._strictLocality = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._localityAwareRoutingPercent = value.localityAwareRoutingPercent;
            this._mode = value.mode;
            this._panicThreshold = value.panicThreshold;
            this._strictLocality = value.strictLocality;
        }
    }
    get localityAwareRoutingPercent() {
        return this.getNumberAttribute('locality_aware_routing_percent');
    }
    set localityAwareRoutingPercent(value) {
        this._localityAwareRoutingPercent = value;
    }
    resetLocalityAwareRoutingPercent() {
        this._localityAwareRoutingPercent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localityAwareRoutingPercentInput() {
        return this._localityAwareRoutingPercent;
    }
    get mode() {
        return this.getStringAttribute('mode');
    }
    set mode(value) {
        this._mode = value;
    }
    resetMode() {
        this._mode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get modeInput() {
        return this._mode;
    }
    get panicThreshold() {
        return this.getNumberAttribute('panic_threshold');
    }
    set panicThreshold(value) {
        this._panicThreshold = value;
    }
    resetPanicThreshold() {
        this._panicThreshold = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get panicThresholdInput() {
        return this._panicThreshold;
    }
    get strictLocality() {
        return this.getBooleanAttribute('strict_locality');
    }
    set strictLocality(value) {
        this._strictLocality = value;
    }
    resetStrictLocality() {
        this._strictLocality = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get strictLocalityInput() {
        return this._strictLocality;
    }
}
exports.DataYandexAlbBackendGroupStreamBackendLoadBalancingConfigOutputReference = DataYandexAlbBackendGroupStreamBackendLoadBalancingConfigOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
DataYandexAlbBackendGroupStreamBackendLoadBalancingConfigOutputReference[_2] = { fqn: "@cdktf/provider-yandex.DataYandexAlbBackendGroupStreamBackendLoadBalancingConfigOutputReference", version: "2.0.32" };
function dataYandexAlbBackendGroupStreamBackendTlsValidationContextToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        trusted_ca_bytes: cdktf.stringToTerraform(struct.trustedCaBytes),
        trusted_ca_id: cdktf.stringToTerraform(struct.trustedCaId),
    };
}
exports.dataYandexAlbBackendGroupStreamBackendTlsValidationContextToTerraform = dataYandexAlbBackendGroupStreamBackendTlsValidationContextToTerraform;
class DataYandexAlbBackendGroupStreamBackendTlsValidationContextOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._trustedCaBytes !== undefined) {
            hasAnyValues = true;
            internalValueResult.trustedCaBytes = this._trustedCaBytes;
        }
        if (this._trustedCaId !== undefined) {
            hasAnyValues = true;
            internalValueResult.trustedCaId = this._trustedCaId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._trustedCaBytes = undefined;
            this._trustedCaId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._trustedCaBytes = value.trustedCaBytes;
            this._trustedCaId = value.trustedCaId;
        }
    }
    get trustedCaBytes() {
        return this.getStringAttribute('trusted_ca_bytes');
    }
    set trustedCaBytes(value) {
        this._trustedCaBytes = value;
    }
    resetTrustedCaBytes() {
        this._trustedCaBytes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get trustedCaBytesInput() {
        return this._trustedCaBytes;
    }
    get trustedCaId() {
        return this.getStringAttribute('trusted_ca_id');
    }
    set trustedCaId(value) {
        this._trustedCaId = value;
    }
    resetTrustedCaId() {
        this._trustedCaId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get trustedCaIdInput() {
        return this._trustedCaId;
    }
}
exports.DataYandexAlbBackendGroupStreamBackendTlsValidationContextOutputReference = DataYandexAlbBackendGroupStreamBackendTlsValidationContextOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
DataYandexAlbBackendGroupStreamBackendTlsValidationContextOutputReference[_3] = { fqn: "@cdktf/provider-yandex.DataYandexAlbBackendGroupStreamBackendTlsValidationContextOutputReference", version: "2.0.32" };
function dataYandexAlbBackendGroupStreamBackendTlsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        sni: cdktf.stringToTerraform(struct.sni),
        validation_context: dataYandexAlbBackendGroupStreamBackendTlsValidationContextToTerraform(struct.validationContext),
    };
}
exports.dataYandexAlbBackendGroupStreamBackendTlsToTerraform = dataYandexAlbBackendGroupStreamBackendTlsToTerraform;
class DataYandexAlbBackendGroupStreamBackendTlsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // validation_context - computed: false, optional: true, required: false
        this._validationContext = new DataYandexAlbBackendGroupStreamBackendTlsValidationContextOutputReference(this, "validation_context");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._sni !== undefined) {
            hasAnyValues = true;
            internalValueResult.sni = this._sni;
        }
        if (this._validationContext?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.validationContext = this._validationContext?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._sni = undefined;
            this._validationContext.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._sni = value.sni;
            this._validationContext.internalValue = value.validationContext;
        }
    }
    get sni() {
        return this.getStringAttribute('sni');
    }
    set sni(value) {
        this._sni = value;
    }
    resetSni() {
        this._sni = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sniInput() {
        return this._sni;
    }
    get validationContext() {
        return this._validationContext;
    }
    putValidationContext(value) {
        this._validationContext.internalValue = value;
    }
    resetValidationContext() {
        this._validationContext.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get validationContextInput() {
        return this._validationContext.internalValue;
    }
}
exports.DataYandexAlbBackendGroupStreamBackendTlsOutputReference = DataYandexAlbBackendGroupStreamBackendTlsOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
DataYandexAlbBackendGroupStreamBackendTlsOutputReference[_4] = { fqn: "@cdktf/provider-yandex.DataYandexAlbBackendGroupStreamBackendTlsOutputReference", version: "2.0.32" };
function dataYandexAlbBackendGroupStreamBackendToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_proxy_protocol: cdktf.booleanToTerraform(struct.enableProxyProtocol),
        port: cdktf.numberToTerraform(struct.port),
        weight: cdktf.numberToTerraform(struct.weight),
        healthcheck: dataYandexAlbBackendGroupStreamBackendHealthcheckToTerraform(struct.healthcheck),
        load_balancing_config: dataYandexAlbBackendGroupStreamBackendLoadBalancingConfigToTerraform(struct.loadBalancingConfig),
        tls: dataYandexAlbBackendGroupStreamBackendTlsToTerraform(struct.tls),
    };
}
exports.dataYandexAlbBackendGroupStreamBackendToTerraform = dataYandexAlbBackendGroupStreamBackendToTerraform;
class DataYandexAlbBackendGroupStreamBackendOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // healthcheck - computed: false, optional: true, required: false
        this._healthcheck = new DataYandexAlbBackendGroupStreamBackendHealthcheckOutputReference(this, "healthcheck");
        // load_balancing_config - computed: false, optional: true, required: false
        this._loadBalancingConfig = new DataYandexAlbBackendGroupStreamBackendLoadBalancingConfigOutputReference(this, "load_balancing_config");
        // tls - computed: false, optional: true, required: false
        this._tls = new DataYandexAlbBackendGroupStreamBackendTlsOutputReference(this, "tls");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enableProxyProtocol !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableProxyProtocol = this._enableProxyProtocol;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        if (this._weight !== undefined) {
            hasAnyValues = true;
            internalValueResult.weight = this._weight;
        }
        if (this._healthcheck?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.healthcheck = this._healthcheck?.internalValue;
        }
        if (this._loadBalancingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.loadBalancingConfig = this._loadBalancingConfig?.internalValue;
        }
        if (this._tls?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tls = this._tls?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._enableProxyProtocol = undefined;
            this._port = undefined;
            this._weight = undefined;
            this._healthcheck.internalValue = undefined;
            this._loadBalancingConfig.internalValue = undefined;
            this._tls.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._enableProxyProtocol = value.enableProxyProtocol;
            this._port = value.port;
            this._weight = value.weight;
            this._healthcheck.internalValue = value.healthcheck;
            this._loadBalancingConfig.internalValue = value.loadBalancingConfig;
            this._tls.internalValue = value.tls;
        }
    }
    get enableProxyProtocol() {
        return this.getBooleanAttribute('enable_proxy_protocol');
    }
    set enableProxyProtocol(value) {
        this._enableProxyProtocol = value;
    }
    resetEnableProxyProtocol() {
        this._enableProxyProtocol = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableProxyProtocolInput() {
        return this._enableProxyProtocol;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    resetPort() {
        this._port = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
    // target_group_ids - computed: true, optional: false, required: false
    get targetGroupIds() {
        return this.getListAttribute('target_group_ids');
    }
    get weight() {
        return this.getNumberAttribute('weight');
    }
    set weight(value) {
        this._weight = value;
    }
    resetWeight() {
        this._weight = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get weightInput() {
        return this._weight;
    }
    get healthcheck() {
        return this._healthcheck;
    }
    putHealthcheck(value) {
        this._healthcheck.internalValue = value;
    }
    resetHealthcheck() {
        this._healthcheck.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get healthcheckInput() {
        return this._healthcheck.internalValue;
    }
    get loadBalancingConfig() {
        return this._loadBalancingConfig;
    }
    putLoadBalancingConfig(value) {
        this._loadBalancingConfig.internalValue = value;
    }
    resetLoadBalancingConfig() {
        this._loadBalancingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loadBalancingConfigInput() {
        return this._loadBalancingConfig.internalValue;
    }
    get tls() {
        return this._tls;
    }
    putTls(value) {
        this._tls.internalValue = value;
    }
    resetTls() {
        this._tls.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tlsInput() {
        return this._tls.internalValue;
    }
}
exports.DataYandexAlbBackendGroupStreamBackendOutputReference = DataYandexAlbBackendGroupStreamBackendOutputReference;
_5 = JSII_RTTI_SYMBOL_1;
DataYandexAlbBackendGroupStreamBackendOutputReference[_5] = { fqn: "@cdktf/provider-yandex.DataYandexAlbBackendGroupStreamBackendOutputReference", version: "2.0.32" };
class DataYandexAlbBackendGroupStreamBackendList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataYandexAlbBackendGroupStreamBackendOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataYandexAlbBackendGroupStreamBackendList = DataYandexAlbBackendGroupStreamBackendList;
_6 = JSII_RTTI_SYMBOL_1;
DataYandexAlbBackendGroupStreamBackendList[_6] = { fqn: "@cdktf/provider-yandex.DataYandexAlbBackendGroupStreamBackendList", version: "2.0.32" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/yandex/d/alb_backend_group yandex_alb_backend_group}
*/
class DataYandexAlbBackendGroup extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/yandex/d/alb_backend_group yandex_alb_backend_group} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataYandexAlbBackendGroupConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'yandex_alb_backend_group',
            terraformGeneratorMetadata: {
                providerName: 'yandex',
                providerVersion: '0.77.0',
                providerVersionConstraint: '~> 0.73'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // grpc_backend - computed: false, optional: true, required: false
        this._grpcBackend = new DataYandexAlbBackendGroupGrpcBackendList(this, "grpc_backend", false);
        // http_backend - computed: false, optional: true, required: false
        this._httpBackend = new DataYandexAlbBackendGroupHttpBackendList(this, "http_backend", false);
        // session_affinity - computed: false, optional: true, required: false
        this._sessionAffinity = new DataYandexAlbBackendGroupSessionAffinityOutputReference(this, "session_affinity");
        // stream_backend - computed: false, optional: true, required: false
        this._streamBackend = new DataYandexAlbBackendGroupStreamBackendList(this, "stream_backend", false);
        this._backendGroupId = config.backendGroupId;
        this._description = config.description;
        this._folderId = config.folderId;
        this._id = config.id;
        this._labels = config.labels;
        this._name = config.name;
        this._grpcBackend.internalValue = config.grpcBackend;
        this._httpBackend.internalValue = config.httpBackend;
        this._sessionAffinity.internalValue = config.sessionAffinity;
        this._streamBackend.internalValue = config.streamBackend;
    }
    get backendGroupId() {
        return this.getStringAttribute('backend_group_id');
    }
    set backendGroupId(value) {
        this._backendGroupId = value;
    }
    resetBackendGroupId() {
        this._backendGroupId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backendGroupIdInput() {
        return this._backendGroupId;
    }
    // created_at - computed: true, optional: false, required: false
    get createdAt() {
        return this.getStringAttribute('created_at');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get folderId() {
        return this.getStringAttribute('folder_id');
    }
    set folderId(value) {
        this._folderId = value;
    }
    resetFolderId() {
        this._folderId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get folderIdInput() {
        return this._folderId;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get grpcBackend() {
        return this._grpcBackend;
    }
    putGrpcBackend(value) {
        this._grpcBackend.internalValue = value;
    }
    resetGrpcBackend() {
        this._grpcBackend.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get grpcBackendInput() {
        return this._grpcBackend.internalValue;
    }
    get httpBackend() {
        return this._httpBackend;
    }
    putHttpBackend(value) {
        this._httpBackend.internalValue = value;
    }
    resetHttpBackend() {
        this._httpBackend.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpBackendInput() {
        return this._httpBackend.internalValue;
    }
    get sessionAffinity() {
        return this._sessionAffinity;
    }
    putSessionAffinity(value) {
        this._sessionAffinity.internalValue = value;
    }
    resetSessionAffinity() {
        this._sessionAffinity.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sessionAffinityInput() {
        return this._sessionAffinity.internalValue;
    }
    get streamBackend() {
        return this._streamBackend;
    }
    putStreamBackend(value) {
        this._streamBackend.internalValue = value;
    }
    resetStreamBackend() {
        this._streamBackend.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get streamBackendInput() {
        return this._streamBackend.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            backend_group_id: cdktf.stringToTerraform(this._backendGroupId),
            description: cdktf.stringToTerraform(this._description),
            folder_id: cdktf.stringToTerraform(this._folderId),
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            name: cdktf.stringToTerraform(this._name),
            grpc_backend: cdktf.listMapper(dataYandexAlbBackendGroupGrpcBackendToTerraform, true)(this._grpcBackend.internalValue),
            http_backend: cdktf.listMapper(dataYandexAlbBackendGroupHttpBackendToTerraform, true)(this._httpBackend.internalValue),
            session_affinity: dataYandexAlbBackendGroupSessionAffinityToTerraform(this._sessionAffinity.internalValue),
            stream_backend: cdktf.listMapper(dataYandexAlbBackendGroupStreamBackendToTerraform, true)(this._streamBackend.internalValue),
        };
    }
}
exports.DataYandexAlbBackendGroup = DataYandexAlbBackendGroup;
_7 = JSII_RTTI_SYMBOL_1;
DataYandexAlbBackendGroup[_7] = { fqn: "@cdktf/provider-yandex.DataYandexAlbBackendGroup", version: "2.0.32" };
// =================
// STATIC PROPERTIES
// =================
DataYandexAlbBackendGroup.tfResourceType = "yandex_alb_backend_group";
//# sourceMappingURL=data:application/json;base64,