"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MdbClickhouseCluster = exports.MdbClickhouseClusterZookeeperOutputReference = exports.mdbClickhouseClusterZookeeperToTerraform = exports.MdbClickhouseClusterZookeeperResourcesOutputReference = exports.mdbClickhouseClusterZookeeperResourcesToTerraform = exports.MdbClickhouseClusterUserList = exports.MdbClickhouseClusterUserOutputReference = exports.mdbClickhouseClusterUserToTerraform = exports.MdbClickhouseClusterUserSettingsOutputReference = exports.mdbClickhouseClusterUserSettingsToTerraform = exports.MdbClickhouseClusterUserQuotaList = exports.MdbClickhouseClusterUserQuotaOutputReference = exports.mdbClickhouseClusterUserQuotaToTerraform = exports.MdbClickhouseClusterUserPermissionList = exports.MdbClickhouseClusterUserPermissionOutputReference = exports.mdbClickhouseClusterUserPermissionToTerraform = exports.MdbClickhouseClusterTimeoutsOutputReference = exports.mdbClickhouseClusterTimeoutsToTerraform = exports.MdbClickhouseClusterShardGroupList = exports.MdbClickhouseClusterShardGroupOutputReference = exports.mdbClickhouseClusterShardGroupToTerraform = exports.MdbClickhouseClusterMlModelList = exports.MdbClickhouseClusterMlModelOutputReference = exports.mdbClickhouseClusterMlModelToTerraform = exports.MdbClickhouseClusterMaintenanceWindowOutputReference = exports.mdbClickhouseClusterMaintenanceWindowToTerraform = exports.MdbClickhouseClusterHostList = exports.MdbClickhouseClusterHostOutputReference = exports.mdbClickhouseClusterHostToTerraform = exports.MdbClickhouseClusterFormatSchemaList = exports.MdbClickhouseClusterFormatSchemaOutputReference = exports.mdbClickhouseClusterFormatSchemaToTerraform = exports.MdbClickhouseClusterDatabaseList = exports.MdbClickhouseClusterDatabaseOutputReference = exports.mdbClickhouseClusterDatabaseToTerraform = exports.MdbClickhouseClusterCloudStorageOutputReference = exports.mdbClickhouseClusterCloudStorageToTerraform = exports.MdbClickhouseClusterClickhouseOutputReference = exports.mdbClickhouseClusterClickhouseToTerraform = exports.MdbClickhouseClusterClickhouseResourcesOutputReference = exports.mdbClickhouseClusterClickhouseResourcesToTerraform = exports.MdbClickhouseClusterClickhouseConfigOutputReference = exports.mdbClickhouseClusterClickhouseConfigToTerraform = exports.MdbClickhouseClusterClickhouseConfigRabbitmqOutputReference = exports.mdbClickhouseClusterClickhouseConfigRabbitmqToTerraform = exports.MdbClickhouseClusterClickhouseConfigMergeTreeOutputReference = exports.mdbClickhouseClusterClickhouseConfigMergeTreeToTerraform = exports.MdbClickhouseClusterClickhouseConfigKafkaTopicList = exports.MdbClickhouseClusterClickhouseConfigKafkaTopicOutputReference = exports.mdbClickhouseClusterClickhouseConfigKafkaTopicToTerraform = exports.MdbClickhouseClusterClickhouseConfigKafkaTopicSettingsOutputReference = exports.mdbClickhouseClusterClickhouseConfigKafkaTopicSettingsToTerraform = exports.MdbClickhouseClusterClickhouseConfigKafkaOutputReference = exports.mdbClickhouseClusterClickhouseConfigKafkaToTerraform = exports.MdbClickhouseClusterClickhouseConfigGraphiteRollupList = exports.MdbClickhouseClusterClickhouseConfigGraphiteRollupOutputReference = exports.mdbClickhouseClusterClickhouseConfigGraphiteRollupToTerraform = exports.MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternList = exports.MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternOutputReference = exports.mdbClickhouseClusterClickhouseConfigGraphiteRollupPatternToTerraform = exports.MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetentionList = exports.MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetentionOutputReference = exports.mdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetentionToTerraform = exports.MdbClickhouseClusterClickhouseConfigCompressionList = exports.MdbClickhouseClusterClickhouseConfigCompressionOutputReference = exports.mdbClickhouseClusterClickhouseConfigCompressionToTerraform = exports.MdbClickhouseClusterBackupWindowStartOutputReference = exports.mdbClickhouseClusterBackupWindowStartToTerraform = exports.MdbClickhouseClusterAccessOutputReference = exports.mdbClickhouseClusterAccessToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function mdbClickhouseClusterAccessToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        data_lens: cdktf.booleanToTerraform(struct.dataLens),
        metrika: cdktf.booleanToTerraform(struct.metrika),
        serverless: cdktf.booleanToTerraform(struct.serverless),
        web_sql: cdktf.booleanToTerraform(struct.webSql),
    };
}
exports.mdbClickhouseClusterAccessToTerraform = mdbClickhouseClusterAccessToTerraform;
class MdbClickhouseClusterAccessOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dataLens !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataLens = this._dataLens;
        }
        if (this._metrika !== undefined) {
            hasAnyValues = true;
            internalValueResult.metrika = this._metrika;
        }
        if (this._serverless !== undefined) {
            hasAnyValues = true;
            internalValueResult.serverless = this._serverless;
        }
        if (this._webSql !== undefined) {
            hasAnyValues = true;
            internalValueResult.webSql = this._webSql;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dataLens = undefined;
            this._metrika = undefined;
            this._serverless = undefined;
            this._webSql = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dataLens = value.dataLens;
            this._metrika = value.metrika;
            this._serverless = value.serverless;
            this._webSql = value.webSql;
        }
    }
    get dataLens() {
        return this.getBooleanAttribute('data_lens');
    }
    set dataLens(value) {
        this._dataLens = value;
    }
    resetDataLens() {
        this._dataLens = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataLensInput() {
        return this._dataLens;
    }
    get metrika() {
        return this.getBooleanAttribute('metrika');
    }
    set metrika(value) {
        this._metrika = value;
    }
    resetMetrika() {
        this._metrika = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metrikaInput() {
        return this._metrika;
    }
    get serverless() {
        return this.getBooleanAttribute('serverless');
    }
    set serverless(value) {
        this._serverless = value;
    }
    resetServerless() {
        this._serverless = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serverlessInput() {
        return this._serverless;
    }
    get webSql() {
        return this.getBooleanAttribute('web_sql');
    }
    set webSql(value) {
        this._webSql = value;
    }
    resetWebSql() {
        this._webSql = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get webSqlInput() {
        return this._webSql;
    }
}
exports.MdbClickhouseClusterAccessOutputReference = MdbClickhouseClusterAccessOutputReference;
_a = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterAccessOutputReference[_a] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterAccessOutputReference", version: "2.0.32" };
function mdbClickhouseClusterBackupWindowStartToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        hours: cdktf.numberToTerraform(struct.hours),
        minutes: cdktf.numberToTerraform(struct.minutes),
    };
}
exports.mdbClickhouseClusterBackupWindowStartToTerraform = mdbClickhouseClusterBackupWindowStartToTerraform;
class MdbClickhouseClusterBackupWindowStartOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hours !== undefined) {
            hasAnyValues = true;
            internalValueResult.hours = this._hours;
        }
        if (this._minutes !== undefined) {
            hasAnyValues = true;
            internalValueResult.minutes = this._minutes;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hours = undefined;
            this._minutes = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hours = value.hours;
            this._minutes = value.minutes;
        }
    }
    get hours() {
        return this.getNumberAttribute('hours');
    }
    set hours(value) {
        this._hours = value;
    }
    resetHours() {
        this._hours = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hoursInput() {
        return this._hours;
    }
    get minutes() {
        return this.getNumberAttribute('minutes');
    }
    set minutes(value) {
        this._minutes = value;
    }
    resetMinutes() {
        this._minutes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minutesInput() {
        return this._minutes;
    }
}
exports.MdbClickhouseClusterBackupWindowStartOutputReference = MdbClickhouseClusterBackupWindowStartOutputReference;
_b = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterBackupWindowStartOutputReference[_b] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterBackupWindowStartOutputReference", version: "2.0.32" };
function mdbClickhouseClusterClickhouseConfigCompressionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        method: cdktf.stringToTerraform(struct.method),
        min_part_size: cdktf.numberToTerraform(struct.minPartSize),
        min_part_size_ratio: cdktf.numberToTerraform(struct.minPartSizeRatio),
    };
}
exports.mdbClickhouseClusterClickhouseConfigCompressionToTerraform = mdbClickhouseClusterClickhouseConfigCompressionToTerraform;
class MdbClickhouseClusterClickhouseConfigCompressionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._method !== undefined) {
            hasAnyValues = true;
            internalValueResult.method = this._method;
        }
        if (this._minPartSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.minPartSize = this._minPartSize;
        }
        if (this._minPartSizeRatio !== undefined) {
            hasAnyValues = true;
            internalValueResult.minPartSizeRatio = this._minPartSizeRatio;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._method = undefined;
            this._minPartSize = undefined;
            this._minPartSizeRatio = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._method = value.method;
            this._minPartSize = value.minPartSize;
            this._minPartSizeRatio = value.minPartSizeRatio;
        }
    }
    get method() {
        return this.getStringAttribute('method');
    }
    set method(value) {
        this._method = value;
    }
    // Temporarily expose input value. Use with caution.
    get methodInput() {
        return this._method;
    }
    get minPartSize() {
        return this.getNumberAttribute('min_part_size');
    }
    set minPartSize(value) {
        this._minPartSize = value;
    }
    // Temporarily expose input value. Use with caution.
    get minPartSizeInput() {
        return this._minPartSize;
    }
    get minPartSizeRatio() {
        return this.getNumberAttribute('min_part_size_ratio');
    }
    set minPartSizeRatio(value) {
        this._minPartSizeRatio = value;
    }
    // Temporarily expose input value. Use with caution.
    get minPartSizeRatioInput() {
        return this._minPartSizeRatio;
    }
}
exports.MdbClickhouseClusterClickhouseConfigCompressionOutputReference = MdbClickhouseClusterClickhouseConfigCompressionOutputReference;
_c = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterClickhouseConfigCompressionOutputReference[_c] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterClickhouseConfigCompressionOutputReference", version: "2.0.32" };
class MdbClickhouseClusterClickhouseConfigCompressionList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MdbClickhouseClusterClickhouseConfigCompressionOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MdbClickhouseClusterClickhouseConfigCompressionList = MdbClickhouseClusterClickhouseConfigCompressionList;
_d = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterClickhouseConfigCompressionList[_d] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterClickhouseConfigCompressionList", version: "2.0.32" };
function mdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetentionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        age: cdktf.numberToTerraform(struct.age),
        precision: cdktf.numberToTerraform(struct.precision),
    };
}
exports.mdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetentionToTerraform = mdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetentionToTerraform;
class MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetentionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._age !== undefined) {
            hasAnyValues = true;
            internalValueResult.age = this._age;
        }
        if (this._precision !== undefined) {
            hasAnyValues = true;
            internalValueResult.precision = this._precision;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._age = undefined;
            this._precision = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._age = value.age;
            this._precision = value.precision;
        }
    }
    get age() {
        return this.getNumberAttribute('age');
    }
    set age(value) {
        this._age = value;
    }
    // Temporarily expose input value. Use with caution.
    get ageInput() {
        return this._age;
    }
    get precision() {
        return this.getNumberAttribute('precision');
    }
    set precision(value) {
        this._precision = value;
    }
    // Temporarily expose input value. Use with caution.
    get precisionInput() {
        return this._precision;
    }
}
exports.MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetentionOutputReference = MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetentionOutputReference;
_e = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetentionOutputReference[_e] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetentionOutputReference", version: "2.0.32" };
class MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetentionList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetentionOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetentionList = MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetentionList;
_f = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetentionList[_f] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetentionList", version: "2.0.32" };
function mdbClickhouseClusterClickhouseConfigGraphiteRollupPatternToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        function: cdktf.stringToTerraform(struct.function),
        regexp: cdktf.stringToTerraform(struct.regexp),
        retention: cdktf.listMapper(mdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetentionToTerraform, true)(struct.retention),
    };
}
exports.mdbClickhouseClusterClickhouseConfigGraphiteRollupPatternToTerraform = mdbClickhouseClusterClickhouseConfigGraphiteRollupPatternToTerraform;
class MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // retention - computed: false, optional: true, required: false
        this._retention = new MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetentionList(this, "retention", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._function !== undefined) {
            hasAnyValues = true;
            internalValueResult.function = this._function;
        }
        if (this._regexp !== undefined) {
            hasAnyValues = true;
            internalValueResult.regexp = this._regexp;
        }
        if (this._retention?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.retention = this._retention?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._function = undefined;
            this._regexp = undefined;
            this._retention.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._function = value.function;
            this._regexp = value.regexp;
            this._retention.internalValue = value.retention;
        }
    }
    get function() {
        return this.getStringAttribute('function');
    }
    set function(value) {
        this._function = value;
    }
    // Temporarily expose input value. Use with caution.
    get functionInput() {
        return this._function;
    }
    get regexp() {
        return this.getStringAttribute('regexp');
    }
    set regexp(value) {
        this._regexp = value;
    }
    resetRegexp() {
        this._regexp = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regexpInput() {
        return this._regexp;
    }
    get retention() {
        return this._retention;
    }
    putRetention(value) {
        this._retention.internalValue = value;
    }
    resetRetention() {
        this._retention.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retentionInput() {
        return this._retention.internalValue;
    }
}
exports.MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternOutputReference = MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternOutputReference;
_g = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternOutputReference[_g] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternOutputReference", version: "2.0.32" };
class MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternList = MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternList;
_h = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternList[_h] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternList", version: "2.0.32" };
function mdbClickhouseClusterClickhouseConfigGraphiteRollupToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        pattern: cdktf.listMapper(mdbClickhouseClusterClickhouseConfigGraphiteRollupPatternToTerraform, true)(struct.pattern),
    };
}
exports.mdbClickhouseClusterClickhouseConfigGraphiteRollupToTerraform = mdbClickhouseClusterClickhouseConfigGraphiteRollupToTerraform;
class MdbClickhouseClusterClickhouseConfigGraphiteRollupOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // pattern - computed: false, optional: true, required: false
        this._pattern = new MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternList(this, "pattern", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._pattern?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.pattern = this._pattern?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._pattern.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._pattern.internalValue = value.pattern;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get pattern() {
        return this._pattern;
    }
    putPattern(value) {
        this._pattern.internalValue = value;
    }
    resetPattern() {
        this._pattern.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get patternInput() {
        return this._pattern.internalValue;
    }
}
exports.MdbClickhouseClusterClickhouseConfigGraphiteRollupOutputReference = MdbClickhouseClusterClickhouseConfigGraphiteRollupOutputReference;
_j = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterClickhouseConfigGraphiteRollupOutputReference[_j] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterClickhouseConfigGraphiteRollupOutputReference", version: "2.0.32" };
class MdbClickhouseClusterClickhouseConfigGraphiteRollupList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MdbClickhouseClusterClickhouseConfigGraphiteRollupOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MdbClickhouseClusterClickhouseConfigGraphiteRollupList = MdbClickhouseClusterClickhouseConfigGraphiteRollupList;
_k = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterClickhouseConfigGraphiteRollupList[_k] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterClickhouseConfigGraphiteRollupList", version: "2.0.32" };
function mdbClickhouseClusterClickhouseConfigKafkaToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        sasl_mechanism: cdktf.stringToTerraform(struct.saslMechanism),
        sasl_password: cdktf.stringToTerraform(struct.saslPassword),
        sasl_username: cdktf.stringToTerraform(struct.saslUsername),
        security_protocol: cdktf.stringToTerraform(struct.securityProtocol),
    };
}
exports.mdbClickhouseClusterClickhouseConfigKafkaToTerraform = mdbClickhouseClusterClickhouseConfigKafkaToTerraform;
class MdbClickhouseClusterClickhouseConfigKafkaOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._saslMechanism !== undefined) {
            hasAnyValues = true;
            internalValueResult.saslMechanism = this._saslMechanism;
        }
        if (this._saslPassword !== undefined) {
            hasAnyValues = true;
            internalValueResult.saslPassword = this._saslPassword;
        }
        if (this._saslUsername !== undefined) {
            hasAnyValues = true;
            internalValueResult.saslUsername = this._saslUsername;
        }
        if (this._securityProtocol !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityProtocol = this._securityProtocol;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._saslMechanism = undefined;
            this._saslPassword = undefined;
            this._saslUsername = undefined;
            this._securityProtocol = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._saslMechanism = value.saslMechanism;
            this._saslPassword = value.saslPassword;
            this._saslUsername = value.saslUsername;
            this._securityProtocol = value.securityProtocol;
        }
    }
    get saslMechanism() {
        return this.getStringAttribute('sasl_mechanism');
    }
    set saslMechanism(value) {
        this._saslMechanism = value;
    }
    resetSaslMechanism() {
        this._saslMechanism = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get saslMechanismInput() {
        return this._saslMechanism;
    }
    get saslPassword() {
        return this.getStringAttribute('sasl_password');
    }
    set saslPassword(value) {
        this._saslPassword = value;
    }
    resetSaslPassword() {
        this._saslPassword = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get saslPasswordInput() {
        return this._saslPassword;
    }
    get saslUsername() {
        return this.getStringAttribute('sasl_username');
    }
    set saslUsername(value) {
        this._saslUsername = value;
    }
    resetSaslUsername() {
        this._saslUsername = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get saslUsernameInput() {
        return this._saslUsername;
    }
    get securityProtocol() {
        return this.getStringAttribute('security_protocol');
    }
    set securityProtocol(value) {
        this._securityProtocol = value;
    }
    resetSecurityProtocol() {
        this._securityProtocol = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityProtocolInput() {
        return this._securityProtocol;
    }
}
exports.MdbClickhouseClusterClickhouseConfigKafkaOutputReference = MdbClickhouseClusterClickhouseConfigKafkaOutputReference;
_l = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterClickhouseConfigKafkaOutputReference[_l] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterClickhouseConfigKafkaOutputReference", version: "2.0.32" };
function mdbClickhouseClusterClickhouseConfigKafkaTopicSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        sasl_mechanism: cdktf.stringToTerraform(struct.saslMechanism),
        sasl_password: cdktf.stringToTerraform(struct.saslPassword),
        sasl_username: cdktf.stringToTerraform(struct.saslUsername),
        security_protocol: cdktf.stringToTerraform(struct.securityProtocol),
    };
}
exports.mdbClickhouseClusterClickhouseConfigKafkaTopicSettingsToTerraform = mdbClickhouseClusterClickhouseConfigKafkaTopicSettingsToTerraform;
class MdbClickhouseClusterClickhouseConfigKafkaTopicSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._saslMechanism !== undefined) {
            hasAnyValues = true;
            internalValueResult.saslMechanism = this._saslMechanism;
        }
        if (this._saslPassword !== undefined) {
            hasAnyValues = true;
            internalValueResult.saslPassword = this._saslPassword;
        }
        if (this._saslUsername !== undefined) {
            hasAnyValues = true;
            internalValueResult.saslUsername = this._saslUsername;
        }
        if (this._securityProtocol !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityProtocol = this._securityProtocol;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._saslMechanism = undefined;
            this._saslPassword = undefined;
            this._saslUsername = undefined;
            this._securityProtocol = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._saslMechanism = value.saslMechanism;
            this._saslPassword = value.saslPassword;
            this._saslUsername = value.saslUsername;
            this._securityProtocol = value.securityProtocol;
        }
    }
    get saslMechanism() {
        return this.getStringAttribute('sasl_mechanism');
    }
    set saslMechanism(value) {
        this._saslMechanism = value;
    }
    resetSaslMechanism() {
        this._saslMechanism = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get saslMechanismInput() {
        return this._saslMechanism;
    }
    get saslPassword() {
        return this.getStringAttribute('sasl_password');
    }
    set saslPassword(value) {
        this._saslPassword = value;
    }
    resetSaslPassword() {
        this._saslPassword = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get saslPasswordInput() {
        return this._saslPassword;
    }
    get saslUsername() {
        return this.getStringAttribute('sasl_username');
    }
    set saslUsername(value) {
        this._saslUsername = value;
    }
    resetSaslUsername() {
        this._saslUsername = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get saslUsernameInput() {
        return this._saslUsername;
    }
    get securityProtocol() {
        return this.getStringAttribute('security_protocol');
    }
    set securityProtocol(value) {
        this._securityProtocol = value;
    }
    resetSecurityProtocol() {
        this._securityProtocol = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityProtocolInput() {
        return this._securityProtocol;
    }
}
exports.MdbClickhouseClusterClickhouseConfigKafkaTopicSettingsOutputReference = MdbClickhouseClusterClickhouseConfigKafkaTopicSettingsOutputReference;
_m = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterClickhouseConfigKafkaTopicSettingsOutputReference[_m] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterClickhouseConfigKafkaTopicSettingsOutputReference", version: "2.0.32" };
function mdbClickhouseClusterClickhouseConfigKafkaTopicToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        settings: mdbClickhouseClusterClickhouseConfigKafkaTopicSettingsToTerraform(struct.settings),
    };
}
exports.mdbClickhouseClusterClickhouseConfigKafkaTopicToTerraform = mdbClickhouseClusterClickhouseConfigKafkaTopicToTerraform;
class MdbClickhouseClusterClickhouseConfigKafkaTopicOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // settings - computed: false, optional: true, required: false
        this._settings = new MdbClickhouseClusterClickhouseConfigKafkaTopicSettingsOutputReference(this, "settings");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._settings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.settings = this._settings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._settings.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._settings.internalValue = value.settings;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get settings() {
        return this._settings;
    }
    putSettings(value) {
        this._settings.internalValue = value;
    }
    resetSettings() {
        this._settings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get settingsInput() {
        return this._settings.internalValue;
    }
}
exports.MdbClickhouseClusterClickhouseConfigKafkaTopicOutputReference = MdbClickhouseClusterClickhouseConfigKafkaTopicOutputReference;
_o = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterClickhouseConfigKafkaTopicOutputReference[_o] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterClickhouseConfigKafkaTopicOutputReference", version: "2.0.32" };
class MdbClickhouseClusterClickhouseConfigKafkaTopicList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MdbClickhouseClusterClickhouseConfigKafkaTopicOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MdbClickhouseClusterClickhouseConfigKafkaTopicList = MdbClickhouseClusterClickhouseConfigKafkaTopicList;
_p = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterClickhouseConfigKafkaTopicList[_p] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterClickhouseConfigKafkaTopicList", version: "2.0.32" };
function mdbClickhouseClusterClickhouseConfigMergeTreeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_bytes_to_merge_at_min_space_in_pool: cdktf.numberToTerraform(struct.maxBytesToMergeAtMinSpaceInPool),
        max_replicated_merges_in_queue: cdktf.numberToTerraform(struct.maxReplicatedMergesInQueue),
        number_of_free_entries_in_pool_to_lower_max_size_of_merge: cdktf.numberToTerraform(struct.numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge),
        parts_to_delay_insert: cdktf.numberToTerraform(struct.partsToDelayInsert),
        parts_to_throw_insert: cdktf.numberToTerraform(struct.partsToThrowInsert),
        replicated_deduplication_window: cdktf.numberToTerraform(struct.replicatedDeduplicationWindow),
        replicated_deduplication_window_seconds: cdktf.numberToTerraform(struct.replicatedDeduplicationWindowSeconds),
    };
}
exports.mdbClickhouseClusterClickhouseConfigMergeTreeToTerraform = mdbClickhouseClusterClickhouseConfigMergeTreeToTerraform;
class MdbClickhouseClusterClickhouseConfigMergeTreeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxBytesToMergeAtMinSpaceInPool !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxBytesToMergeAtMinSpaceInPool = this._maxBytesToMergeAtMinSpaceInPool;
        }
        if (this._maxReplicatedMergesInQueue !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxReplicatedMergesInQueue = this._maxReplicatedMergesInQueue;
        }
        if (this._numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge !== undefined) {
            hasAnyValues = true;
            internalValueResult.numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge = this._numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge;
        }
        if (this._partsToDelayInsert !== undefined) {
            hasAnyValues = true;
            internalValueResult.partsToDelayInsert = this._partsToDelayInsert;
        }
        if (this._partsToThrowInsert !== undefined) {
            hasAnyValues = true;
            internalValueResult.partsToThrowInsert = this._partsToThrowInsert;
        }
        if (this._replicatedDeduplicationWindow !== undefined) {
            hasAnyValues = true;
            internalValueResult.replicatedDeduplicationWindow = this._replicatedDeduplicationWindow;
        }
        if (this._replicatedDeduplicationWindowSeconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.replicatedDeduplicationWindowSeconds = this._replicatedDeduplicationWindowSeconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maxBytesToMergeAtMinSpaceInPool = undefined;
            this._maxReplicatedMergesInQueue = undefined;
            this._numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge = undefined;
            this._partsToDelayInsert = undefined;
            this._partsToThrowInsert = undefined;
            this._replicatedDeduplicationWindow = undefined;
            this._replicatedDeduplicationWindowSeconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maxBytesToMergeAtMinSpaceInPool = value.maxBytesToMergeAtMinSpaceInPool;
            this._maxReplicatedMergesInQueue = value.maxReplicatedMergesInQueue;
            this._numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge = value.numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge;
            this._partsToDelayInsert = value.partsToDelayInsert;
            this._partsToThrowInsert = value.partsToThrowInsert;
            this._replicatedDeduplicationWindow = value.replicatedDeduplicationWindow;
            this._replicatedDeduplicationWindowSeconds = value.replicatedDeduplicationWindowSeconds;
        }
    }
    get maxBytesToMergeAtMinSpaceInPool() {
        return this.getNumberAttribute('max_bytes_to_merge_at_min_space_in_pool');
    }
    set maxBytesToMergeAtMinSpaceInPool(value) {
        this._maxBytesToMergeAtMinSpaceInPool = value;
    }
    resetMaxBytesToMergeAtMinSpaceInPool() {
        this._maxBytesToMergeAtMinSpaceInPool = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxBytesToMergeAtMinSpaceInPoolInput() {
        return this._maxBytesToMergeAtMinSpaceInPool;
    }
    get maxReplicatedMergesInQueue() {
        return this.getNumberAttribute('max_replicated_merges_in_queue');
    }
    set maxReplicatedMergesInQueue(value) {
        this._maxReplicatedMergesInQueue = value;
    }
    resetMaxReplicatedMergesInQueue() {
        this._maxReplicatedMergesInQueue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxReplicatedMergesInQueueInput() {
        return this._maxReplicatedMergesInQueue;
    }
    get numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge() {
        return this.getNumberAttribute('number_of_free_entries_in_pool_to_lower_max_size_of_merge');
    }
    set numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge(value) {
        this._numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge = value;
    }
    resetNumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge() {
        this._numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numberOfFreeEntriesInPoolToLowerMaxSizeOfMergeInput() {
        return this._numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge;
    }
    get partsToDelayInsert() {
        return this.getNumberAttribute('parts_to_delay_insert');
    }
    set partsToDelayInsert(value) {
        this._partsToDelayInsert = value;
    }
    resetPartsToDelayInsert() {
        this._partsToDelayInsert = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get partsToDelayInsertInput() {
        return this._partsToDelayInsert;
    }
    get partsToThrowInsert() {
        return this.getNumberAttribute('parts_to_throw_insert');
    }
    set partsToThrowInsert(value) {
        this._partsToThrowInsert = value;
    }
    resetPartsToThrowInsert() {
        this._partsToThrowInsert = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get partsToThrowInsertInput() {
        return this._partsToThrowInsert;
    }
    get replicatedDeduplicationWindow() {
        return this.getNumberAttribute('replicated_deduplication_window');
    }
    set replicatedDeduplicationWindow(value) {
        this._replicatedDeduplicationWindow = value;
    }
    resetReplicatedDeduplicationWindow() {
        this._replicatedDeduplicationWindow = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replicatedDeduplicationWindowInput() {
        return this._replicatedDeduplicationWindow;
    }
    get replicatedDeduplicationWindowSeconds() {
        return this.getNumberAttribute('replicated_deduplication_window_seconds');
    }
    set replicatedDeduplicationWindowSeconds(value) {
        this._replicatedDeduplicationWindowSeconds = value;
    }
    resetReplicatedDeduplicationWindowSeconds() {
        this._replicatedDeduplicationWindowSeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replicatedDeduplicationWindowSecondsInput() {
        return this._replicatedDeduplicationWindowSeconds;
    }
}
exports.MdbClickhouseClusterClickhouseConfigMergeTreeOutputReference = MdbClickhouseClusterClickhouseConfigMergeTreeOutputReference;
_q = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterClickhouseConfigMergeTreeOutputReference[_q] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterClickhouseConfigMergeTreeOutputReference", version: "2.0.32" };
function mdbClickhouseClusterClickhouseConfigRabbitmqToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        password: cdktf.stringToTerraform(struct.password),
        username: cdktf.stringToTerraform(struct.username),
    };
}
exports.mdbClickhouseClusterClickhouseConfigRabbitmqToTerraform = mdbClickhouseClusterClickhouseConfigRabbitmqToTerraform;
class MdbClickhouseClusterClickhouseConfigRabbitmqOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._password !== undefined) {
            hasAnyValues = true;
            internalValueResult.password = this._password;
        }
        if (this._username !== undefined) {
            hasAnyValues = true;
            internalValueResult.username = this._username;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._password = undefined;
            this._username = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._password = value.password;
            this._username = value.username;
        }
    }
    get password() {
        return this.getStringAttribute('password');
    }
    set password(value) {
        this._password = value;
    }
    resetPassword() {
        this._password = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password;
    }
    get username() {
        return this.getStringAttribute('username');
    }
    set username(value) {
        this._username = value;
    }
    resetUsername() {
        this._username = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get usernameInput() {
        return this._username;
    }
}
exports.MdbClickhouseClusterClickhouseConfigRabbitmqOutputReference = MdbClickhouseClusterClickhouseConfigRabbitmqOutputReference;
_r = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterClickhouseConfigRabbitmqOutputReference[_r] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterClickhouseConfigRabbitmqOutputReference", version: "2.0.32" };
function mdbClickhouseClusterClickhouseConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        background_pool_size: cdktf.numberToTerraform(struct.backgroundPoolSize),
        background_schedule_pool_size: cdktf.numberToTerraform(struct.backgroundSchedulePoolSize),
        geobase_uri: cdktf.stringToTerraform(struct.geobaseUri),
        keep_alive_timeout: cdktf.numberToTerraform(struct.keepAliveTimeout),
        log_level: cdktf.stringToTerraform(struct.logLevel),
        mark_cache_size: cdktf.numberToTerraform(struct.markCacheSize),
        max_concurrent_queries: cdktf.numberToTerraform(struct.maxConcurrentQueries),
        max_connections: cdktf.numberToTerraform(struct.maxConnections),
        max_partition_size_to_drop: cdktf.numberToTerraform(struct.maxPartitionSizeToDrop),
        max_table_size_to_drop: cdktf.numberToTerraform(struct.maxTableSizeToDrop),
        metric_log_enabled: cdktf.booleanToTerraform(struct.metricLogEnabled),
        metric_log_retention_size: cdktf.numberToTerraform(struct.metricLogRetentionSize),
        metric_log_retention_time: cdktf.numberToTerraform(struct.metricLogRetentionTime),
        part_log_retention_size: cdktf.numberToTerraform(struct.partLogRetentionSize),
        part_log_retention_time: cdktf.numberToTerraform(struct.partLogRetentionTime),
        query_log_retention_size: cdktf.numberToTerraform(struct.queryLogRetentionSize),
        query_log_retention_time: cdktf.numberToTerraform(struct.queryLogRetentionTime),
        query_thread_log_enabled: cdktf.booleanToTerraform(struct.queryThreadLogEnabled),
        query_thread_log_retention_size: cdktf.numberToTerraform(struct.queryThreadLogRetentionSize),
        query_thread_log_retention_time: cdktf.numberToTerraform(struct.queryThreadLogRetentionTime),
        text_log_enabled: cdktf.booleanToTerraform(struct.textLogEnabled),
        text_log_level: cdktf.stringToTerraform(struct.textLogLevel),
        text_log_retention_size: cdktf.numberToTerraform(struct.textLogRetentionSize),
        text_log_retention_time: cdktf.numberToTerraform(struct.textLogRetentionTime),
        timezone: cdktf.stringToTerraform(struct.timezone),
        trace_log_enabled: cdktf.booleanToTerraform(struct.traceLogEnabled),
        trace_log_retention_size: cdktf.numberToTerraform(struct.traceLogRetentionSize),
        trace_log_retention_time: cdktf.numberToTerraform(struct.traceLogRetentionTime),
        uncompressed_cache_size: cdktf.numberToTerraform(struct.uncompressedCacheSize),
        compression: cdktf.listMapper(mdbClickhouseClusterClickhouseConfigCompressionToTerraform, true)(struct.compression),
        graphite_rollup: cdktf.listMapper(mdbClickhouseClusterClickhouseConfigGraphiteRollupToTerraform, true)(struct.graphiteRollup),
        kafka: mdbClickhouseClusterClickhouseConfigKafkaToTerraform(struct.kafka),
        kafka_topic: cdktf.listMapper(mdbClickhouseClusterClickhouseConfigKafkaTopicToTerraform, true)(struct.kafkaTopic),
        merge_tree: mdbClickhouseClusterClickhouseConfigMergeTreeToTerraform(struct.mergeTree),
        rabbitmq: mdbClickhouseClusterClickhouseConfigRabbitmqToTerraform(struct.rabbitmq),
    };
}
exports.mdbClickhouseClusterClickhouseConfigToTerraform = mdbClickhouseClusterClickhouseConfigToTerraform;
class MdbClickhouseClusterClickhouseConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // compression - computed: false, optional: true, required: false
        this._compression = new MdbClickhouseClusterClickhouseConfigCompressionList(this, "compression", false);
        // graphite_rollup - computed: false, optional: true, required: false
        this._graphiteRollup = new MdbClickhouseClusterClickhouseConfigGraphiteRollupList(this, "graphite_rollup", false);
        // kafka - computed: false, optional: true, required: false
        this._kafka = new MdbClickhouseClusterClickhouseConfigKafkaOutputReference(this, "kafka");
        // kafka_topic - computed: false, optional: true, required: false
        this._kafkaTopic = new MdbClickhouseClusterClickhouseConfigKafkaTopicList(this, "kafka_topic", false);
        // merge_tree - computed: false, optional: true, required: false
        this._mergeTree = new MdbClickhouseClusterClickhouseConfigMergeTreeOutputReference(this, "merge_tree");
        // rabbitmq - computed: false, optional: true, required: false
        this._rabbitmq = new MdbClickhouseClusterClickhouseConfigRabbitmqOutputReference(this, "rabbitmq");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._backgroundPoolSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.backgroundPoolSize = this._backgroundPoolSize;
        }
        if (this._backgroundSchedulePoolSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.backgroundSchedulePoolSize = this._backgroundSchedulePoolSize;
        }
        if (this._geobaseUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.geobaseUri = this._geobaseUri;
        }
        if (this._keepAliveTimeout !== undefined) {
            hasAnyValues = true;
            internalValueResult.keepAliveTimeout = this._keepAliveTimeout;
        }
        if (this._logLevel !== undefined) {
            hasAnyValues = true;
            internalValueResult.logLevel = this._logLevel;
        }
        if (this._markCacheSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.markCacheSize = this._markCacheSize;
        }
        if (this._maxConcurrentQueries !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxConcurrentQueries = this._maxConcurrentQueries;
        }
        if (this._maxConnections !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxConnections = this._maxConnections;
        }
        if (this._maxPartitionSizeToDrop !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxPartitionSizeToDrop = this._maxPartitionSizeToDrop;
        }
        if (this._maxTableSizeToDrop !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxTableSizeToDrop = this._maxTableSizeToDrop;
        }
        if (this._metricLogEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.metricLogEnabled = this._metricLogEnabled;
        }
        if (this._metricLogRetentionSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.metricLogRetentionSize = this._metricLogRetentionSize;
        }
        if (this._metricLogRetentionTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.metricLogRetentionTime = this._metricLogRetentionTime;
        }
        if (this._partLogRetentionSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.partLogRetentionSize = this._partLogRetentionSize;
        }
        if (this._partLogRetentionTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.partLogRetentionTime = this._partLogRetentionTime;
        }
        if (this._queryLogRetentionSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryLogRetentionSize = this._queryLogRetentionSize;
        }
        if (this._queryLogRetentionTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryLogRetentionTime = this._queryLogRetentionTime;
        }
        if (this._queryThreadLogEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryThreadLogEnabled = this._queryThreadLogEnabled;
        }
        if (this._queryThreadLogRetentionSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryThreadLogRetentionSize = this._queryThreadLogRetentionSize;
        }
        if (this._queryThreadLogRetentionTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryThreadLogRetentionTime = this._queryThreadLogRetentionTime;
        }
        if (this._textLogEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.textLogEnabled = this._textLogEnabled;
        }
        if (this._textLogLevel !== undefined) {
            hasAnyValues = true;
            internalValueResult.textLogLevel = this._textLogLevel;
        }
        if (this._textLogRetentionSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.textLogRetentionSize = this._textLogRetentionSize;
        }
        if (this._textLogRetentionTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.textLogRetentionTime = this._textLogRetentionTime;
        }
        if (this._timezone !== undefined) {
            hasAnyValues = true;
            internalValueResult.timezone = this._timezone;
        }
        if (this._traceLogEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.traceLogEnabled = this._traceLogEnabled;
        }
        if (this._traceLogRetentionSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.traceLogRetentionSize = this._traceLogRetentionSize;
        }
        if (this._traceLogRetentionTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.traceLogRetentionTime = this._traceLogRetentionTime;
        }
        if (this._uncompressedCacheSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.uncompressedCacheSize = this._uncompressedCacheSize;
        }
        if (this._compression?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.compression = this._compression?.internalValue;
        }
        if (this._graphiteRollup?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.graphiteRollup = this._graphiteRollup?.internalValue;
        }
        if (this._kafka?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.kafka = this._kafka?.internalValue;
        }
        if (this._kafkaTopic?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.kafkaTopic = this._kafkaTopic?.internalValue;
        }
        if (this._mergeTree?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mergeTree = this._mergeTree?.internalValue;
        }
        if (this._rabbitmq?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.rabbitmq = this._rabbitmq?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._backgroundPoolSize = undefined;
            this._backgroundSchedulePoolSize = undefined;
            this._geobaseUri = undefined;
            this._keepAliveTimeout = undefined;
            this._logLevel = undefined;
            this._markCacheSize = undefined;
            this._maxConcurrentQueries = undefined;
            this._maxConnections = undefined;
            this._maxPartitionSizeToDrop = undefined;
            this._maxTableSizeToDrop = undefined;
            this._metricLogEnabled = undefined;
            this._metricLogRetentionSize = undefined;
            this._metricLogRetentionTime = undefined;
            this._partLogRetentionSize = undefined;
            this._partLogRetentionTime = undefined;
            this._queryLogRetentionSize = undefined;
            this._queryLogRetentionTime = undefined;
            this._queryThreadLogEnabled = undefined;
            this._queryThreadLogRetentionSize = undefined;
            this._queryThreadLogRetentionTime = undefined;
            this._textLogEnabled = undefined;
            this._textLogLevel = undefined;
            this._textLogRetentionSize = undefined;
            this._textLogRetentionTime = undefined;
            this._timezone = undefined;
            this._traceLogEnabled = undefined;
            this._traceLogRetentionSize = undefined;
            this._traceLogRetentionTime = undefined;
            this._uncompressedCacheSize = undefined;
            this._compression.internalValue = undefined;
            this._graphiteRollup.internalValue = undefined;
            this._kafka.internalValue = undefined;
            this._kafkaTopic.internalValue = undefined;
            this._mergeTree.internalValue = undefined;
            this._rabbitmq.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._backgroundPoolSize = value.backgroundPoolSize;
            this._backgroundSchedulePoolSize = value.backgroundSchedulePoolSize;
            this._geobaseUri = value.geobaseUri;
            this._keepAliveTimeout = value.keepAliveTimeout;
            this._logLevel = value.logLevel;
            this._markCacheSize = value.markCacheSize;
            this._maxConcurrentQueries = value.maxConcurrentQueries;
            this._maxConnections = value.maxConnections;
            this._maxPartitionSizeToDrop = value.maxPartitionSizeToDrop;
            this._maxTableSizeToDrop = value.maxTableSizeToDrop;
            this._metricLogEnabled = value.metricLogEnabled;
            this._metricLogRetentionSize = value.metricLogRetentionSize;
            this._metricLogRetentionTime = value.metricLogRetentionTime;
            this._partLogRetentionSize = value.partLogRetentionSize;
            this._partLogRetentionTime = value.partLogRetentionTime;
            this._queryLogRetentionSize = value.queryLogRetentionSize;
            this._queryLogRetentionTime = value.queryLogRetentionTime;
            this._queryThreadLogEnabled = value.queryThreadLogEnabled;
            this._queryThreadLogRetentionSize = value.queryThreadLogRetentionSize;
            this._queryThreadLogRetentionTime = value.queryThreadLogRetentionTime;
            this._textLogEnabled = value.textLogEnabled;
            this._textLogLevel = value.textLogLevel;
            this._textLogRetentionSize = value.textLogRetentionSize;
            this._textLogRetentionTime = value.textLogRetentionTime;
            this._timezone = value.timezone;
            this._traceLogEnabled = value.traceLogEnabled;
            this._traceLogRetentionSize = value.traceLogRetentionSize;
            this._traceLogRetentionTime = value.traceLogRetentionTime;
            this._uncompressedCacheSize = value.uncompressedCacheSize;
            this._compression.internalValue = value.compression;
            this._graphiteRollup.internalValue = value.graphiteRollup;
            this._kafka.internalValue = value.kafka;
            this._kafkaTopic.internalValue = value.kafkaTopic;
            this._mergeTree.internalValue = value.mergeTree;
            this._rabbitmq.internalValue = value.rabbitmq;
        }
    }
    get backgroundPoolSize() {
        return this.getNumberAttribute('background_pool_size');
    }
    set backgroundPoolSize(value) {
        this._backgroundPoolSize = value;
    }
    resetBackgroundPoolSize() {
        this._backgroundPoolSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backgroundPoolSizeInput() {
        return this._backgroundPoolSize;
    }
    get backgroundSchedulePoolSize() {
        return this.getNumberAttribute('background_schedule_pool_size');
    }
    set backgroundSchedulePoolSize(value) {
        this._backgroundSchedulePoolSize = value;
    }
    resetBackgroundSchedulePoolSize() {
        this._backgroundSchedulePoolSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backgroundSchedulePoolSizeInput() {
        return this._backgroundSchedulePoolSize;
    }
    get geobaseUri() {
        return this.getStringAttribute('geobase_uri');
    }
    set geobaseUri(value) {
        this._geobaseUri = value;
    }
    resetGeobaseUri() {
        this._geobaseUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get geobaseUriInput() {
        return this._geobaseUri;
    }
    get keepAliveTimeout() {
        return this.getNumberAttribute('keep_alive_timeout');
    }
    set keepAliveTimeout(value) {
        this._keepAliveTimeout = value;
    }
    resetKeepAliveTimeout() {
        this._keepAliveTimeout = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keepAliveTimeoutInput() {
        return this._keepAliveTimeout;
    }
    get logLevel() {
        return this.getStringAttribute('log_level');
    }
    set logLevel(value) {
        this._logLevel = value;
    }
    resetLogLevel() {
        this._logLevel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logLevelInput() {
        return this._logLevel;
    }
    get markCacheSize() {
        return this.getNumberAttribute('mark_cache_size');
    }
    set markCacheSize(value) {
        this._markCacheSize = value;
    }
    resetMarkCacheSize() {
        this._markCacheSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get markCacheSizeInput() {
        return this._markCacheSize;
    }
    get maxConcurrentQueries() {
        return this.getNumberAttribute('max_concurrent_queries');
    }
    set maxConcurrentQueries(value) {
        this._maxConcurrentQueries = value;
    }
    resetMaxConcurrentQueries() {
        this._maxConcurrentQueries = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxConcurrentQueriesInput() {
        return this._maxConcurrentQueries;
    }
    get maxConnections() {
        return this.getNumberAttribute('max_connections');
    }
    set maxConnections(value) {
        this._maxConnections = value;
    }
    resetMaxConnections() {
        this._maxConnections = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxConnectionsInput() {
        return this._maxConnections;
    }
    get maxPartitionSizeToDrop() {
        return this.getNumberAttribute('max_partition_size_to_drop');
    }
    set maxPartitionSizeToDrop(value) {
        this._maxPartitionSizeToDrop = value;
    }
    resetMaxPartitionSizeToDrop() {
        this._maxPartitionSizeToDrop = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxPartitionSizeToDropInput() {
        return this._maxPartitionSizeToDrop;
    }
    get maxTableSizeToDrop() {
        return this.getNumberAttribute('max_table_size_to_drop');
    }
    set maxTableSizeToDrop(value) {
        this._maxTableSizeToDrop = value;
    }
    resetMaxTableSizeToDrop() {
        this._maxTableSizeToDrop = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxTableSizeToDropInput() {
        return this._maxTableSizeToDrop;
    }
    get metricLogEnabled() {
        return this.getBooleanAttribute('metric_log_enabled');
    }
    set metricLogEnabled(value) {
        this._metricLogEnabled = value;
    }
    resetMetricLogEnabled() {
        this._metricLogEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metricLogEnabledInput() {
        return this._metricLogEnabled;
    }
    get metricLogRetentionSize() {
        return this.getNumberAttribute('metric_log_retention_size');
    }
    set metricLogRetentionSize(value) {
        this._metricLogRetentionSize = value;
    }
    resetMetricLogRetentionSize() {
        this._metricLogRetentionSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metricLogRetentionSizeInput() {
        return this._metricLogRetentionSize;
    }
    get metricLogRetentionTime() {
        return this.getNumberAttribute('metric_log_retention_time');
    }
    set metricLogRetentionTime(value) {
        this._metricLogRetentionTime = value;
    }
    resetMetricLogRetentionTime() {
        this._metricLogRetentionTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metricLogRetentionTimeInput() {
        return this._metricLogRetentionTime;
    }
    get partLogRetentionSize() {
        return this.getNumberAttribute('part_log_retention_size');
    }
    set partLogRetentionSize(value) {
        this._partLogRetentionSize = value;
    }
    resetPartLogRetentionSize() {
        this._partLogRetentionSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get partLogRetentionSizeInput() {
        return this._partLogRetentionSize;
    }
    get partLogRetentionTime() {
        return this.getNumberAttribute('part_log_retention_time');
    }
    set partLogRetentionTime(value) {
        this._partLogRetentionTime = value;
    }
    resetPartLogRetentionTime() {
        this._partLogRetentionTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get partLogRetentionTimeInput() {
        return this._partLogRetentionTime;
    }
    get queryLogRetentionSize() {
        return this.getNumberAttribute('query_log_retention_size');
    }
    set queryLogRetentionSize(value) {
        this._queryLogRetentionSize = value;
    }
    resetQueryLogRetentionSize() {
        this._queryLogRetentionSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryLogRetentionSizeInput() {
        return this._queryLogRetentionSize;
    }
    get queryLogRetentionTime() {
        return this.getNumberAttribute('query_log_retention_time');
    }
    set queryLogRetentionTime(value) {
        this._queryLogRetentionTime = value;
    }
    resetQueryLogRetentionTime() {
        this._queryLogRetentionTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryLogRetentionTimeInput() {
        return this._queryLogRetentionTime;
    }
    get queryThreadLogEnabled() {
        return this.getBooleanAttribute('query_thread_log_enabled');
    }
    set queryThreadLogEnabled(value) {
        this._queryThreadLogEnabled = value;
    }
    resetQueryThreadLogEnabled() {
        this._queryThreadLogEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryThreadLogEnabledInput() {
        return this._queryThreadLogEnabled;
    }
    get queryThreadLogRetentionSize() {
        return this.getNumberAttribute('query_thread_log_retention_size');
    }
    set queryThreadLogRetentionSize(value) {
        this._queryThreadLogRetentionSize = value;
    }
    resetQueryThreadLogRetentionSize() {
        this._queryThreadLogRetentionSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryThreadLogRetentionSizeInput() {
        return this._queryThreadLogRetentionSize;
    }
    get queryThreadLogRetentionTime() {
        return this.getNumberAttribute('query_thread_log_retention_time');
    }
    set queryThreadLogRetentionTime(value) {
        this._queryThreadLogRetentionTime = value;
    }
    resetQueryThreadLogRetentionTime() {
        this._queryThreadLogRetentionTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryThreadLogRetentionTimeInput() {
        return this._queryThreadLogRetentionTime;
    }
    get textLogEnabled() {
        return this.getBooleanAttribute('text_log_enabled');
    }
    set textLogEnabled(value) {
        this._textLogEnabled = value;
    }
    resetTextLogEnabled() {
        this._textLogEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get textLogEnabledInput() {
        return this._textLogEnabled;
    }
    get textLogLevel() {
        return this.getStringAttribute('text_log_level');
    }
    set textLogLevel(value) {
        this._textLogLevel = value;
    }
    resetTextLogLevel() {
        this._textLogLevel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get textLogLevelInput() {
        return this._textLogLevel;
    }
    get textLogRetentionSize() {
        return this.getNumberAttribute('text_log_retention_size');
    }
    set textLogRetentionSize(value) {
        this._textLogRetentionSize = value;
    }
    resetTextLogRetentionSize() {
        this._textLogRetentionSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get textLogRetentionSizeInput() {
        return this._textLogRetentionSize;
    }
    get textLogRetentionTime() {
        return this.getNumberAttribute('text_log_retention_time');
    }
    set textLogRetentionTime(value) {
        this._textLogRetentionTime = value;
    }
    resetTextLogRetentionTime() {
        this._textLogRetentionTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get textLogRetentionTimeInput() {
        return this._textLogRetentionTime;
    }
    get timezone() {
        return this.getStringAttribute('timezone');
    }
    set timezone(value) {
        this._timezone = value;
    }
    resetTimezone() {
        this._timezone = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timezoneInput() {
        return this._timezone;
    }
    get traceLogEnabled() {
        return this.getBooleanAttribute('trace_log_enabled');
    }
    set traceLogEnabled(value) {
        this._traceLogEnabled = value;
    }
    resetTraceLogEnabled() {
        this._traceLogEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get traceLogEnabledInput() {
        return this._traceLogEnabled;
    }
    get traceLogRetentionSize() {
        return this.getNumberAttribute('trace_log_retention_size');
    }
    set traceLogRetentionSize(value) {
        this._traceLogRetentionSize = value;
    }
    resetTraceLogRetentionSize() {
        this._traceLogRetentionSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get traceLogRetentionSizeInput() {
        return this._traceLogRetentionSize;
    }
    get traceLogRetentionTime() {
        return this.getNumberAttribute('trace_log_retention_time');
    }
    set traceLogRetentionTime(value) {
        this._traceLogRetentionTime = value;
    }
    resetTraceLogRetentionTime() {
        this._traceLogRetentionTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get traceLogRetentionTimeInput() {
        return this._traceLogRetentionTime;
    }
    get uncompressedCacheSize() {
        return this.getNumberAttribute('uncompressed_cache_size');
    }
    set uncompressedCacheSize(value) {
        this._uncompressedCacheSize = value;
    }
    resetUncompressedCacheSize() {
        this._uncompressedCacheSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get uncompressedCacheSizeInput() {
        return this._uncompressedCacheSize;
    }
    get compression() {
        return this._compression;
    }
    putCompression(value) {
        this._compression.internalValue = value;
    }
    resetCompression() {
        this._compression.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get compressionInput() {
        return this._compression.internalValue;
    }
    get graphiteRollup() {
        return this._graphiteRollup;
    }
    putGraphiteRollup(value) {
        this._graphiteRollup.internalValue = value;
    }
    resetGraphiteRollup() {
        this._graphiteRollup.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get graphiteRollupInput() {
        return this._graphiteRollup.internalValue;
    }
    get kafka() {
        return this._kafka;
    }
    putKafka(value) {
        this._kafka.internalValue = value;
    }
    resetKafka() {
        this._kafka.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kafkaInput() {
        return this._kafka.internalValue;
    }
    get kafkaTopic() {
        return this._kafkaTopic;
    }
    putKafkaTopic(value) {
        this._kafkaTopic.internalValue = value;
    }
    resetKafkaTopic() {
        this._kafkaTopic.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kafkaTopicInput() {
        return this._kafkaTopic.internalValue;
    }
    get mergeTree() {
        return this._mergeTree;
    }
    putMergeTree(value) {
        this._mergeTree.internalValue = value;
    }
    resetMergeTree() {
        this._mergeTree.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mergeTreeInput() {
        return this._mergeTree.internalValue;
    }
    get rabbitmq() {
        return this._rabbitmq;
    }
    putRabbitmq(value) {
        this._rabbitmq.internalValue = value;
    }
    resetRabbitmq() {
        this._rabbitmq.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rabbitmqInput() {
        return this._rabbitmq.internalValue;
    }
}
exports.MdbClickhouseClusterClickhouseConfigOutputReference = MdbClickhouseClusterClickhouseConfigOutputReference;
_s = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterClickhouseConfigOutputReference[_s] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterClickhouseConfigOutputReference", version: "2.0.32" };
function mdbClickhouseClusterClickhouseResourcesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        disk_size: cdktf.numberToTerraform(struct.diskSize),
        disk_type_id: cdktf.stringToTerraform(struct.diskTypeId),
        resource_preset_id: cdktf.stringToTerraform(struct.resourcePresetId),
    };
}
exports.mdbClickhouseClusterClickhouseResourcesToTerraform = mdbClickhouseClusterClickhouseResourcesToTerraform;
class MdbClickhouseClusterClickhouseResourcesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._diskSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskSize = this._diskSize;
        }
        if (this._diskTypeId !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskTypeId = this._diskTypeId;
        }
        if (this._resourcePresetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourcePresetId = this._resourcePresetId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._diskSize = undefined;
            this._diskTypeId = undefined;
            this._resourcePresetId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._diskSize = value.diskSize;
            this._diskTypeId = value.diskTypeId;
            this._resourcePresetId = value.resourcePresetId;
        }
    }
    get diskSize() {
        return this.getNumberAttribute('disk_size');
    }
    set diskSize(value) {
        this._diskSize = value;
    }
    // Temporarily expose input value. Use with caution.
    get diskSizeInput() {
        return this._diskSize;
    }
    get diskTypeId() {
        return this.getStringAttribute('disk_type_id');
    }
    set diskTypeId(value) {
        this._diskTypeId = value;
    }
    // Temporarily expose input value. Use with caution.
    get diskTypeIdInput() {
        return this._diskTypeId;
    }
    get resourcePresetId() {
        return this.getStringAttribute('resource_preset_id');
    }
    set resourcePresetId(value) {
        this._resourcePresetId = value;
    }
    // Temporarily expose input value. Use with caution.
    get resourcePresetIdInput() {
        return this._resourcePresetId;
    }
}
exports.MdbClickhouseClusterClickhouseResourcesOutputReference = MdbClickhouseClusterClickhouseResourcesOutputReference;
_t = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterClickhouseResourcesOutputReference[_t] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterClickhouseResourcesOutputReference", version: "2.0.32" };
function mdbClickhouseClusterClickhouseToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        config: mdbClickhouseClusterClickhouseConfigToTerraform(struct.config),
        resources: mdbClickhouseClusterClickhouseResourcesToTerraform(struct.resources),
    };
}
exports.mdbClickhouseClusterClickhouseToTerraform = mdbClickhouseClusterClickhouseToTerraform;
class MdbClickhouseClusterClickhouseOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // config - computed: false, optional: true, required: false
        this._config = new MdbClickhouseClusterClickhouseConfigOutputReference(this, "config");
        // resources - computed: false, optional: false, required: true
        this._resources = new MdbClickhouseClusterClickhouseResourcesOutputReference(this, "resources");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._config?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.config = this._config?.internalValue;
        }
        if (this._resources?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.resources = this._resources?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._config.internalValue = undefined;
            this._resources.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._config.internalValue = value.config;
            this._resources.internalValue = value.resources;
        }
    }
    get config() {
        return this._config;
    }
    putConfig(value) {
        this._config.internalValue = value;
    }
    resetConfig() {
        this._config.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get configInput() {
        return this._config.internalValue;
    }
    get resources() {
        return this._resources;
    }
    putResources(value) {
        this._resources.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get resourcesInput() {
        return this._resources.internalValue;
    }
}
exports.MdbClickhouseClusterClickhouseOutputReference = MdbClickhouseClusterClickhouseOutputReference;
_u = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterClickhouseOutputReference[_u] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterClickhouseOutputReference", version: "2.0.32" };
function mdbClickhouseClusterCloudStorageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.mdbClickhouseClusterCloudStorageToTerraform = mdbClickhouseClusterCloudStorageToTerraform;
class MdbClickhouseClusterCloudStorageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.MdbClickhouseClusterCloudStorageOutputReference = MdbClickhouseClusterCloudStorageOutputReference;
_v = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterCloudStorageOutputReference[_v] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterCloudStorageOutputReference", version: "2.0.32" };
function mdbClickhouseClusterDatabaseToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.mdbClickhouseClusterDatabaseToTerraform = mdbClickhouseClusterDatabaseToTerraform;
class MdbClickhouseClusterDatabaseOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.MdbClickhouseClusterDatabaseOutputReference = MdbClickhouseClusterDatabaseOutputReference;
_w = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterDatabaseOutputReference[_w] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterDatabaseOutputReference", version: "2.0.32" };
class MdbClickhouseClusterDatabaseList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MdbClickhouseClusterDatabaseOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MdbClickhouseClusterDatabaseList = MdbClickhouseClusterDatabaseList;
_x = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterDatabaseList[_x] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterDatabaseList", version: "2.0.32" };
function mdbClickhouseClusterFormatSchemaToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        type: cdktf.stringToTerraform(struct.type),
        uri: cdktf.stringToTerraform(struct.uri),
    };
}
exports.mdbClickhouseClusterFormatSchemaToTerraform = mdbClickhouseClusterFormatSchemaToTerraform;
class MdbClickhouseClusterFormatSchemaOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        if (this._uri !== undefined) {
            hasAnyValues = true;
            internalValueResult.uri = this._uri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._type = undefined;
            this._uri = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._type = value.type;
            this._uri = value.uri;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get uri() {
        return this.getStringAttribute('uri');
    }
    set uri(value) {
        this._uri = value;
    }
    // Temporarily expose input value. Use with caution.
    get uriInput() {
        return this._uri;
    }
}
exports.MdbClickhouseClusterFormatSchemaOutputReference = MdbClickhouseClusterFormatSchemaOutputReference;
_y = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterFormatSchemaOutputReference[_y] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterFormatSchemaOutputReference", version: "2.0.32" };
class MdbClickhouseClusterFormatSchemaList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MdbClickhouseClusterFormatSchemaOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MdbClickhouseClusterFormatSchemaList = MdbClickhouseClusterFormatSchemaList;
_z = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterFormatSchemaList[_z] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterFormatSchemaList", version: "2.0.32" };
function mdbClickhouseClusterHostToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        assign_public_ip: cdktf.booleanToTerraform(struct.assignPublicIp),
        shard_name: cdktf.stringToTerraform(struct.shardName),
        subnet_id: cdktf.stringToTerraform(struct.subnetId),
        type: cdktf.stringToTerraform(struct.type),
        zone: cdktf.stringToTerraform(struct.zone),
    };
}
exports.mdbClickhouseClusterHostToTerraform = mdbClickhouseClusterHostToTerraform;
class MdbClickhouseClusterHostOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._assignPublicIp !== undefined) {
            hasAnyValues = true;
            internalValueResult.assignPublicIp = this._assignPublicIp;
        }
        if (this._shardName !== undefined) {
            hasAnyValues = true;
            internalValueResult.shardName = this._shardName;
        }
        if (this._subnetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetId = this._subnetId;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        if (this._zone !== undefined) {
            hasAnyValues = true;
            internalValueResult.zone = this._zone;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._assignPublicIp = undefined;
            this._shardName = undefined;
            this._subnetId = undefined;
            this._type = undefined;
            this._zone = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._assignPublicIp = value.assignPublicIp;
            this._shardName = value.shardName;
            this._subnetId = value.subnetId;
            this._type = value.type;
            this._zone = value.zone;
        }
    }
    get assignPublicIp() {
        return this.getBooleanAttribute('assign_public_ip');
    }
    set assignPublicIp(value) {
        this._assignPublicIp = value;
    }
    resetAssignPublicIp() {
        this._assignPublicIp = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get assignPublicIpInput() {
        return this._assignPublicIp;
    }
    // fqdn - computed: true, optional: false, required: false
    get fqdn() {
        return this.getStringAttribute('fqdn');
    }
    get shardName() {
        return this.getStringAttribute('shard_name');
    }
    set shardName(value) {
        this._shardName = value;
    }
    resetShardName() {
        this._shardName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get shardNameInput() {
        return this._shardName;
    }
    get subnetId() {
        return this.getStringAttribute('subnet_id');
    }
    set subnetId(value) {
        this._subnetId = value;
    }
    resetSubnetId() {
        this._subnetId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetIdInput() {
        return this._subnetId;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get zone() {
        return this.getStringAttribute('zone');
    }
    set zone(value) {
        this._zone = value;
    }
    // Temporarily expose input value. Use with caution.
    get zoneInput() {
        return this._zone;
    }
}
exports.MdbClickhouseClusterHostOutputReference = MdbClickhouseClusterHostOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterHostOutputReference[_0] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterHostOutputReference", version: "2.0.32" };
class MdbClickhouseClusterHostList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MdbClickhouseClusterHostOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MdbClickhouseClusterHostList = MdbClickhouseClusterHostList;
_1 = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterHostList[_1] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterHostList", version: "2.0.32" };
function mdbClickhouseClusterMaintenanceWindowToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        day: cdktf.stringToTerraform(struct.day),
        hour: cdktf.numberToTerraform(struct.hour),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.mdbClickhouseClusterMaintenanceWindowToTerraform = mdbClickhouseClusterMaintenanceWindowToTerraform;
class MdbClickhouseClusterMaintenanceWindowOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._day !== undefined) {
            hasAnyValues = true;
            internalValueResult.day = this._day;
        }
        if (this._hour !== undefined) {
            hasAnyValues = true;
            internalValueResult.hour = this._hour;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._day = undefined;
            this._hour = undefined;
            this._type = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._day = value.day;
            this._hour = value.hour;
            this._type = value.type;
        }
    }
    get day() {
        return this.getStringAttribute('day');
    }
    set day(value) {
        this._day = value;
    }
    resetDay() {
        this._day = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dayInput() {
        return this._day;
    }
    get hour() {
        return this.getNumberAttribute('hour');
    }
    set hour(value) {
        this._hour = value;
    }
    resetHour() {
        this._hour = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hourInput() {
        return this._hour;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
}
exports.MdbClickhouseClusterMaintenanceWindowOutputReference = MdbClickhouseClusterMaintenanceWindowOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterMaintenanceWindowOutputReference[_2] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterMaintenanceWindowOutputReference", version: "2.0.32" };
function mdbClickhouseClusterMlModelToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        type: cdktf.stringToTerraform(struct.type),
        uri: cdktf.stringToTerraform(struct.uri),
    };
}
exports.mdbClickhouseClusterMlModelToTerraform = mdbClickhouseClusterMlModelToTerraform;
class MdbClickhouseClusterMlModelOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        if (this._uri !== undefined) {
            hasAnyValues = true;
            internalValueResult.uri = this._uri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._type = undefined;
            this._uri = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._type = value.type;
            this._uri = value.uri;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get uri() {
        return this.getStringAttribute('uri');
    }
    set uri(value) {
        this._uri = value;
    }
    // Temporarily expose input value. Use with caution.
    get uriInput() {
        return this._uri;
    }
}
exports.MdbClickhouseClusterMlModelOutputReference = MdbClickhouseClusterMlModelOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterMlModelOutputReference[_3] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterMlModelOutputReference", version: "2.0.32" };
class MdbClickhouseClusterMlModelList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MdbClickhouseClusterMlModelOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MdbClickhouseClusterMlModelList = MdbClickhouseClusterMlModelList;
_4 = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterMlModelList[_4] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterMlModelList", version: "2.0.32" };
function mdbClickhouseClusterShardGroupToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        description: cdktf.stringToTerraform(struct.description),
        name: cdktf.stringToTerraform(struct.name),
        shard_names: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.shardNames),
    };
}
exports.mdbClickhouseClusterShardGroupToTerraform = mdbClickhouseClusterShardGroupToTerraform;
class MdbClickhouseClusterShardGroupOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._description !== undefined) {
            hasAnyValues = true;
            internalValueResult.description = this._description;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._shardNames !== undefined) {
            hasAnyValues = true;
            internalValueResult.shardNames = this._shardNames;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._description = undefined;
            this._name = undefined;
            this._shardNames = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._description = value.description;
            this._name = value.name;
            this._shardNames = value.shardNames;
        }
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get shardNames() {
        return this.getListAttribute('shard_names');
    }
    set shardNames(value) {
        this._shardNames = value;
    }
    // Temporarily expose input value. Use with caution.
    get shardNamesInput() {
        return this._shardNames;
    }
}
exports.MdbClickhouseClusterShardGroupOutputReference = MdbClickhouseClusterShardGroupOutputReference;
_5 = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterShardGroupOutputReference[_5] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterShardGroupOutputReference", version: "2.0.32" };
class MdbClickhouseClusterShardGroupList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MdbClickhouseClusterShardGroupOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MdbClickhouseClusterShardGroupList = MdbClickhouseClusterShardGroupList;
_6 = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterShardGroupList[_6] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterShardGroupList", version: "2.0.32" };
function mdbClickhouseClusterTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.mdbClickhouseClusterTimeoutsToTerraform = mdbClickhouseClusterTimeoutsToTerraform;
class MdbClickhouseClusterTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.MdbClickhouseClusterTimeoutsOutputReference = MdbClickhouseClusterTimeoutsOutputReference;
_7 = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterTimeoutsOutputReference[_7] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterTimeoutsOutputReference", version: "2.0.32" };
function mdbClickhouseClusterUserPermissionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        database_name: cdktf.stringToTerraform(struct.databaseName),
    };
}
exports.mdbClickhouseClusterUserPermissionToTerraform = mdbClickhouseClusterUserPermissionToTerraform;
class MdbClickhouseClusterUserPermissionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._databaseName !== undefined) {
            hasAnyValues = true;
            internalValueResult.databaseName = this._databaseName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._databaseName = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._databaseName = value.databaseName;
        }
    }
    get databaseName() {
        return this.getStringAttribute('database_name');
    }
    set databaseName(value) {
        this._databaseName = value;
    }
    // Temporarily expose input value. Use with caution.
    get databaseNameInput() {
        return this._databaseName;
    }
}
exports.MdbClickhouseClusterUserPermissionOutputReference = MdbClickhouseClusterUserPermissionOutputReference;
_8 = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterUserPermissionOutputReference[_8] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterUserPermissionOutputReference", version: "2.0.32" };
class MdbClickhouseClusterUserPermissionList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MdbClickhouseClusterUserPermissionOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MdbClickhouseClusterUserPermissionList = MdbClickhouseClusterUserPermissionList;
_9 = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterUserPermissionList[_9] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterUserPermissionList", version: "2.0.32" };
function mdbClickhouseClusterUserQuotaToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        errors: cdktf.numberToTerraform(struct.errors),
        execution_time: cdktf.numberToTerraform(struct.executionTime),
        interval_duration: cdktf.numberToTerraform(struct.intervalDuration),
        queries: cdktf.numberToTerraform(struct.queries),
        read_rows: cdktf.numberToTerraform(struct.readRows),
        result_rows: cdktf.numberToTerraform(struct.resultRows),
    };
}
exports.mdbClickhouseClusterUserQuotaToTerraform = mdbClickhouseClusterUserQuotaToTerraform;
class MdbClickhouseClusterUserQuotaOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._errors !== undefined) {
            hasAnyValues = true;
            internalValueResult.errors = this._errors;
        }
        if (this._executionTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.executionTime = this._executionTime;
        }
        if (this._intervalDuration !== undefined) {
            hasAnyValues = true;
            internalValueResult.intervalDuration = this._intervalDuration;
        }
        if (this._queries !== undefined) {
            hasAnyValues = true;
            internalValueResult.queries = this._queries;
        }
        if (this._readRows !== undefined) {
            hasAnyValues = true;
            internalValueResult.readRows = this._readRows;
        }
        if (this._resultRows !== undefined) {
            hasAnyValues = true;
            internalValueResult.resultRows = this._resultRows;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._errors = undefined;
            this._executionTime = undefined;
            this._intervalDuration = undefined;
            this._queries = undefined;
            this._readRows = undefined;
            this._resultRows = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._errors = value.errors;
            this._executionTime = value.executionTime;
            this._intervalDuration = value.intervalDuration;
            this._queries = value.queries;
            this._readRows = value.readRows;
            this._resultRows = value.resultRows;
        }
    }
    get errors() {
        return this.getNumberAttribute('errors');
    }
    set errors(value) {
        this._errors = value;
    }
    resetErrors() {
        this._errors = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get errorsInput() {
        return this._errors;
    }
    get executionTime() {
        return this.getNumberAttribute('execution_time');
    }
    set executionTime(value) {
        this._executionTime = value;
    }
    resetExecutionTime() {
        this._executionTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get executionTimeInput() {
        return this._executionTime;
    }
    get intervalDuration() {
        return this.getNumberAttribute('interval_duration');
    }
    set intervalDuration(value) {
        this._intervalDuration = value;
    }
    // Temporarily expose input value. Use with caution.
    get intervalDurationInput() {
        return this._intervalDuration;
    }
    get queries() {
        return this.getNumberAttribute('queries');
    }
    set queries(value) {
        this._queries = value;
    }
    resetQueries() {
        this._queries = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queriesInput() {
        return this._queries;
    }
    get readRows() {
        return this.getNumberAttribute('read_rows');
    }
    set readRows(value) {
        this._readRows = value;
    }
    resetReadRows() {
        this._readRows = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get readRowsInput() {
        return this._readRows;
    }
    get resultRows() {
        return this.getNumberAttribute('result_rows');
    }
    set resultRows(value) {
        this._resultRows = value;
    }
    resetResultRows() {
        this._resultRows = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resultRowsInput() {
        return this._resultRows;
    }
}
exports.MdbClickhouseClusterUserQuotaOutputReference = MdbClickhouseClusterUserQuotaOutputReference;
_10 = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterUserQuotaOutputReference[_10] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterUserQuotaOutputReference", version: "2.0.32" };
class MdbClickhouseClusterUserQuotaList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MdbClickhouseClusterUserQuotaOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MdbClickhouseClusterUserQuotaList = MdbClickhouseClusterUserQuotaList;
_11 = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterUserQuotaList[_11] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterUserQuotaList", version: "2.0.32" };
function mdbClickhouseClusterUserSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        add_http_cors_header: cdktf.booleanToTerraform(struct.addHttpCorsHeader),
        allow_ddl: cdktf.booleanToTerraform(struct.allowDdl),
        compile: cdktf.booleanToTerraform(struct.compile),
        compile_expressions: cdktf.booleanToTerraform(struct.compileExpressions),
        connect_timeout: cdktf.numberToTerraform(struct.connectTimeout),
        count_distinct_implementation: cdktf.stringToTerraform(struct.countDistinctImplementation),
        distinct_overflow_mode: cdktf.stringToTerraform(struct.distinctOverflowMode),
        distributed_aggregation_memory_efficient: cdktf.booleanToTerraform(struct.distributedAggregationMemoryEfficient),
        distributed_ddl_task_timeout: cdktf.numberToTerraform(struct.distributedDdlTaskTimeout),
        distributed_product_mode: cdktf.stringToTerraform(struct.distributedProductMode),
        empty_result_for_aggregation_by_empty_set: cdktf.booleanToTerraform(struct.emptyResultForAggregationByEmptySet),
        enable_http_compression: cdktf.booleanToTerraform(struct.enableHttpCompression),
        fallback_to_stale_replicas_for_distributed_queries: cdktf.booleanToTerraform(struct.fallbackToStaleReplicasForDistributedQueries),
        force_index_by_date: cdktf.booleanToTerraform(struct.forceIndexByDate),
        force_primary_key: cdktf.booleanToTerraform(struct.forcePrimaryKey),
        group_by_overflow_mode: cdktf.stringToTerraform(struct.groupByOverflowMode),
        group_by_two_level_threshold: cdktf.numberToTerraform(struct.groupByTwoLevelThreshold),
        group_by_two_level_threshold_bytes: cdktf.numberToTerraform(struct.groupByTwoLevelThresholdBytes),
        http_connection_timeout: cdktf.numberToTerraform(struct.httpConnectionTimeout),
        http_headers_progress_interval: cdktf.numberToTerraform(struct.httpHeadersProgressInterval),
        http_receive_timeout: cdktf.numberToTerraform(struct.httpReceiveTimeout),
        http_send_timeout: cdktf.numberToTerraform(struct.httpSendTimeout),
        input_format_defaults_for_omitted_fields: cdktf.booleanToTerraform(struct.inputFormatDefaultsForOmittedFields),
        input_format_values_interpret_expressions: cdktf.booleanToTerraform(struct.inputFormatValuesInterpretExpressions),
        insert_quorum: cdktf.numberToTerraform(struct.insertQuorum),
        insert_quorum_timeout: cdktf.numberToTerraform(struct.insertQuorumTimeout),
        join_overflow_mode: cdktf.stringToTerraform(struct.joinOverflowMode),
        join_use_nulls: cdktf.booleanToTerraform(struct.joinUseNulls),
        joined_subquery_requires_alias: cdktf.booleanToTerraform(struct.joinedSubqueryRequiresAlias),
        low_cardinality_allow_in_native_format: cdktf.booleanToTerraform(struct.lowCardinalityAllowInNativeFormat),
        max_ast_depth: cdktf.numberToTerraform(struct.maxAstDepth),
        max_ast_elements: cdktf.numberToTerraform(struct.maxAstElements),
        max_block_size: cdktf.numberToTerraform(struct.maxBlockSize),
        max_bytes_before_external_group_by: cdktf.numberToTerraform(struct.maxBytesBeforeExternalGroupBy),
        max_bytes_before_external_sort: cdktf.numberToTerraform(struct.maxBytesBeforeExternalSort),
        max_bytes_in_distinct: cdktf.numberToTerraform(struct.maxBytesInDistinct),
        max_bytes_in_join: cdktf.numberToTerraform(struct.maxBytesInJoin),
        max_bytes_in_set: cdktf.numberToTerraform(struct.maxBytesInSet),
        max_bytes_to_read: cdktf.numberToTerraform(struct.maxBytesToRead),
        max_bytes_to_sort: cdktf.numberToTerraform(struct.maxBytesToSort),
        max_bytes_to_transfer: cdktf.numberToTerraform(struct.maxBytesToTransfer),
        max_columns_to_read: cdktf.numberToTerraform(struct.maxColumnsToRead),
        max_execution_time: cdktf.numberToTerraform(struct.maxExecutionTime),
        max_expanded_ast_elements: cdktf.numberToTerraform(struct.maxExpandedAstElements),
        max_insert_block_size: cdktf.numberToTerraform(struct.maxInsertBlockSize),
        max_memory_usage: cdktf.numberToTerraform(struct.maxMemoryUsage),
        max_memory_usage_for_user: cdktf.numberToTerraform(struct.maxMemoryUsageForUser),
        max_network_bandwidth: cdktf.numberToTerraform(struct.maxNetworkBandwidth),
        max_network_bandwidth_for_user: cdktf.numberToTerraform(struct.maxNetworkBandwidthForUser),
        max_query_size: cdktf.numberToTerraform(struct.maxQuerySize),
        max_replica_delay_for_distributed_queries: cdktf.numberToTerraform(struct.maxReplicaDelayForDistributedQueries),
        max_result_bytes: cdktf.numberToTerraform(struct.maxResultBytes),
        max_result_rows: cdktf.numberToTerraform(struct.maxResultRows),
        max_rows_in_distinct: cdktf.numberToTerraform(struct.maxRowsInDistinct),
        max_rows_in_join: cdktf.numberToTerraform(struct.maxRowsInJoin),
        max_rows_in_set: cdktf.numberToTerraform(struct.maxRowsInSet),
        max_rows_to_group_by: cdktf.numberToTerraform(struct.maxRowsToGroupBy),
        max_rows_to_read: cdktf.numberToTerraform(struct.maxRowsToRead),
        max_rows_to_sort: cdktf.numberToTerraform(struct.maxRowsToSort),
        max_rows_to_transfer: cdktf.numberToTerraform(struct.maxRowsToTransfer),
        max_temporary_columns: cdktf.numberToTerraform(struct.maxTemporaryColumns),
        max_temporary_non_const_columns: cdktf.numberToTerraform(struct.maxTemporaryNonConstColumns),
        max_threads: cdktf.numberToTerraform(struct.maxThreads),
        merge_tree_max_bytes_to_use_cache: cdktf.numberToTerraform(struct.mergeTreeMaxBytesToUseCache),
        merge_tree_max_rows_to_use_cache: cdktf.numberToTerraform(struct.mergeTreeMaxRowsToUseCache),
        merge_tree_min_bytes_for_concurrent_read: cdktf.numberToTerraform(struct.mergeTreeMinBytesForConcurrentRead),
        merge_tree_min_rows_for_concurrent_read: cdktf.numberToTerraform(struct.mergeTreeMinRowsForConcurrentRead),
        min_bytes_to_use_direct_io: cdktf.numberToTerraform(struct.minBytesToUseDirectIo),
        min_count_to_compile: cdktf.numberToTerraform(struct.minCountToCompile),
        min_count_to_compile_expression: cdktf.numberToTerraform(struct.minCountToCompileExpression),
        min_execution_speed: cdktf.numberToTerraform(struct.minExecutionSpeed),
        min_execution_speed_bytes: cdktf.numberToTerraform(struct.minExecutionSpeedBytes),
        min_insert_block_size_bytes: cdktf.numberToTerraform(struct.minInsertBlockSizeBytes),
        min_insert_block_size_rows: cdktf.numberToTerraform(struct.minInsertBlockSizeRows),
        output_format_json_quote_64bit_integers: cdktf.booleanToTerraform(struct.outputFormatJsonQuote64BitIntegers),
        output_format_json_quote_denormals: cdktf.booleanToTerraform(struct.outputFormatJsonQuoteDenormals),
        priority: cdktf.numberToTerraform(struct.priority),
        quota_mode: cdktf.stringToTerraform(struct.quotaMode),
        read_overflow_mode: cdktf.stringToTerraform(struct.readOverflowMode),
        readonly: cdktf.numberToTerraform(struct.readonly),
        receive_timeout: cdktf.numberToTerraform(struct.receiveTimeout),
        replication_alter_partitions_sync: cdktf.numberToTerraform(struct.replicationAlterPartitionsSync),
        result_overflow_mode: cdktf.stringToTerraform(struct.resultOverflowMode),
        select_sequential_consistency: cdktf.booleanToTerraform(struct.selectSequentialConsistency),
        send_progress_in_http_headers: cdktf.booleanToTerraform(struct.sendProgressInHttpHeaders),
        send_timeout: cdktf.numberToTerraform(struct.sendTimeout),
        set_overflow_mode: cdktf.stringToTerraform(struct.setOverflowMode),
        skip_unavailable_shards: cdktf.booleanToTerraform(struct.skipUnavailableShards),
        sort_overflow_mode: cdktf.stringToTerraform(struct.sortOverflowMode),
        timeout_overflow_mode: cdktf.stringToTerraform(struct.timeoutOverflowMode),
        transfer_overflow_mode: cdktf.stringToTerraform(struct.transferOverflowMode),
        transform_null_in: cdktf.booleanToTerraform(struct.transformNullIn),
        use_uncompressed_cache: cdktf.booleanToTerraform(struct.useUncompressedCache),
    };
}
exports.mdbClickhouseClusterUserSettingsToTerraform = mdbClickhouseClusterUserSettingsToTerraform;
class MdbClickhouseClusterUserSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._addHttpCorsHeader !== undefined) {
            hasAnyValues = true;
            internalValueResult.addHttpCorsHeader = this._addHttpCorsHeader;
        }
        if (this._allowDdl !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowDdl = this._allowDdl;
        }
        if (this._compile !== undefined) {
            hasAnyValues = true;
            internalValueResult.compile = this._compile;
        }
        if (this._compileExpressions !== undefined) {
            hasAnyValues = true;
            internalValueResult.compileExpressions = this._compileExpressions;
        }
        if (this._connectTimeout !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectTimeout = this._connectTimeout;
        }
        if (this._countDistinctImplementation !== undefined) {
            hasAnyValues = true;
            internalValueResult.countDistinctImplementation = this._countDistinctImplementation;
        }
        if (this._distinctOverflowMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.distinctOverflowMode = this._distinctOverflowMode;
        }
        if (this._distributedAggregationMemoryEfficient !== undefined) {
            hasAnyValues = true;
            internalValueResult.distributedAggregationMemoryEfficient = this._distributedAggregationMemoryEfficient;
        }
        if (this._distributedDdlTaskTimeout !== undefined) {
            hasAnyValues = true;
            internalValueResult.distributedDdlTaskTimeout = this._distributedDdlTaskTimeout;
        }
        if (this._distributedProductMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.distributedProductMode = this._distributedProductMode;
        }
        if (this._emptyResultForAggregationByEmptySet !== undefined) {
            hasAnyValues = true;
            internalValueResult.emptyResultForAggregationByEmptySet = this._emptyResultForAggregationByEmptySet;
        }
        if (this._enableHttpCompression !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableHttpCompression = this._enableHttpCompression;
        }
        if (this._fallbackToStaleReplicasForDistributedQueries !== undefined) {
            hasAnyValues = true;
            internalValueResult.fallbackToStaleReplicasForDistributedQueries = this._fallbackToStaleReplicasForDistributedQueries;
        }
        if (this._forceIndexByDate !== undefined) {
            hasAnyValues = true;
            internalValueResult.forceIndexByDate = this._forceIndexByDate;
        }
        if (this._forcePrimaryKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.forcePrimaryKey = this._forcePrimaryKey;
        }
        if (this._groupByOverflowMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.groupByOverflowMode = this._groupByOverflowMode;
        }
        if (this._groupByTwoLevelThreshold !== undefined) {
            hasAnyValues = true;
            internalValueResult.groupByTwoLevelThreshold = this._groupByTwoLevelThreshold;
        }
        if (this._groupByTwoLevelThresholdBytes !== undefined) {
            hasAnyValues = true;
            internalValueResult.groupByTwoLevelThresholdBytes = this._groupByTwoLevelThresholdBytes;
        }
        if (this._httpConnectionTimeout !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpConnectionTimeout = this._httpConnectionTimeout;
        }
        if (this._httpHeadersProgressInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpHeadersProgressInterval = this._httpHeadersProgressInterval;
        }
        if (this._httpReceiveTimeout !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpReceiveTimeout = this._httpReceiveTimeout;
        }
        if (this._httpSendTimeout !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpSendTimeout = this._httpSendTimeout;
        }
        if (this._inputFormatDefaultsForOmittedFields !== undefined) {
            hasAnyValues = true;
            internalValueResult.inputFormatDefaultsForOmittedFields = this._inputFormatDefaultsForOmittedFields;
        }
        if (this._inputFormatValuesInterpretExpressions !== undefined) {
            hasAnyValues = true;
            internalValueResult.inputFormatValuesInterpretExpressions = this._inputFormatValuesInterpretExpressions;
        }
        if (this._insertQuorum !== undefined) {
            hasAnyValues = true;
            internalValueResult.insertQuorum = this._insertQuorum;
        }
        if (this._insertQuorumTimeout !== undefined) {
            hasAnyValues = true;
            internalValueResult.insertQuorumTimeout = this._insertQuorumTimeout;
        }
        if (this._joinOverflowMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.joinOverflowMode = this._joinOverflowMode;
        }
        if (this._joinUseNulls !== undefined) {
            hasAnyValues = true;
            internalValueResult.joinUseNulls = this._joinUseNulls;
        }
        if (this._joinedSubqueryRequiresAlias !== undefined) {
            hasAnyValues = true;
            internalValueResult.joinedSubqueryRequiresAlias = this._joinedSubqueryRequiresAlias;
        }
        if (this._lowCardinalityAllowInNativeFormat !== undefined) {
            hasAnyValues = true;
            internalValueResult.lowCardinalityAllowInNativeFormat = this._lowCardinalityAllowInNativeFormat;
        }
        if (this._maxAstDepth !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxAstDepth = this._maxAstDepth;
        }
        if (this._maxAstElements !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxAstElements = this._maxAstElements;
        }
        if (this._maxBlockSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxBlockSize = this._maxBlockSize;
        }
        if (this._maxBytesBeforeExternalGroupBy !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxBytesBeforeExternalGroupBy = this._maxBytesBeforeExternalGroupBy;
        }
        if (this._maxBytesBeforeExternalSort !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxBytesBeforeExternalSort = this._maxBytesBeforeExternalSort;
        }
        if (this._maxBytesInDistinct !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxBytesInDistinct = this._maxBytesInDistinct;
        }
        if (this._maxBytesInJoin !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxBytesInJoin = this._maxBytesInJoin;
        }
        if (this._maxBytesInSet !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxBytesInSet = this._maxBytesInSet;
        }
        if (this._maxBytesToRead !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxBytesToRead = this._maxBytesToRead;
        }
        if (this._maxBytesToSort !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxBytesToSort = this._maxBytesToSort;
        }
        if (this._maxBytesToTransfer !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxBytesToTransfer = this._maxBytesToTransfer;
        }
        if (this._maxColumnsToRead !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxColumnsToRead = this._maxColumnsToRead;
        }
        if (this._maxExecutionTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxExecutionTime = this._maxExecutionTime;
        }
        if (this._maxExpandedAstElements !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxExpandedAstElements = this._maxExpandedAstElements;
        }
        if (this._maxInsertBlockSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxInsertBlockSize = this._maxInsertBlockSize;
        }
        if (this._maxMemoryUsage !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxMemoryUsage = this._maxMemoryUsage;
        }
        if (this._maxMemoryUsageForUser !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxMemoryUsageForUser = this._maxMemoryUsageForUser;
        }
        if (this._maxNetworkBandwidth !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxNetworkBandwidth = this._maxNetworkBandwidth;
        }
        if (this._maxNetworkBandwidthForUser !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxNetworkBandwidthForUser = this._maxNetworkBandwidthForUser;
        }
        if (this._maxQuerySize !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxQuerySize = this._maxQuerySize;
        }
        if (this._maxReplicaDelayForDistributedQueries !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxReplicaDelayForDistributedQueries = this._maxReplicaDelayForDistributedQueries;
        }
        if (this._maxResultBytes !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxResultBytes = this._maxResultBytes;
        }
        if (this._maxResultRows !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxResultRows = this._maxResultRows;
        }
        if (this._maxRowsInDistinct !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxRowsInDistinct = this._maxRowsInDistinct;
        }
        if (this._maxRowsInJoin !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxRowsInJoin = this._maxRowsInJoin;
        }
        if (this._maxRowsInSet !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxRowsInSet = this._maxRowsInSet;
        }
        if (this._maxRowsToGroupBy !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxRowsToGroupBy = this._maxRowsToGroupBy;
        }
        if (this._maxRowsToRead !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxRowsToRead = this._maxRowsToRead;
        }
        if (this._maxRowsToSort !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxRowsToSort = this._maxRowsToSort;
        }
        if (this._maxRowsToTransfer !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxRowsToTransfer = this._maxRowsToTransfer;
        }
        if (this._maxTemporaryColumns !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxTemporaryColumns = this._maxTemporaryColumns;
        }
        if (this._maxTemporaryNonConstColumns !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxTemporaryNonConstColumns = this._maxTemporaryNonConstColumns;
        }
        if (this._maxThreads !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxThreads = this._maxThreads;
        }
        if (this._mergeTreeMaxBytesToUseCache !== undefined) {
            hasAnyValues = true;
            internalValueResult.mergeTreeMaxBytesToUseCache = this._mergeTreeMaxBytesToUseCache;
        }
        if (this._mergeTreeMaxRowsToUseCache !== undefined) {
            hasAnyValues = true;
            internalValueResult.mergeTreeMaxRowsToUseCache = this._mergeTreeMaxRowsToUseCache;
        }
        if (this._mergeTreeMinBytesForConcurrentRead !== undefined) {
            hasAnyValues = true;
            internalValueResult.mergeTreeMinBytesForConcurrentRead = this._mergeTreeMinBytesForConcurrentRead;
        }
        if (this._mergeTreeMinRowsForConcurrentRead !== undefined) {
            hasAnyValues = true;
            internalValueResult.mergeTreeMinRowsForConcurrentRead = this._mergeTreeMinRowsForConcurrentRead;
        }
        if (this._minBytesToUseDirectIo !== undefined) {
            hasAnyValues = true;
            internalValueResult.minBytesToUseDirectIo = this._minBytesToUseDirectIo;
        }
        if (this._minCountToCompile !== undefined) {
            hasAnyValues = true;
            internalValueResult.minCountToCompile = this._minCountToCompile;
        }
        if (this._minCountToCompileExpression !== undefined) {
            hasAnyValues = true;
            internalValueResult.minCountToCompileExpression = this._minCountToCompileExpression;
        }
        if (this._minExecutionSpeed !== undefined) {
            hasAnyValues = true;
            internalValueResult.minExecutionSpeed = this._minExecutionSpeed;
        }
        if (this._minExecutionSpeedBytes !== undefined) {
            hasAnyValues = true;
            internalValueResult.minExecutionSpeedBytes = this._minExecutionSpeedBytes;
        }
        if (this._minInsertBlockSizeBytes !== undefined) {
            hasAnyValues = true;
            internalValueResult.minInsertBlockSizeBytes = this._minInsertBlockSizeBytes;
        }
        if (this._minInsertBlockSizeRows !== undefined) {
            hasAnyValues = true;
            internalValueResult.minInsertBlockSizeRows = this._minInsertBlockSizeRows;
        }
        if (this._outputFormatJsonQuote64BitIntegers !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputFormatJsonQuote64BitIntegers = this._outputFormatJsonQuote64BitIntegers;
        }
        if (this._outputFormatJsonQuoteDenormals !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputFormatJsonQuoteDenormals = this._outputFormatJsonQuoteDenormals;
        }
        if (this._priority !== undefined) {
            hasAnyValues = true;
            internalValueResult.priority = this._priority;
        }
        if (this._quotaMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.quotaMode = this._quotaMode;
        }
        if (this._readOverflowMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.readOverflowMode = this._readOverflowMode;
        }
        if (this._readonly !== undefined) {
            hasAnyValues = true;
            internalValueResult.readonly = this._readonly;
        }
        if (this._receiveTimeout !== undefined) {
            hasAnyValues = true;
            internalValueResult.receiveTimeout = this._receiveTimeout;
        }
        if (this._replicationAlterPartitionsSync !== undefined) {
            hasAnyValues = true;
            internalValueResult.replicationAlterPartitionsSync = this._replicationAlterPartitionsSync;
        }
        if (this._resultOverflowMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.resultOverflowMode = this._resultOverflowMode;
        }
        if (this._selectSequentialConsistency !== undefined) {
            hasAnyValues = true;
            internalValueResult.selectSequentialConsistency = this._selectSequentialConsistency;
        }
        if (this._sendProgressInHttpHeaders !== undefined) {
            hasAnyValues = true;
            internalValueResult.sendProgressInHttpHeaders = this._sendProgressInHttpHeaders;
        }
        if (this._sendTimeout !== undefined) {
            hasAnyValues = true;
            internalValueResult.sendTimeout = this._sendTimeout;
        }
        if (this._setOverflowMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.setOverflowMode = this._setOverflowMode;
        }
        if (this._skipUnavailableShards !== undefined) {
            hasAnyValues = true;
            internalValueResult.skipUnavailableShards = this._skipUnavailableShards;
        }
        if (this._sortOverflowMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.sortOverflowMode = this._sortOverflowMode;
        }
        if (this._timeoutOverflowMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeoutOverflowMode = this._timeoutOverflowMode;
        }
        if (this._transferOverflowMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.transferOverflowMode = this._transferOverflowMode;
        }
        if (this._transformNullIn !== undefined) {
            hasAnyValues = true;
            internalValueResult.transformNullIn = this._transformNullIn;
        }
        if (this._useUncompressedCache !== undefined) {
            hasAnyValues = true;
            internalValueResult.useUncompressedCache = this._useUncompressedCache;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._addHttpCorsHeader = undefined;
            this._allowDdl = undefined;
            this._compile = undefined;
            this._compileExpressions = undefined;
            this._connectTimeout = undefined;
            this._countDistinctImplementation = undefined;
            this._distinctOverflowMode = undefined;
            this._distributedAggregationMemoryEfficient = undefined;
            this._distributedDdlTaskTimeout = undefined;
            this._distributedProductMode = undefined;
            this._emptyResultForAggregationByEmptySet = undefined;
            this._enableHttpCompression = undefined;
            this._fallbackToStaleReplicasForDistributedQueries = undefined;
            this._forceIndexByDate = undefined;
            this._forcePrimaryKey = undefined;
            this._groupByOverflowMode = undefined;
            this._groupByTwoLevelThreshold = undefined;
            this._groupByTwoLevelThresholdBytes = undefined;
            this._httpConnectionTimeout = undefined;
            this._httpHeadersProgressInterval = undefined;
            this._httpReceiveTimeout = undefined;
            this._httpSendTimeout = undefined;
            this._inputFormatDefaultsForOmittedFields = undefined;
            this._inputFormatValuesInterpretExpressions = undefined;
            this._insertQuorum = undefined;
            this._insertQuorumTimeout = undefined;
            this._joinOverflowMode = undefined;
            this._joinUseNulls = undefined;
            this._joinedSubqueryRequiresAlias = undefined;
            this._lowCardinalityAllowInNativeFormat = undefined;
            this._maxAstDepth = undefined;
            this._maxAstElements = undefined;
            this._maxBlockSize = undefined;
            this._maxBytesBeforeExternalGroupBy = undefined;
            this._maxBytesBeforeExternalSort = undefined;
            this._maxBytesInDistinct = undefined;
            this._maxBytesInJoin = undefined;
            this._maxBytesInSet = undefined;
            this._maxBytesToRead = undefined;
            this._maxBytesToSort = undefined;
            this._maxBytesToTransfer = undefined;
            this._maxColumnsToRead = undefined;
            this._maxExecutionTime = undefined;
            this._maxExpandedAstElements = undefined;
            this._maxInsertBlockSize = undefined;
            this._maxMemoryUsage = undefined;
            this._maxMemoryUsageForUser = undefined;
            this._maxNetworkBandwidth = undefined;
            this._maxNetworkBandwidthForUser = undefined;
            this._maxQuerySize = undefined;
            this._maxReplicaDelayForDistributedQueries = undefined;
            this._maxResultBytes = undefined;
            this._maxResultRows = undefined;
            this._maxRowsInDistinct = undefined;
            this._maxRowsInJoin = undefined;
            this._maxRowsInSet = undefined;
            this._maxRowsToGroupBy = undefined;
            this._maxRowsToRead = undefined;
            this._maxRowsToSort = undefined;
            this._maxRowsToTransfer = undefined;
            this._maxTemporaryColumns = undefined;
            this._maxTemporaryNonConstColumns = undefined;
            this._maxThreads = undefined;
            this._mergeTreeMaxBytesToUseCache = undefined;
            this._mergeTreeMaxRowsToUseCache = undefined;
            this._mergeTreeMinBytesForConcurrentRead = undefined;
            this._mergeTreeMinRowsForConcurrentRead = undefined;
            this._minBytesToUseDirectIo = undefined;
            this._minCountToCompile = undefined;
            this._minCountToCompileExpression = undefined;
            this._minExecutionSpeed = undefined;
            this._minExecutionSpeedBytes = undefined;
            this._minInsertBlockSizeBytes = undefined;
            this._minInsertBlockSizeRows = undefined;
            this._outputFormatJsonQuote64BitIntegers = undefined;
            this._outputFormatJsonQuoteDenormals = undefined;
            this._priority = undefined;
            this._quotaMode = undefined;
            this._readOverflowMode = undefined;
            this._readonly = undefined;
            this._receiveTimeout = undefined;
            this._replicationAlterPartitionsSync = undefined;
            this._resultOverflowMode = undefined;
            this._selectSequentialConsistency = undefined;
            this._sendProgressInHttpHeaders = undefined;
            this._sendTimeout = undefined;
            this._setOverflowMode = undefined;
            this._skipUnavailableShards = undefined;
            this._sortOverflowMode = undefined;
            this._timeoutOverflowMode = undefined;
            this._transferOverflowMode = undefined;
            this._transformNullIn = undefined;
            this._useUncompressedCache = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._addHttpCorsHeader = value.addHttpCorsHeader;
            this._allowDdl = value.allowDdl;
            this._compile = value.compile;
            this._compileExpressions = value.compileExpressions;
            this._connectTimeout = value.connectTimeout;
            this._countDistinctImplementation = value.countDistinctImplementation;
            this._distinctOverflowMode = value.distinctOverflowMode;
            this._distributedAggregationMemoryEfficient = value.distributedAggregationMemoryEfficient;
            this._distributedDdlTaskTimeout = value.distributedDdlTaskTimeout;
            this._distributedProductMode = value.distributedProductMode;
            this._emptyResultForAggregationByEmptySet = value.emptyResultForAggregationByEmptySet;
            this._enableHttpCompression = value.enableHttpCompression;
            this._fallbackToStaleReplicasForDistributedQueries = value.fallbackToStaleReplicasForDistributedQueries;
            this._forceIndexByDate = value.forceIndexByDate;
            this._forcePrimaryKey = value.forcePrimaryKey;
            this._groupByOverflowMode = value.groupByOverflowMode;
            this._groupByTwoLevelThreshold = value.groupByTwoLevelThreshold;
            this._groupByTwoLevelThresholdBytes = value.groupByTwoLevelThresholdBytes;
            this._httpConnectionTimeout = value.httpConnectionTimeout;
            this._httpHeadersProgressInterval = value.httpHeadersProgressInterval;
            this._httpReceiveTimeout = value.httpReceiveTimeout;
            this._httpSendTimeout = value.httpSendTimeout;
            this._inputFormatDefaultsForOmittedFields = value.inputFormatDefaultsForOmittedFields;
            this._inputFormatValuesInterpretExpressions = value.inputFormatValuesInterpretExpressions;
            this._insertQuorum = value.insertQuorum;
            this._insertQuorumTimeout = value.insertQuorumTimeout;
            this._joinOverflowMode = value.joinOverflowMode;
            this._joinUseNulls = value.joinUseNulls;
            this._joinedSubqueryRequiresAlias = value.joinedSubqueryRequiresAlias;
            this._lowCardinalityAllowInNativeFormat = value.lowCardinalityAllowInNativeFormat;
            this._maxAstDepth = value.maxAstDepth;
            this._maxAstElements = value.maxAstElements;
            this._maxBlockSize = value.maxBlockSize;
            this._maxBytesBeforeExternalGroupBy = value.maxBytesBeforeExternalGroupBy;
            this._maxBytesBeforeExternalSort = value.maxBytesBeforeExternalSort;
            this._maxBytesInDistinct = value.maxBytesInDistinct;
            this._maxBytesInJoin = value.maxBytesInJoin;
            this._maxBytesInSet = value.maxBytesInSet;
            this._maxBytesToRead = value.maxBytesToRead;
            this._maxBytesToSort = value.maxBytesToSort;
            this._maxBytesToTransfer = value.maxBytesToTransfer;
            this._maxColumnsToRead = value.maxColumnsToRead;
            this._maxExecutionTime = value.maxExecutionTime;
            this._maxExpandedAstElements = value.maxExpandedAstElements;
            this._maxInsertBlockSize = value.maxInsertBlockSize;
            this._maxMemoryUsage = value.maxMemoryUsage;
            this._maxMemoryUsageForUser = value.maxMemoryUsageForUser;
            this._maxNetworkBandwidth = value.maxNetworkBandwidth;
            this._maxNetworkBandwidthForUser = value.maxNetworkBandwidthForUser;
            this._maxQuerySize = value.maxQuerySize;
            this._maxReplicaDelayForDistributedQueries = value.maxReplicaDelayForDistributedQueries;
            this._maxResultBytes = value.maxResultBytes;
            this._maxResultRows = value.maxResultRows;
            this._maxRowsInDistinct = value.maxRowsInDistinct;
            this._maxRowsInJoin = value.maxRowsInJoin;
            this._maxRowsInSet = value.maxRowsInSet;
            this._maxRowsToGroupBy = value.maxRowsToGroupBy;
            this._maxRowsToRead = value.maxRowsToRead;
            this._maxRowsToSort = value.maxRowsToSort;
            this._maxRowsToTransfer = value.maxRowsToTransfer;
            this._maxTemporaryColumns = value.maxTemporaryColumns;
            this._maxTemporaryNonConstColumns = value.maxTemporaryNonConstColumns;
            this._maxThreads = value.maxThreads;
            this._mergeTreeMaxBytesToUseCache = value.mergeTreeMaxBytesToUseCache;
            this._mergeTreeMaxRowsToUseCache = value.mergeTreeMaxRowsToUseCache;
            this._mergeTreeMinBytesForConcurrentRead = value.mergeTreeMinBytesForConcurrentRead;
            this._mergeTreeMinRowsForConcurrentRead = value.mergeTreeMinRowsForConcurrentRead;
            this._minBytesToUseDirectIo = value.minBytesToUseDirectIo;
            this._minCountToCompile = value.minCountToCompile;
            this._minCountToCompileExpression = value.minCountToCompileExpression;
            this._minExecutionSpeed = value.minExecutionSpeed;
            this._minExecutionSpeedBytes = value.minExecutionSpeedBytes;
            this._minInsertBlockSizeBytes = value.minInsertBlockSizeBytes;
            this._minInsertBlockSizeRows = value.minInsertBlockSizeRows;
            this._outputFormatJsonQuote64BitIntegers = value.outputFormatJsonQuote64BitIntegers;
            this._outputFormatJsonQuoteDenormals = value.outputFormatJsonQuoteDenormals;
            this._priority = value.priority;
            this._quotaMode = value.quotaMode;
            this._readOverflowMode = value.readOverflowMode;
            this._readonly = value.readonly;
            this._receiveTimeout = value.receiveTimeout;
            this._replicationAlterPartitionsSync = value.replicationAlterPartitionsSync;
            this._resultOverflowMode = value.resultOverflowMode;
            this._selectSequentialConsistency = value.selectSequentialConsistency;
            this._sendProgressInHttpHeaders = value.sendProgressInHttpHeaders;
            this._sendTimeout = value.sendTimeout;
            this._setOverflowMode = value.setOverflowMode;
            this._skipUnavailableShards = value.skipUnavailableShards;
            this._sortOverflowMode = value.sortOverflowMode;
            this._timeoutOverflowMode = value.timeoutOverflowMode;
            this._transferOverflowMode = value.transferOverflowMode;
            this._transformNullIn = value.transformNullIn;
            this._useUncompressedCache = value.useUncompressedCache;
        }
    }
    get addHttpCorsHeader() {
        return this.getBooleanAttribute('add_http_cors_header');
    }
    set addHttpCorsHeader(value) {
        this._addHttpCorsHeader = value;
    }
    resetAddHttpCorsHeader() {
        this._addHttpCorsHeader = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get addHttpCorsHeaderInput() {
        return this._addHttpCorsHeader;
    }
    get allowDdl() {
        return this.getBooleanAttribute('allow_ddl');
    }
    set allowDdl(value) {
        this._allowDdl = value;
    }
    resetAllowDdl() {
        this._allowDdl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowDdlInput() {
        return this._allowDdl;
    }
    get compile() {
        return this.getBooleanAttribute('compile');
    }
    set compile(value) {
        this._compile = value;
    }
    resetCompile() {
        this._compile = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get compileInput() {
        return this._compile;
    }
    get compileExpressions() {
        return this.getBooleanAttribute('compile_expressions');
    }
    set compileExpressions(value) {
        this._compileExpressions = value;
    }
    resetCompileExpressions() {
        this._compileExpressions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get compileExpressionsInput() {
        return this._compileExpressions;
    }
    get connectTimeout() {
        return this.getNumberAttribute('connect_timeout');
    }
    set connectTimeout(value) {
        this._connectTimeout = value;
    }
    resetConnectTimeout() {
        this._connectTimeout = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectTimeoutInput() {
        return this._connectTimeout;
    }
    get countDistinctImplementation() {
        return this.getStringAttribute('count_distinct_implementation');
    }
    set countDistinctImplementation(value) {
        this._countDistinctImplementation = value;
    }
    resetCountDistinctImplementation() {
        this._countDistinctImplementation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get countDistinctImplementationInput() {
        return this._countDistinctImplementation;
    }
    get distinctOverflowMode() {
        return this.getStringAttribute('distinct_overflow_mode');
    }
    set distinctOverflowMode(value) {
        this._distinctOverflowMode = value;
    }
    resetDistinctOverflowMode() {
        this._distinctOverflowMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get distinctOverflowModeInput() {
        return this._distinctOverflowMode;
    }
    get distributedAggregationMemoryEfficient() {
        return this.getBooleanAttribute('distributed_aggregation_memory_efficient');
    }
    set distributedAggregationMemoryEfficient(value) {
        this._distributedAggregationMemoryEfficient = value;
    }
    resetDistributedAggregationMemoryEfficient() {
        this._distributedAggregationMemoryEfficient = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get distributedAggregationMemoryEfficientInput() {
        return this._distributedAggregationMemoryEfficient;
    }
    get distributedDdlTaskTimeout() {
        return this.getNumberAttribute('distributed_ddl_task_timeout');
    }
    set distributedDdlTaskTimeout(value) {
        this._distributedDdlTaskTimeout = value;
    }
    resetDistributedDdlTaskTimeout() {
        this._distributedDdlTaskTimeout = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get distributedDdlTaskTimeoutInput() {
        return this._distributedDdlTaskTimeout;
    }
    get distributedProductMode() {
        return this.getStringAttribute('distributed_product_mode');
    }
    set distributedProductMode(value) {
        this._distributedProductMode = value;
    }
    resetDistributedProductMode() {
        this._distributedProductMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get distributedProductModeInput() {
        return this._distributedProductMode;
    }
    get emptyResultForAggregationByEmptySet() {
        return this.getBooleanAttribute('empty_result_for_aggregation_by_empty_set');
    }
    set emptyResultForAggregationByEmptySet(value) {
        this._emptyResultForAggregationByEmptySet = value;
    }
    resetEmptyResultForAggregationByEmptySet() {
        this._emptyResultForAggregationByEmptySet = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get emptyResultForAggregationByEmptySetInput() {
        return this._emptyResultForAggregationByEmptySet;
    }
    get enableHttpCompression() {
        return this.getBooleanAttribute('enable_http_compression');
    }
    set enableHttpCompression(value) {
        this._enableHttpCompression = value;
    }
    resetEnableHttpCompression() {
        this._enableHttpCompression = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableHttpCompressionInput() {
        return this._enableHttpCompression;
    }
    get fallbackToStaleReplicasForDistributedQueries() {
        return this.getBooleanAttribute('fallback_to_stale_replicas_for_distributed_queries');
    }
    set fallbackToStaleReplicasForDistributedQueries(value) {
        this._fallbackToStaleReplicasForDistributedQueries = value;
    }
    resetFallbackToStaleReplicasForDistributedQueries() {
        this._fallbackToStaleReplicasForDistributedQueries = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fallbackToStaleReplicasForDistributedQueriesInput() {
        return this._fallbackToStaleReplicasForDistributedQueries;
    }
    get forceIndexByDate() {
        return this.getBooleanAttribute('force_index_by_date');
    }
    set forceIndexByDate(value) {
        this._forceIndexByDate = value;
    }
    resetForceIndexByDate() {
        this._forceIndexByDate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get forceIndexByDateInput() {
        return this._forceIndexByDate;
    }
    get forcePrimaryKey() {
        return this.getBooleanAttribute('force_primary_key');
    }
    set forcePrimaryKey(value) {
        this._forcePrimaryKey = value;
    }
    resetForcePrimaryKey() {
        this._forcePrimaryKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get forcePrimaryKeyInput() {
        return this._forcePrimaryKey;
    }
    get groupByOverflowMode() {
        return this.getStringAttribute('group_by_overflow_mode');
    }
    set groupByOverflowMode(value) {
        this._groupByOverflowMode = value;
    }
    resetGroupByOverflowMode() {
        this._groupByOverflowMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get groupByOverflowModeInput() {
        return this._groupByOverflowMode;
    }
    get groupByTwoLevelThreshold() {
        return this.getNumberAttribute('group_by_two_level_threshold');
    }
    set groupByTwoLevelThreshold(value) {
        this._groupByTwoLevelThreshold = value;
    }
    resetGroupByTwoLevelThreshold() {
        this._groupByTwoLevelThreshold = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get groupByTwoLevelThresholdInput() {
        return this._groupByTwoLevelThreshold;
    }
    get groupByTwoLevelThresholdBytes() {
        return this.getNumberAttribute('group_by_two_level_threshold_bytes');
    }
    set groupByTwoLevelThresholdBytes(value) {
        this._groupByTwoLevelThresholdBytes = value;
    }
    resetGroupByTwoLevelThresholdBytes() {
        this._groupByTwoLevelThresholdBytes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get groupByTwoLevelThresholdBytesInput() {
        return this._groupByTwoLevelThresholdBytes;
    }
    get httpConnectionTimeout() {
        return this.getNumberAttribute('http_connection_timeout');
    }
    set httpConnectionTimeout(value) {
        this._httpConnectionTimeout = value;
    }
    resetHttpConnectionTimeout() {
        this._httpConnectionTimeout = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpConnectionTimeoutInput() {
        return this._httpConnectionTimeout;
    }
    get httpHeadersProgressInterval() {
        return this.getNumberAttribute('http_headers_progress_interval');
    }
    set httpHeadersProgressInterval(value) {
        this._httpHeadersProgressInterval = value;
    }
    resetHttpHeadersProgressInterval() {
        this._httpHeadersProgressInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpHeadersProgressIntervalInput() {
        return this._httpHeadersProgressInterval;
    }
    get httpReceiveTimeout() {
        return this.getNumberAttribute('http_receive_timeout');
    }
    set httpReceiveTimeout(value) {
        this._httpReceiveTimeout = value;
    }
    resetHttpReceiveTimeout() {
        this._httpReceiveTimeout = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpReceiveTimeoutInput() {
        return this._httpReceiveTimeout;
    }
    get httpSendTimeout() {
        return this.getNumberAttribute('http_send_timeout');
    }
    set httpSendTimeout(value) {
        this._httpSendTimeout = value;
    }
    resetHttpSendTimeout() {
        this._httpSendTimeout = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpSendTimeoutInput() {
        return this._httpSendTimeout;
    }
    get inputFormatDefaultsForOmittedFields() {
        return this.getBooleanAttribute('input_format_defaults_for_omitted_fields');
    }
    set inputFormatDefaultsForOmittedFields(value) {
        this._inputFormatDefaultsForOmittedFields = value;
    }
    resetInputFormatDefaultsForOmittedFields() {
        this._inputFormatDefaultsForOmittedFields = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inputFormatDefaultsForOmittedFieldsInput() {
        return this._inputFormatDefaultsForOmittedFields;
    }
    get inputFormatValuesInterpretExpressions() {
        return this.getBooleanAttribute('input_format_values_interpret_expressions');
    }
    set inputFormatValuesInterpretExpressions(value) {
        this._inputFormatValuesInterpretExpressions = value;
    }
    resetInputFormatValuesInterpretExpressions() {
        this._inputFormatValuesInterpretExpressions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inputFormatValuesInterpretExpressionsInput() {
        return this._inputFormatValuesInterpretExpressions;
    }
    get insertQuorum() {
        return this.getNumberAttribute('insert_quorum');
    }
    set insertQuorum(value) {
        this._insertQuorum = value;
    }
    resetInsertQuorum() {
        this._insertQuorum = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get insertQuorumInput() {
        return this._insertQuorum;
    }
    get insertQuorumTimeout() {
        return this.getNumberAttribute('insert_quorum_timeout');
    }
    set insertQuorumTimeout(value) {
        this._insertQuorumTimeout = value;
    }
    resetInsertQuorumTimeout() {
        this._insertQuorumTimeout = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get insertQuorumTimeoutInput() {
        return this._insertQuorumTimeout;
    }
    get joinOverflowMode() {
        return this.getStringAttribute('join_overflow_mode');
    }
    set joinOverflowMode(value) {
        this._joinOverflowMode = value;
    }
    resetJoinOverflowMode() {
        this._joinOverflowMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get joinOverflowModeInput() {
        return this._joinOverflowMode;
    }
    get joinUseNulls() {
        return this.getBooleanAttribute('join_use_nulls');
    }
    set joinUseNulls(value) {
        this._joinUseNulls = value;
    }
    resetJoinUseNulls() {
        this._joinUseNulls = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get joinUseNullsInput() {
        return this._joinUseNulls;
    }
    get joinedSubqueryRequiresAlias() {
        return this.getBooleanAttribute('joined_subquery_requires_alias');
    }
    set joinedSubqueryRequiresAlias(value) {
        this._joinedSubqueryRequiresAlias = value;
    }
    resetJoinedSubqueryRequiresAlias() {
        this._joinedSubqueryRequiresAlias = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get joinedSubqueryRequiresAliasInput() {
        return this._joinedSubqueryRequiresAlias;
    }
    get lowCardinalityAllowInNativeFormat() {
        return this.getBooleanAttribute('low_cardinality_allow_in_native_format');
    }
    set lowCardinalityAllowInNativeFormat(value) {
        this._lowCardinalityAllowInNativeFormat = value;
    }
    resetLowCardinalityAllowInNativeFormat() {
        this._lowCardinalityAllowInNativeFormat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lowCardinalityAllowInNativeFormatInput() {
        return this._lowCardinalityAllowInNativeFormat;
    }
    get maxAstDepth() {
        return this.getNumberAttribute('max_ast_depth');
    }
    set maxAstDepth(value) {
        this._maxAstDepth = value;
    }
    resetMaxAstDepth() {
        this._maxAstDepth = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxAstDepthInput() {
        return this._maxAstDepth;
    }
    get maxAstElements() {
        return this.getNumberAttribute('max_ast_elements');
    }
    set maxAstElements(value) {
        this._maxAstElements = value;
    }
    resetMaxAstElements() {
        this._maxAstElements = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxAstElementsInput() {
        return this._maxAstElements;
    }
    get maxBlockSize() {
        return this.getNumberAttribute('max_block_size');
    }
    set maxBlockSize(value) {
        this._maxBlockSize = value;
    }
    resetMaxBlockSize() {
        this._maxBlockSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxBlockSizeInput() {
        return this._maxBlockSize;
    }
    get maxBytesBeforeExternalGroupBy() {
        return this.getNumberAttribute('max_bytes_before_external_group_by');
    }
    set maxBytesBeforeExternalGroupBy(value) {
        this._maxBytesBeforeExternalGroupBy = value;
    }
    resetMaxBytesBeforeExternalGroupBy() {
        this._maxBytesBeforeExternalGroupBy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxBytesBeforeExternalGroupByInput() {
        return this._maxBytesBeforeExternalGroupBy;
    }
    get maxBytesBeforeExternalSort() {
        return this.getNumberAttribute('max_bytes_before_external_sort');
    }
    set maxBytesBeforeExternalSort(value) {
        this._maxBytesBeforeExternalSort = value;
    }
    resetMaxBytesBeforeExternalSort() {
        this._maxBytesBeforeExternalSort = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxBytesBeforeExternalSortInput() {
        return this._maxBytesBeforeExternalSort;
    }
    get maxBytesInDistinct() {
        return this.getNumberAttribute('max_bytes_in_distinct');
    }
    set maxBytesInDistinct(value) {
        this._maxBytesInDistinct = value;
    }
    resetMaxBytesInDistinct() {
        this._maxBytesInDistinct = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxBytesInDistinctInput() {
        return this._maxBytesInDistinct;
    }
    get maxBytesInJoin() {
        return this.getNumberAttribute('max_bytes_in_join');
    }
    set maxBytesInJoin(value) {
        this._maxBytesInJoin = value;
    }
    resetMaxBytesInJoin() {
        this._maxBytesInJoin = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxBytesInJoinInput() {
        return this._maxBytesInJoin;
    }
    get maxBytesInSet() {
        return this.getNumberAttribute('max_bytes_in_set');
    }
    set maxBytesInSet(value) {
        this._maxBytesInSet = value;
    }
    resetMaxBytesInSet() {
        this._maxBytesInSet = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxBytesInSetInput() {
        return this._maxBytesInSet;
    }
    get maxBytesToRead() {
        return this.getNumberAttribute('max_bytes_to_read');
    }
    set maxBytesToRead(value) {
        this._maxBytesToRead = value;
    }
    resetMaxBytesToRead() {
        this._maxBytesToRead = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxBytesToReadInput() {
        return this._maxBytesToRead;
    }
    get maxBytesToSort() {
        return this.getNumberAttribute('max_bytes_to_sort');
    }
    set maxBytesToSort(value) {
        this._maxBytesToSort = value;
    }
    resetMaxBytesToSort() {
        this._maxBytesToSort = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxBytesToSortInput() {
        return this._maxBytesToSort;
    }
    get maxBytesToTransfer() {
        return this.getNumberAttribute('max_bytes_to_transfer');
    }
    set maxBytesToTransfer(value) {
        this._maxBytesToTransfer = value;
    }
    resetMaxBytesToTransfer() {
        this._maxBytesToTransfer = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxBytesToTransferInput() {
        return this._maxBytesToTransfer;
    }
    get maxColumnsToRead() {
        return this.getNumberAttribute('max_columns_to_read');
    }
    set maxColumnsToRead(value) {
        this._maxColumnsToRead = value;
    }
    resetMaxColumnsToRead() {
        this._maxColumnsToRead = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxColumnsToReadInput() {
        return this._maxColumnsToRead;
    }
    get maxExecutionTime() {
        return this.getNumberAttribute('max_execution_time');
    }
    set maxExecutionTime(value) {
        this._maxExecutionTime = value;
    }
    resetMaxExecutionTime() {
        this._maxExecutionTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxExecutionTimeInput() {
        return this._maxExecutionTime;
    }
    get maxExpandedAstElements() {
        return this.getNumberAttribute('max_expanded_ast_elements');
    }
    set maxExpandedAstElements(value) {
        this._maxExpandedAstElements = value;
    }
    resetMaxExpandedAstElements() {
        this._maxExpandedAstElements = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxExpandedAstElementsInput() {
        return this._maxExpandedAstElements;
    }
    get maxInsertBlockSize() {
        return this.getNumberAttribute('max_insert_block_size');
    }
    set maxInsertBlockSize(value) {
        this._maxInsertBlockSize = value;
    }
    resetMaxInsertBlockSize() {
        this._maxInsertBlockSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxInsertBlockSizeInput() {
        return this._maxInsertBlockSize;
    }
    get maxMemoryUsage() {
        return this.getNumberAttribute('max_memory_usage');
    }
    set maxMemoryUsage(value) {
        this._maxMemoryUsage = value;
    }
    resetMaxMemoryUsage() {
        this._maxMemoryUsage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxMemoryUsageInput() {
        return this._maxMemoryUsage;
    }
    get maxMemoryUsageForUser() {
        return this.getNumberAttribute('max_memory_usage_for_user');
    }
    set maxMemoryUsageForUser(value) {
        this._maxMemoryUsageForUser = value;
    }
    resetMaxMemoryUsageForUser() {
        this._maxMemoryUsageForUser = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxMemoryUsageForUserInput() {
        return this._maxMemoryUsageForUser;
    }
    get maxNetworkBandwidth() {
        return this.getNumberAttribute('max_network_bandwidth');
    }
    set maxNetworkBandwidth(value) {
        this._maxNetworkBandwidth = value;
    }
    resetMaxNetworkBandwidth() {
        this._maxNetworkBandwidth = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxNetworkBandwidthInput() {
        return this._maxNetworkBandwidth;
    }
    get maxNetworkBandwidthForUser() {
        return this.getNumberAttribute('max_network_bandwidth_for_user');
    }
    set maxNetworkBandwidthForUser(value) {
        this._maxNetworkBandwidthForUser = value;
    }
    resetMaxNetworkBandwidthForUser() {
        this._maxNetworkBandwidthForUser = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxNetworkBandwidthForUserInput() {
        return this._maxNetworkBandwidthForUser;
    }
    get maxQuerySize() {
        return this.getNumberAttribute('max_query_size');
    }
    set maxQuerySize(value) {
        this._maxQuerySize = value;
    }
    resetMaxQuerySize() {
        this._maxQuerySize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxQuerySizeInput() {
        return this._maxQuerySize;
    }
    get maxReplicaDelayForDistributedQueries() {
        return this.getNumberAttribute('max_replica_delay_for_distributed_queries');
    }
    set maxReplicaDelayForDistributedQueries(value) {
        this._maxReplicaDelayForDistributedQueries = value;
    }
    resetMaxReplicaDelayForDistributedQueries() {
        this._maxReplicaDelayForDistributedQueries = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxReplicaDelayForDistributedQueriesInput() {
        return this._maxReplicaDelayForDistributedQueries;
    }
    get maxResultBytes() {
        return this.getNumberAttribute('max_result_bytes');
    }
    set maxResultBytes(value) {
        this._maxResultBytes = value;
    }
    resetMaxResultBytes() {
        this._maxResultBytes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxResultBytesInput() {
        return this._maxResultBytes;
    }
    get maxResultRows() {
        return this.getNumberAttribute('max_result_rows');
    }
    set maxResultRows(value) {
        this._maxResultRows = value;
    }
    resetMaxResultRows() {
        this._maxResultRows = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxResultRowsInput() {
        return this._maxResultRows;
    }
    get maxRowsInDistinct() {
        return this.getNumberAttribute('max_rows_in_distinct');
    }
    set maxRowsInDistinct(value) {
        this._maxRowsInDistinct = value;
    }
    resetMaxRowsInDistinct() {
        this._maxRowsInDistinct = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxRowsInDistinctInput() {
        return this._maxRowsInDistinct;
    }
    get maxRowsInJoin() {
        return this.getNumberAttribute('max_rows_in_join');
    }
    set maxRowsInJoin(value) {
        this._maxRowsInJoin = value;
    }
    resetMaxRowsInJoin() {
        this._maxRowsInJoin = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxRowsInJoinInput() {
        return this._maxRowsInJoin;
    }
    get maxRowsInSet() {
        return this.getNumberAttribute('max_rows_in_set');
    }
    set maxRowsInSet(value) {
        this._maxRowsInSet = value;
    }
    resetMaxRowsInSet() {
        this._maxRowsInSet = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxRowsInSetInput() {
        return this._maxRowsInSet;
    }
    get maxRowsToGroupBy() {
        return this.getNumberAttribute('max_rows_to_group_by');
    }
    set maxRowsToGroupBy(value) {
        this._maxRowsToGroupBy = value;
    }
    resetMaxRowsToGroupBy() {
        this._maxRowsToGroupBy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxRowsToGroupByInput() {
        return this._maxRowsToGroupBy;
    }
    get maxRowsToRead() {
        return this.getNumberAttribute('max_rows_to_read');
    }
    set maxRowsToRead(value) {
        this._maxRowsToRead = value;
    }
    resetMaxRowsToRead() {
        this._maxRowsToRead = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxRowsToReadInput() {
        return this._maxRowsToRead;
    }
    get maxRowsToSort() {
        return this.getNumberAttribute('max_rows_to_sort');
    }
    set maxRowsToSort(value) {
        this._maxRowsToSort = value;
    }
    resetMaxRowsToSort() {
        this._maxRowsToSort = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxRowsToSortInput() {
        return this._maxRowsToSort;
    }
    get maxRowsToTransfer() {
        return this.getNumberAttribute('max_rows_to_transfer');
    }
    set maxRowsToTransfer(value) {
        this._maxRowsToTransfer = value;
    }
    resetMaxRowsToTransfer() {
        this._maxRowsToTransfer = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxRowsToTransferInput() {
        return this._maxRowsToTransfer;
    }
    get maxTemporaryColumns() {
        return this.getNumberAttribute('max_temporary_columns');
    }
    set maxTemporaryColumns(value) {
        this._maxTemporaryColumns = value;
    }
    resetMaxTemporaryColumns() {
        this._maxTemporaryColumns = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxTemporaryColumnsInput() {
        return this._maxTemporaryColumns;
    }
    get maxTemporaryNonConstColumns() {
        return this.getNumberAttribute('max_temporary_non_const_columns');
    }
    set maxTemporaryNonConstColumns(value) {
        this._maxTemporaryNonConstColumns = value;
    }
    resetMaxTemporaryNonConstColumns() {
        this._maxTemporaryNonConstColumns = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxTemporaryNonConstColumnsInput() {
        return this._maxTemporaryNonConstColumns;
    }
    get maxThreads() {
        return this.getNumberAttribute('max_threads');
    }
    set maxThreads(value) {
        this._maxThreads = value;
    }
    resetMaxThreads() {
        this._maxThreads = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxThreadsInput() {
        return this._maxThreads;
    }
    get mergeTreeMaxBytesToUseCache() {
        return this.getNumberAttribute('merge_tree_max_bytes_to_use_cache');
    }
    set mergeTreeMaxBytesToUseCache(value) {
        this._mergeTreeMaxBytesToUseCache = value;
    }
    resetMergeTreeMaxBytesToUseCache() {
        this._mergeTreeMaxBytesToUseCache = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mergeTreeMaxBytesToUseCacheInput() {
        return this._mergeTreeMaxBytesToUseCache;
    }
    get mergeTreeMaxRowsToUseCache() {
        return this.getNumberAttribute('merge_tree_max_rows_to_use_cache');
    }
    set mergeTreeMaxRowsToUseCache(value) {
        this._mergeTreeMaxRowsToUseCache = value;
    }
    resetMergeTreeMaxRowsToUseCache() {
        this._mergeTreeMaxRowsToUseCache = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mergeTreeMaxRowsToUseCacheInput() {
        return this._mergeTreeMaxRowsToUseCache;
    }
    get mergeTreeMinBytesForConcurrentRead() {
        return this.getNumberAttribute('merge_tree_min_bytes_for_concurrent_read');
    }
    set mergeTreeMinBytesForConcurrentRead(value) {
        this._mergeTreeMinBytesForConcurrentRead = value;
    }
    resetMergeTreeMinBytesForConcurrentRead() {
        this._mergeTreeMinBytesForConcurrentRead = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mergeTreeMinBytesForConcurrentReadInput() {
        return this._mergeTreeMinBytesForConcurrentRead;
    }
    get mergeTreeMinRowsForConcurrentRead() {
        return this.getNumberAttribute('merge_tree_min_rows_for_concurrent_read');
    }
    set mergeTreeMinRowsForConcurrentRead(value) {
        this._mergeTreeMinRowsForConcurrentRead = value;
    }
    resetMergeTreeMinRowsForConcurrentRead() {
        this._mergeTreeMinRowsForConcurrentRead = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mergeTreeMinRowsForConcurrentReadInput() {
        return this._mergeTreeMinRowsForConcurrentRead;
    }
    get minBytesToUseDirectIo() {
        return this.getNumberAttribute('min_bytes_to_use_direct_io');
    }
    set minBytesToUseDirectIo(value) {
        this._minBytesToUseDirectIo = value;
    }
    resetMinBytesToUseDirectIo() {
        this._minBytesToUseDirectIo = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minBytesToUseDirectIoInput() {
        return this._minBytesToUseDirectIo;
    }
    get minCountToCompile() {
        return this.getNumberAttribute('min_count_to_compile');
    }
    set minCountToCompile(value) {
        this._minCountToCompile = value;
    }
    resetMinCountToCompile() {
        this._minCountToCompile = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minCountToCompileInput() {
        return this._minCountToCompile;
    }
    get minCountToCompileExpression() {
        return this.getNumberAttribute('min_count_to_compile_expression');
    }
    set minCountToCompileExpression(value) {
        this._minCountToCompileExpression = value;
    }
    resetMinCountToCompileExpression() {
        this._minCountToCompileExpression = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minCountToCompileExpressionInput() {
        return this._minCountToCompileExpression;
    }
    get minExecutionSpeed() {
        return this.getNumberAttribute('min_execution_speed');
    }
    set minExecutionSpeed(value) {
        this._minExecutionSpeed = value;
    }
    resetMinExecutionSpeed() {
        this._minExecutionSpeed = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minExecutionSpeedInput() {
        return this._minExecutionSpeed;
    }
    get minExecutionSpeedBytes() {
        return this.getNumberAttribute('min_execution_speed_bytes');
    }
    set minExecutionSpeedBytes(value) {
        this._minExecutionSpeedBytes = value;
    }
    resetMinExecutionSpeedBytes() {
        this._minExecutionSpeedBytes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minExecutionSpeedBytesInput() {
        return this._minExecutionSpeedBytes;
    }
    get minInsertBlockSizeBytes() {
        return this.getNumberAttribute('min_insert_block_size_bytes');
    }
    set minInsertBlockSizeBytes(value) {
        this._minInsertBlockSizeBytes = value;
    }
    resetMinInsertBlockSizeBytes() {
        this._minInsertBlockSizeBytes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minInsertBlockSizeBytesInput() {
        return this._minInsertBlockSizeBytes;
    }
    get minInsertBlockSizeRows() {
        return this.getNumberAttribute('min_insert_block_size_rows');
    }
    set minInsertBlockSizeRows(value) {
        this._minInsertBlockSizeRows = value;
    }
    resetMinInsertBlockSizeRows() {
        this._minInsertBlockSizeRows = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minInsertBlockSizeRowsInput() {
        return this._minInsertBlockSizeRows;
    }
    get outputFormatJsonQuote64BitIntegers() {
        return this.getBooleanAttribute('output_format_json_quote_64bit_integers');
    }
    set outputFormatJsonQuote64BitIntegers(value) {
        this._outputFormatJsonQuote64BitIntegers = value;
    }
    resetOutputFormatJsonQuote64BitIntegers() {
        this._outputFormatJsonQuote64BitIntegers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outputFormatJsonQuote64BitIntegersInput() {
        return this._outputFormatJsonQuote64BitIntegers;
    }
    get outputFormatJsonQuoteDenormals() {
        return this.getBooleanAttribute('output_format_json_quote_denormals');
    }
    set outputFormatJsonQuoteDenormals(value) {
        this._outputFormatJsonQuoteDenormals = value;
    }
    resetOutputFormatJsonQuoteDenormals() {
        this._outputFormatJsonQuoteDenormals = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outputFormatJsonQuoteDenormalsInput() {
        return this._outputFormatJsonQuoteDenormals;
    }
    get priority() {
        return this.getNumberAttribute('priority');
    }
    set priority(value) {
        this._priority = value;
    }
    resetPriority() {
        this._priority = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get priorityInput() {
        return this._priority;
    }
    get quotaMode() {
        return this.getStringAttribute('quota_mode');
    }
    set quotaMode(value) {
        this._quotaMode = value;
    }
    resetQuotaMode() {
        this._quotaMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get quotaModeInput() {
        return this._quotaMode;
    }
    get readOverflowMode() {
        return this.getStringAttribute('read_overflow_mode');
    }
    set readOverflowMode(value) {
        this._readOverflowMode = value;
    }
    resetReadOverflowMode() {
        this._readOverflowMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get readOverflowModeInput() {
        return this._readOverflowMode;
    }
    get readonly() {
        return this.getNumberAttribute('readonly');
    }
    set readonly(value) {
        this._readonly = value;
    }
    resetReadonly() {
        this._readonly = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get readonlyInput() {
        return this._readonly;
    }
    get receiveTimeout() {
        return this.getNumberAttribute('receive_timeout');
    }
    set receiveTimeout(value) {
        this._receiveTimeout = value;
    }
    resetReceiveTimeout() {
        this._receiveTimeout = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get receiveTimeoutInput() {
        return this._receiveTimeout;
    }
    get replicationAlterPartitionsSync() {
        return this.getNumberAttribute('replication_alter_partitions_sync');
    }
    set replicationAlterPartitionsSync(value) {
        this._replicationAlterPartitionsSync = value;
    }
    resetReplicationAlterPartitionsSync() {
        this._replicationAlterPartitionsSync = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replicationAlterPartitionsSyncInput() {
        return this._replicationAlterPartitionsSync;
    }
    get resultOverflowMode() {
        return this.getStringAttribute('result_overflow_mode');
    }
    set resultOverflowMode(value) {
        this._resultOverflowMode = value;
    }
    resetResultOverflowMode() {
        this._resultOverflowMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resultOverflowModeInput() {
        return this._resultOverflowMode;
    }
    get selectSequentialConsistency() {
        return this.getBooleanAttribute('select_sequential_consistency');
    }
    set selectSequentialConsistency(value) {
        this._selectSequentialConsistency = value;
    }
    resetSelectSequentialConsistency() {
        this._selectSequentialConsistency = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get selectSequentialConsistencyInput() {
        return this._selectSequentialConsistency;
    }
    get sendProgressInHttpHeaders() {
        return this.getBooleanAttribute('send_progress_in_http_headers');
    }
    set sendProgressInHttpHeaders(value) {
        this._sendProgressInHttpHeaders = value;
    }
    resetSendProgressInHttpHeaders() {
        this._sendProgressInHttpHeaders = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sendProgressInHttpHeadersInput() {
        return this._sendProgressInHttpHeaders;
    }
    get sendTimeout() {
        return this.getNumberAttribute('send_timeout');
    }
    set sendTimeout(value) {
        this._sendTimeout = value;
    }
    resetSendTimeout() {
        this._sendTimeout = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sendTimeoutInput() {
        return this._sendTimeout;
    }
    get setOverflowMode() {
        return this.getStringAttribute('set_overflow_mode');
    }
    set setOverflowMode(value) {
        this._setOverflowMode = value;
    }
    resetSetOverflowMode() {
        this._setOverflowMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get setOverflowModeInput() {
        return this._setOverflowMode;
    }
    get skipUnavailableShards() {
        return this.getBooleanAttribute('skip_unavailable_shards');
    }
    set skipUnavailableShards(value) {
        this._skipUnavailableShards = value;
    }
    resetSkipUnavailableShards() {
        this._skipUnavailableShards = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get skipUnavailableShardsInput() {
        return this._skipUnavailableShards;
    }
    get sortOverflowMode() {
        return this.getStringAttribute('sort_overflow_mode');
    }
    set sortOverflowMode(value) {
        this._sortOverflowMode = value;
    }
    resetSortOverflowMode() {
        this._sortOverflowMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sortOverflowModeInput() {
        return this._sortOverflowMode;
    }
    get timeoutOverflowMode() {
        return this.getStringAttribute('timeout_overflow_mode');
    }
    set timeoutOverflowMode(value) {
        this._timeoutOverflowMode = value;
    }
    resetTimeoutOverflowMode() {
        this._timeoutOverflowMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutOverflowModeInput() {
        return this._timeoutOverflowMode;
    }
    get transferOverflowMode() {
        return this.getStringAttribute('transfer_overflow_mode');
    }
    set transferOverflowMode(value) {
        this._transferOverflowMode = value;
    }
    resetTransferOverflowMode() {
        this._transferOverflowMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get transferOverflowModeInput() {
        return this._transferOverflowMode;
    }
    get transformNullIn() {
        return this.getBooleanAttribute('transform_null_in');
    }
    set transformNullIn(value) {
        this._transformNullIn = value;
    }
    resetTransformNullIn() {
        this._transformNullIn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get transformNullInInput() {
        return this._transformNullIn;
    }
    get useUncompressedCache() {
        return this.getBooleanAttribute('use_uncompressed_cache');
    }
    set useUncompressedCache(value) {
        this._useUncompressedCache = value;
    }
    resetUseUncompressedCache() {
        this._useUncompressedCache = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get useUncompressedCacheInput() {
        return this._useUncompressedCache;
    }
}
exports.MdbClickhouseClusterUserSettingsOutputReference = MdbClickhouseClusterUserSettingsOutputReference;
_12 = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterUserSettingsOutputReference[_12] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterUserSettingsOutputReference", version: "2.0.32" };
function mdbClickhouseClusterUserToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        password: cdktf.stringToTerraform(struct.password),
        permission: cdktf.listMapper(mdbClickhouseClusterUserPermissionToTerraform, true)(struct.permission),
        quota: cdktf.listMapper(mdbClickhouseClusterUserQuotaToTerraform, true)(struct.quota),
        settings: mdbClickhouseClusterUserSettingsToTerraform(struct.settings),
    };
}
exports.mdbClickhouseClusterUserToTerraform = mdbClickhouseClusterUserToTerraform;
class MdbClickhouseClusterUserOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // permission - computed: false, optional: true, required: false
        this._permission = new MdbClickhouseClusterUserPermissionList(this, "permission", true);
        // quota - computed: false, optional: true, required: false
        this._quota = new MdbClickhouseClusterUserQuotaList(this, "quota", true);
        // settings - computed: false, optional: true, required: false
        this._settings = new MdbClickhouseClusterUserSettingsOutputReference(this, "settings");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._password !== undefined) {
            hasAnyValues = true;
            internalValueResult.password = this._password;
        }
        if (this._permission?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.permission = this._permission?.internalValue;
        }
        if (this._quota?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.quota = this._quota?.internalValue;
        }
        if (this._settings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.settings = this._settings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._password = undefined;
            this._permission.internalValue = undefined;
            this._quota.internalValue = undefined;
            this._settings.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._password = value.password;
            this._permission.internalValue = value.permission;
            this._quota.internalValue = value.quota;
            this._settings.internalValue = value.settings;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get password() {
        return this.getStringAttribute('password');
    }
    set password(value) {
        this._password = value;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password;
    }
    get permission() {
        return this._permission;
    }
    putPermission(value) {
        this._permission.internalValue = value;
    }
    resetPermission() {
        this._permission.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get permissionInput() {
        return this._permission.internalValue;
    }
    get quota() {
        return this._quota;
    }
    putQuota(value) {
        this._quota.internalValue = value;
    }
    resetQuota() {
        this._quota.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get quotaInput() {
        return this._quota.internalValue;
    }
    get settings() {
        return this._settings;
    }
    putSettings(value) {
        this._settings.internalValue = value;
    }
    resetSettings() {
        this._settings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get settingsInput() {
        return this._settings.internalValue;
    }
}
exports.MdbClickhouseClusterUserOutputReference = MdbClickhouseClusterUserOutputReference;
_13 = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterUserOutputReference[_13] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterUserOutputReference", version: "2.0.32" };
class MdbClickhouseClusterUserList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MdbClickhouseClusterUserOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MdbClickhouseClusterUserList = MdbClickhouseClusterUserList;
_14 = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterUserList[_14] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterUserList", version: "2.0.32" };
function mdbClickhouseClusterZookeeperResourcesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        disk_size: cdktf.numberToTerraform(struct.diskSize),
        disk_type_id: cdktf.stringToTerraform(struct.diskTypeId),
        resource_preset_id: cdktf.stringToTerraform(struct.resourcePresetId),
    };
}
exports.mdbClickhouseClusterZookeeperResourcesToTerraform = mdbClickhouseClusterZookeeperResourcesToTerraform;
class MdbClickhouseClusterZookeeperResourcesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._diskSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskSize = this._diskSize;
        }
        if (this._diskTypeId !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskTypeId = this._diskTypeId;
        }
        if (this._resourcePresetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourcePresetId = this._resourcePresetId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._diskSize = undefined;
            this._diskTypeId = undefined;
            this._resourcePresetId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._diskSize = value.diskSize;
            this._diskTypeId = value.diskTypeId;
            this._resourcePresetId = value.resourcePresetId;
        }
    }
    get diskSize() {
        return this.getNumberAttribute('disk_size');
    }
    set diskSize(value) {
        this._diskSize = value;
    }
    resetDiskSize() {
        this._diskSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get diskSizeInput() {
        return this._diskSize;
    }
    get diskTypeId() {
        return this.getStringAttribute('disk_type_id');
    }
    set diskTypeId(value) {
        this._diskTypeId = value;
    }
    resetDiskTypeId() {
        this._diskTypeId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get diskTypeIdInput() {
        return this._diskTypeId;
    }
    get resourcePresetId() {
        return this.getStringAttribute('resource_preset_id');
    }
    set resourcePresetId(value) {
        this._resourcePresetId = value;
    }
    resetResourcePresetId() {
        this._resourcePresetId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourcePresetIdInput() {
        return this._resourcePresetId;
    }
}
exports.MdbClickhouseClusterZookeeperResourcesOutputReference = MdbClickhouseClusterZookeeperResourcesOutputReference;
_15 = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterZookeeperResourcesOutputReference[_15] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterZookeeperResourcesOutputReference", version: "2.0.32" };
function mdbClickhouseClusterZookeeperToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        resources: mdbClickhouseClusterZookeeperResourcesToTerraform(struct.resources),
    };
}
exports.mdbClickhouseClusterZookeeperToTerraform = mdbClickhouseClusterZookeeperToTerraform;
class MdbClickhouseClusterZookeeperOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // resources - computed: false, optional: true, required: false
        this._resources = new MdbClickhouseClusterZookeeperResourcesOutputReference(this, "resources");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._resources?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.resources = this._resources?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._resources.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._resources.internalValue = value.resources;
        }
    }
    get resources() {
        return this._resources;
    }
    putResources(value) {
        this._resources.internalValue = value;
    }
    resetResources() {
        this._resources.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourcesInput() {
        return this._resources.internalValue;
    }
}
exports.MdbClickhouseClusterZookeeperOutputReference = MdbClickhouseClusterZookeeperOutputReference;
_16 = JSII_RTTI_SYMBOL_1;
MdbClickhouseClusterZookeeperOutputReference[_16] = { fqn: "@cdktf/provider-yandex.MdbClickhouseClusterZookeeperOutputReference", version: "2.0.32" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/yandex/r/mdb_clickhouse_cluster yandex_mdb_clickhouse_cluster}
*/
class MdbClickhouseCluster extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/yandex/r/mdb_clickhouse_cluster yandex_mdb_clickhouse_cluster} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options MdbClickhouseClusterConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'yandex_mdb_clickhouse_cluster',
            terraformGeneratorMetadata: {
                providerName: 'yandex',
                providerVersion: '0.77.0',
                providerVersionConstraint: '~> 0.73'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // access - computed: false, optional: true, required: false
        this._access = new MdbClickhouseClusterAccessOutputReference(this, "access");
        // backup_window_start - computed: false, optional: true, required: false
        this._backupWindowStart = new MdbClickhouseClusterBackupWindowStartOutputReference(this, "backup_window_start");
        // clickhouse - computed: false, optional: false, required: true
        this._clickhouse = new MdbClickhouseClusterClickhouseOutputReference(this, "clickhouse");
        // cloud_storage - computed: false, optional: true, required: false
        this._cloudStorage = new MdbClickhouseClusterCloudStorageOutputReference(this, "cloud_storage");
        // database - computed: false, optional: true, required: false
        this._database = new MdbClickhouseClusterDatabaseList(this, "database", true);
        // format_schema - computed: false, optional: true, required: false
        this._formatSchema = new MdbClickhouseClusterFormatSchemaList(this, "format_schema", true);
        // host - computed: false, optional: false, required: true
        this._host = new MdbClickhouseClusterHostList(this, "host", false);
        // maintenance_window - computed: false, optional: true, required: false
        this._maintenanceWindow = new MdbClickhouseClusterMaintenanceWindowOutputReference(this, "maintenance_window");
        // ml_model - computed: false, optional: true, required: false
        this._mlModel = new MdbClickhouseClusterMlModelList(this, "ml_model", true);
        // shard_group - computed: false, optional: true, required: false
        this._shardGroup = new MdbClickhouseClusterShardGroupList(this, "shard_group", false);
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new MdbClickhouseClusterTimeoutsOutputReference(this, "timeouts");
        // user - computed: false, optional: true, required: false
        this._user = new MdbClickhouseClusterUserList(this, "user", true);
        // zookeeper - computed: false, optional: true, required: false
        this._zookeeper = new MdbClickhouseClusterZookeeperOutputReference(this, "zookeeper");
        this._adminPassword = config.adminPassword;
        this._copySchemaOnNewHosts = config.copySchemaOnNewHosts;
        this._deletionProtection = config.deletionProtection;
        this._description = config.description;
        this._embeddedKeeper = config.embeddedKeeper;
        this._environment = config.environment;
        this._folderId = config.folderId;
        this._id = config.id;
        this._labels = config.labels;
        this._name = config.name;
        this._networkId = config.networkId;
        this._securityGroupIds = config.securityGroupIds;
        this._serviceAccountId = config.serviceAccountId;
        this._sqlDatabaseManagement = config.sqlDatabaseManagement;
        this._sqlUserManagement = config.sqlUserManagement;
        this._version = config.version;
        this._access.internalValue = config.access;
        this._backupWindowStart.internalValue = config.backupWindowStart;
        this._clickhouse.internalValue = config.clickhouse;
        this._cloudStorage.internalValue = config.cloudStorage;
        this._database.internalValue = config.database;
        this._formatSchema.internalValue = config.formatSchema;
        this._host.internalValue = config.host;
        this._maintenanceWindow.internalValue = config.maintenanceWindow;
        this._mlModel.internalValue = config.mlModel;
        this._shardGroup.internalValue = config.shardGroup;
        this._timeouts.internalValue = config.timeouts;
        this._user.internalValue = config.user;
        this._zookeeper.internalValue = config.zookeeper;
    }
    get adminPassword() {
        return this.getStringAttribute('admin_password');
    }
    set adminPassword(value) {
        this._adminPassword = value;
    }
    resetAdminPassword() {
        this._adminPassword = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get adminPasswordInput() {
        return this._adminPassword;
    }
    get copySchemaOnNewHosts() {
        return this.getBooleanAttribute('copy_schema_on_new_hosts');
    }
    set copySchemaOnNewHosts(value) {
        this._copySchemaOnNewHosts = value;
    }
    resetCopySchemaOnNewHosts() {
        this._copySchemaOnNewHosts = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get copySchemaOnNewHostsInput() {
        return this._copySchemaOnNewHosts;
    }
    // created_at - computed: true, optional: false, required: false
    get createdAt() {
        return this.getStringAttribute('created_at');
    }
    get deletionProtection() {
        return this.getBooleanAttribute('deletion_protection');
    }
    set deletionProtection(value) {
        this._deletionProtection = value;
    }
    resetDeletionProtection() {
        this._deletionProtection = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deletionProtectionInput() {
        return this._deletionProtection;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get embeddedKeeper() {
        return this.getBooleanAttribute('embedded_keeper');
    }
    set embeddedKeeper(value) {
        this._embeddedKeeper = value;
    }
    resetEmbeddedKeeper() {
        this._embeddedKeeper = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get embeddedKeeperInput() {
        return this._embeddedKeeper;
    }
    get environment() {
        return this.getStringAttribute('environment');
    }
    set environment(value) {
        this._environment = value;
    }
    // Temporarily expose input value. Use with caution.
    get environmentInput() {
        return this._environment;
    }
    get folderId() {
        return this.getStringAttribute('folder_id');
    }
    set folderId(value) {
        this._folderId = value;
    }
    resetFolderId() {
        this._folderId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get folderIdInput() {
        return this._folderId;
    }
    // health - computed: true, optional: false, required: false
    get health() {
        return this.getStringAttribute('health');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get networkId() {
        return this.getStringAttribute('network_id');
    }
    set networkId(value) {
        this._networkId = value;
    }
    // Temporarily expose input value. Use with caution.
    get networkIdInput() {
        return this._networkId;
    }
    get securityGroupIds() {
        return cdktf.Fn.tolist(this.getListAttribute('security_group_ids'));
    }
    set securityGroupIds(value) {
        this._securityGroupIds = value;
    }
    resetSecurityGroupIds() {
        this._securityGroupIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityGroupIdsInput() {
        return this._securityGroupIds;
    }
    get serviceAccountId() {
        return this.getStringAttribute('service_account_id');
    }
    set serviceAccountId(value) {
        this._serviceAccountId = value;
    }
    resetServiceAccountId() {
        this._serviceAccountId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceAccountIdInput() {
        return this._serviceAccountId;
    }
    get sqlDatabaseManagement() {
        return this.getBooleanAttribute('sql_database_management');
    }
    set sqlDatabaseManagement(value) {
        this._sqlDatabaseManagement = value;
    }
    resetSqlDatabaseManagement() {
        this._sqlDatabaseManagement = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sqlDatabaseManagementInput() {
        return this._sqlDatabaseManagement;
    }
    get sqlUserManagement() {
        return this.getBooleanAttribute('sql_user_management');
    }
    set sqlUserManagement(value) {
        this._sqlUserManagement = value;
    }
    resetSqlUserManagement() {
        this._sqlUserManagement = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sqlUserManagementInput() {
        return this._sqlUserManagement;
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getStringAttribute('status');
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    resetVersion() {
        this._version = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
    get access() {
        return this._access;
    }
    putAccess(value) {
        this._access.internalValue = value;
    }
    resetAccess() {
        this._access.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessInput() {
        return this._access.internalValue;
    }
    get backupWindowStart() {
        return this._backupWindowStart;
    }
    putBackupWindowStart(value) {
        this._backupWindowStart.internalValue = value;
    }
    resetBackupWindowStart() {
        this._backupWindowStart.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backupWindowStartInput() {
        return this._backupWindowStart.internalValue;
    }
    get clickhouse() {
        return this._clickhouse;
    }
    putClickhouse(value) {
        this._clickhouse.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get clickhouseInput() {
        return this._clickhouse.internalValue;
    }
    get cloudStorage() {
        return this._cloudStorage;
    }
    putCloudStorage(value) {
        this._cloudStorage.internalValue = value;
    }
    resetCloudStorage() {
        this._cloudStorage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudStorageInput() {
        return this._cloudStorage.internalValue;
    }
    get database() {
        return this._database;
    }
    putDatabase(value) {
        this._database.internalValue = value;
    }
    resetDatabase() {
        this._database.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get databaseInput() {
        return this._database.internalValue;
    }
    get formatSchema() {
        return this._formatSchema;
    }
    putFormatSchema(value) {
        this._formatSchema.internalValue = value;
    }
    resetFormatSchema() {
        this._formatSchema.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get formatSchemaInput() {
        return this._formatSchema.internalValue;
    }
    get host() {
        return this._host;
    }
    putHost(value) {
        this._host.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get hostInput() {
        return this._host.internalValue;
    }
    get maintenanceWindow() {
        return this._maintenanceWindow;
    }
    putMaintenanceWindow(value) {
        this._maintenanceWindow.internalValue = value;
    }
    resetMaintenanceWindow() {
        this._maintenanceWindow.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maintenanceWindowInput() {
        return this._maintenanceWindow.internalValue;
    }
    get mlModel() {
        return this._mlModel;
    }
    putMlModel(value) {
        this._mlModel.internalValue = value;
    }
    resetMlModel() {
        this._mlModel.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mlModelInput() {
        return this._mlModel.internalValue;
    }
    get shardGroup() {
        return this._shardGroup;
    }
    putShardGroup(value) {
        this._shardGroup.internalValue = value;
    }
    resetShardGroup() {
        this._shardGroup.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get shardGroupInput() {
        return this._shardGroup.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    get user() {
        return this._user;
    }
    putUser(value) {
        this._user.internalValue = value;
    }
    resetUser() {
        this._user.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userInput() {
        return this._user.internalValue;
    }
    get zookeeper() {
        return this._zookeeper;
    }
    putZookeeper(value) {
        this._zookeeper.internalValue = value;
    }
    resetZookeeper() {
        this._zookeeper.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get zookeeperInput() {
        return this._zookeeper.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            admin_password: cdktf.stringToTerraform(this._adminPassword),
            copy_schema_on_new_hosts: cdktf.booleanToTerraform(this._copySchemaOnNewHosts),
            deletion_protection: cdktf.booleanToTerraform(this._deletionProtection),
            description: cdktf.stringToTerraform(this._description),
            embedded_keeper: cdktf.booleanToTerraform(this._embeddedKeeper),
            environment: cdktf.stringToTerraform(this._environment),
            folder_id: cdktf.stringToTerraform(this._folderId),
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            name: cdktf.stringToTerraform(this._name),
            network_id: cdktf.stringToTerraform(this._networkId),
            security_group_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(this._securityGroupIds),
            service_account_id: cdktf.stringToTerraform(this._serviceAccountId),
            sql_database_management: cdktf.booleanToTerraform(this._sqlDatabaseManagement),
            sql_user_management: cdktf.booleanToTerraform(this._sqlUserManagement),
            version: cdktf.stringToTerraform(this._version),
            access: mdbClickhouseClusterAccessToTerraform(this._access.internalValue),
            backup_window_start: mdbClickhouseClusterBackupWindowStartToTerraform(this._backupWindowStart.internalValue),
            clickhouse: mdbClickhouseClusterClickhouseToTerraform(this._clickhouse.internalValue),
            cloud_storage: mdbClickhouseClusterCloudStorageToTerraform(this._cloudStorage.internalValue),
            database: cdktf.listMapper(mdbClickhouseClusterDatabaseToTerraform, true)(this._database.internalValue),
            format_schema: cdktf.listMapper(mdbClickhouseClusterFormatSchemaToTerraform, true)(this._formatSchema.internalValue),
            host: cdktf.listMapper(mdbClickhouseClusterHostToTerraform, true)(this._host.internalValue),
            maintenance_window: mdbClickhouseClusterMaintenanceWindowToTerraform(this._maintenanceWindow.internalValue),
            ml_model: cdktf.listMapper(mdbClickhouseClusterMlModelToTerraform, true)(this._mlModel.internalValue),
            shard_group: cdktf.listMapper(mdbClickhouseClusterShardGroupToTerraform, true)(this._shardGroup.internalValue),
            timeouts: mdbClickhouseClusterTimeoutsToTerraform(this._timeouts.internalValue),
            user: cdktf.listMapper(mdbClickhouseClusterUserToTerraform, true)(this._user.internalValue),
            zookeeper: mdbClickhouseClusterZookeeperToTerraform(this._zookeeper.internalValue),
        };
    }
}
exports.MdbClickhouseCluster = MdbClickhouseCluster;
_17 = JSII_RTTI_SYMBOL_1;
MdbClickhouseCluster[_17] = { fqn: "@cdktf/provider-yandex.MdbClickhouseCluster", version: "2.0.32" };
// =================
// STATIC PROPERTIES
// =================
MdbClickhouseCluster.tfResourceType = "yandex_mdb_clickhouse_cluster";
//# sourceMappingURL=data:application/json;base64,