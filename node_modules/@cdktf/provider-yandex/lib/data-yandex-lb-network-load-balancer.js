"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataYandexLbNetworkLoadBalancer = exports.DataYandexLbNetworkLoadBalancerListenerList = exports.DataYandexLbNetworkLoadBalancerListenerOutputReference = exports.dataYandexLbNetworkLoadBalancerListenerToTerraform = exports.DataYandexLbNetworkLoadBalancerListenerInternalAddressSpecList = exports.DataYandexLbNetworkLoadBalancerListenerInternalAddressSpecOutputReference = exports.dataYandexLbNetworkLoadBalancerListenerInternalAddressSpecToTerraform = exports.DataYandexLbNetworkLoadBalancerListenerExternalAddressSpecList = exports.DataYandexLbNetworkLoadBalancerListenerExternalAddressSpecOutputReference = exports.dataYandexLbNetworkLoadBalancerListenerExternalAddressSpecToTerraform = exports.DataYandexLbNetworkLoadBalancerAttachedTargetGroupList = exports.DataYandexLbNetworkLoadBalancerAttachedTargetGroupOutputReference = exports.dataYandexLbNetworkLoadBalancerAttachedTargetGroupToTerraform = exports.DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckList = exports.DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckOutputReference = exports.dataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckToTerraform = exports.DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOptionsList = exports.DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOptionsOutputReference = exports.dataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOptionsToTerraform = exports.DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptionsList = exports.DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptionsOutputReference = exports.dataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptionsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function dataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptionsToTerraform = dataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptionsToTerraform;
class DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // path - computed: true, optional: false, required: false
    get path() {
        return this.getStringAttribute('path');
    }
    // port - computed: true, optional: false, required: false
    get port() {
        return this.getNumberAttribute('port');
    }
}
exports.DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptionsOutputReference = DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptionsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptionsOutputReference[_a] = { fqn: "@cdktf/provider-yandex.DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptionsOutputReference", version: "2.0.32" };
class DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptionsList = DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptionsList;
_b = JSII_RTTI_SYMBOL_1;
DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptionsList[_b] = { fqn: "@cdktf/provider-yandex.DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptionsList", version: "2.0.32" };
function dataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOptionsToTerraform = dataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOptionsToTerraform;
class DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // port - computed: true, optional: false, required: false
    get port() {
        return this.getNumberAttribute('port');
    }
}
exports.DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOptionsOutputReference = DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOptionsOutputReference;
_c = JSII_RTTI_SYMBOL_1;
DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOptionsOutputReference[_c] = { fqn: "@cdktf/provider-yandex.DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOptionsOutputReference", version: "2.0.32" };
class DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOptionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOptionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOptionsList = DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOptionsList;
_d = JSII_RTTI_SYMBOL_1;
DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOptionsList[_d] = { fqn: "@cdktf/provider-yandex.DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOptionsList", version: "2.0.32" };
function dataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckToTerraform = dataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckToTerraform;
class DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // http_options - computed: true, optional: false, required: false
        this._httpOptions = new DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptionsList(this, "http_options", false);
        // tcp_options - computed: true, optional: false, required: false
        this._tcpOptions = new DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOptionsList(this, "tcp_options", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // healthy_threshold - computed: true, optional: false, required: false
    get healthyThreshold() {
        return this.getNumberAttribute('healthy_threshold');
    }
    get httpOptions() {
        return this._httpOptions;
    }
    // interval - computed: true, optional: false, required: false
    get interval() {
        return this.getNumberAttribute('interval');
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get tcpOptions() {
        return this._tcpOptions;
    }
    // timeout - computed: true, optional: false, required: false
    get timeout() {
        return this.getNumberAttribute('timeout');
    }
    // unhealthy_threshold - computed: true, optional: false, required: false
    get unhealthyThreshold() {
        return this.getNumberAttribute('unhealthy_threshold');
    }
}
exports.DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckOutputReference = DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckOutputReference;
_e = JSII_RTTI_SYMBOL_1;
DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckOutputReference[_e] = { fqn: "@cdktf/provider-yandex.DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckOutputReference", version: "2.0.32" };
class DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckList = DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckList;
_f = JSII_RTTI_SYMBOL_1;
DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckList[_f] = { fqn: "@cdktf/provider-yandex.DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckList", version: "2.0.32" };
function dataYandexLbNetworkLoadBalancerAttachedTargetGroupToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataYandexLbNetworkLoadBalancerAttachedTargetGroupToTerraform = dataYandexLbNetworkLoadBalancerAttachedTargetGroupToTerraform;
class DataYandexLbNetworkLoadBalancerAttachedTargetGroupOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // healthcheck - computed: true, optional: false, required: false
        this._healthcheck = new DataYandexLbNetworkLoadBalancerAttachedTargetGroupHealthcheckList(this, "healthcheck", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    get healthcheck() {
        return this._healthcheck;
    }
    // target_group_id - computed: true, optional: false, required: false
    get targetGroupId() {
        return this.getStringAttribute('target_group_id');
    }
}
exports.DataYandexLbNetworkLoadBalancerAttachedTargetGroupOutputReference = DataYandexLbNetworkLoadBalancerAttachedTargetGroupOutputReference;
_g = JSII_RTTI_SYMBOL_1;
DataYandexLbNetworkLoadBalancerAttachedTargetGroupOutputReference[_g] = { fqn: "@cdktf/provider-yandex.DataYandexLbNetworkLoadBalancerAttachedTargetGroupOutputReference", version: "2.0.32" };
class DataYandexLbNetworkLoadBalancerAttachedTargetGroupList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataYandexLbNetworkLoadBalancerAttachedTargetGroupOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataYandexLbNetworkLoadBalancerAttachedTargetGroupList = DataYandexLbNetworkLoadBalancerAttachedTargetGroupList;
_h = JSII_RTTI_SYMBOL_1;
DataYandexLbNetworkLoadBalancerAttachedTargetGroupList[_h] = { fqn: "@cdktf/provider-yandex.DataYandexLbNetworkLoadBalancerAttachedTargetGroupList", version: "2.0.32" };
function dataYandexLbNetworkLoadBalancerListenerExternalAddressSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataYandexLbNetworkLoadBalancerListenerExternalAddressSpecToTerraform = dataYandexLbNetworkLoadBalancerListenerExternalAddressSpecToTerraform;
class DataYandexLbNetworkLoadBalancerListenerExternalAddressSpecOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // address - computed: true, optional: false, required: false
    get address() {
        return this.getStringAttribute('address');
    }
    // ip_version - computed: true, optional: false, required: false
    get ipVersion() {
        return this.getStringAttribute('ip_version');
    }
}
exports.DataYandexLbNetworkLoadBalancerListenerExternalAddressSpecOutputReference = DataYandexLbNetworkLoadBalancerListenerExternalAddressSpecOutputReference;
_j = JSII_RTTI_SYMBOL_1;
DataYandexLbNetworkLoadBalancerListenerExternalAddressSpecOutputReference[_j] = { fqn: "@cdktf/provider-yandex.DataYandexLbNetworkLoadBalancerListenerExternalAddressSpecOutputReference", version: "2.0.32" };
class DataYandexLbNetworkLoadBalancerListenerExternalAddressSpecList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataYandexLbNetworkLoadBalancerListenerExternalAddressSpecOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataYandexLbNetworkLoadBalancerListenerExternalAddressSpecList = DataYandexLbNetworkLoadBalancerListenerExternalAddressSpecList;
_k = JSII_RTTI_SYMBOL_1;
DataYandexLbNetworkLoadBalancerListenerExternalAddressSpecList[_k] = { fqn: "@cdktf/provider-yandex.DataYandexLbNetworkLoadBalancerListenerExternalAddressSpecList", version: "2.0.32" };
function dataYandexLbNetworkLoadBalancerListenerInternalAddressSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataYandexLbNetworkLoadBalancerListenerInternalAddressSpecToTerraform = dataYandexLbNetworkLoadBalancerListenerInternalAddressSpecToTerraform;
class DataYandexLbNetworkLoadBalancerListenerInternalAddressSpecOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // address - computed: true, optional: false, required: false
    get address() {
        return this.getStringAttribute('address');
    }
    // ip_version - computed: true, optional: false, required: false
    get ipVersion() {
        return this.getStringAttribute('ip_version');
    }
    // subnet_id - computed: true, optional: false, required: false
    get subnetId() {
        return this.getStringAttribute('subnet_id');
    }
}
exports.DataYandexLbNetworkLoadBalancerListenerInternalAddressSpecOutputReference = DataYandexLbNetworkLoadBalancerListenerInternalAddressSpecOutputReference;
_l = JSII_RTTI_SYMBOL_1;
DataYandexLbNetworkLoadBalancerListenerInternalAddressSpecOutputReference[_l] = { fqn: "@cdktf/provider-yandex.DataYandexLbNetworkLoadBalancerListenerInternalAddressSpecOutputReference", version: "2.0.32" };
class DataYandexLbNetworkLoadBalancerListenerInternalAddressSpecList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataYandexLbNetworkLoadBalancerListenerInternalAddressSpecOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataYandexLbNetworkLoadBalancerListenerInternalAddressSpecList = DataYandexLbNetworkLoadBalancerListenerInternalAddressSpecList;
_m = JSII_RTTI_SYMBOL_1;
DataYandexLbNetworkLoadBalancerListenerInternalAddressSpecList[_m] = { fqn: "@cdktf/provider-yandex.DataYandexLbNetworkLoadBalancerListenerInternalAddressSpecList", version: "2.0.32" };
function dataYandexLbNetworkLoadBalancerListenerToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataYandexLbNetworkLoadBalancerListenerToTerraform = dataYandexLbNetworkLoadBalancerListenerToTerraform;
class DataYandexLbNetworkLoadBalancerListenerOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // external_address_spec - computed: true, optional: false, required: false
        this._externalAddressSpec = new DataYandexLbNetworkLoadBalancerListenerExternalAddressSpecList(this, "external_address_spec", true);
        // internal_address_spec - computed: true, optional: false, required: false
        this._internalAddressSpec = new DataYandexLbNetworkLoadBalancerListenerInternalAddressSpecList(this, "internal_address_spec", true);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    get externalAddressSpec() {
        return this._externalAddressSpec;
    }
    get internalAddressSpec() {
        return this._internalAddressSpec;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    // port - computed: true, optional: false, required: false
    get port() {
        return this.getNumberAttribute('port');
    }
    // protocol - computed: true, optional: false, required: false
    get protocol() {
        return this.getStringAttribute('protocol');
    }
    // target_port - computed: true, optional: false, required: false
    get targetPort() {
        return this.getNumberAttribute('target_port');
    }
}
exports.DataYandexLbNetworkLoadBalancerListenerOutputReference = DataYandexLbNetworkLoadBalancerListenerOutputReference;
_o = JSII_RTTI_SYMBOL_1;
DataYandexLbNetworkLoadBalancerListenerOutputReference[_o] = { fqn: "@cdktf/provider-yandex.DataYandexLbNetworkLoadBalancerListenerOutputReference", version: "2.0.32" };
class DataYandexLbNetworkLoadBalancerListenerList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataYandexLbNetworkLoadBalancerListenerOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataYandexLbNetworkLoadBalancerListenerList = DataYandexLbNetworkLoadBalancerListenerList;
_p = JSII_RTTI_SYMBOL_1;
DataYandexLbNetworkLoadBalancerListenerList[_p] = { fqn: "@cdktf/provider-yandex.DataYandexLbNetworkLoadBalancerListenerList", version: "2.0.32" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/yandex/d/lb_network_load_balancer yandex_lb_network_load_balancer}
*/
class DataYandexLbNetworkLoadBalancer extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/yandex/d/lb_network_load_balancer yandex_lb_network_load_balancer} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataYandexLbNetworkLoadBalancerConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'yandex_lb_network_load_balancer',
            terraformGeneratorMetadata: {
                providerName: 'yandex',
                providerVersion: '0.77.0',
                providerVersionConstraint: '~> 0.73'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // ==========
        // ATTRIBUTES
        // ==========
        // attached_target_group - computed: true, optional: false, required: false
        this._attachedTargetGroup = new DataYandexLbNetworkLoadBalancerAttachedTargetGroupList(this, "attached_target_group", true);
        // labels - computed: true, optional: false, required: false
        this._labels = new cdktf.StringMap(this, "labels");
        // listener - computed: true, optional: false, required: false
        this._listener = new DataYandexLbNetworkLoadBalancerListenerList(this, "listener", true);
        this._folderId = config.folderId;
        this._id = config.id;
        this._name = config.name;
        this._networkLoadBalancerId = config.networkLoadBalancerId;
    }
    get attachedTargetGroup() {
        return this._attachedTargetGroup;
    }
    // created_at - computed: true, optional: false, required: false
    get createdAt() {
        return this.getStringAttribute('created_at');
    }
    // description - computed: true, optional: false, required: false
    get description() {
        return this.getStringAttribute('description');
    }
    get folderId() {
        return this.getStringAttribute('folder_id');
    }
    set folderId(value) {
        this._folderId = value;
    }
    resetFolderId() {
        this._folderId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get folderIdInput() {
        return this._folderId;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get labels() {
        return this._labels;
    }
    get listener() {
        return this._listener;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get networkLoadBalancerId() {
        return this.getStringAttribute('network_load_balancer_id');
    }
    set networkLoadBalancerId(value) {
        this._networkLoadBalancerId = value;
    }
    resetNetworkLoadBalancerId() {
        this._networkLoadBalancerId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkLoadBalancerIdInput() {
        return this._networkLoadBalancerId;
    }
    // region_id - computed: true, optional: false, required: false
    get regionId() {
        return this.getStringAttribute('region_id');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            folder_id: cdktf.stringToTerraform(this._folderId),
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            network_load_balancer_id: cdktf.stringToTerraform(this._networkLoadBalancerId),
        };
    }
}
exports.DataYandexLbNetworkLoadBalancer = DataYandexLbNetworkLoadBalancer;
_q = JSII_RTTI_SYMBOL_1;
DataYandexLbNetworkLoadBalancer[_q] = { fqn: "@cdktf/provider-yandex.DataYandexLbNetworkLoadBalancer", version: "2.0.32" };
// =================
// STATIC PROPERTIES
// =================
DataYandexLbNetworkLoadBalancer.tfResourceType = "yandex_lb_network_load_balancer";
//# sourceMappingURL=data:application/json;base64,