"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KubernetesNodeGroup = exports.KubernetesNodeGroupTimeoutsOutputReference = exports.kubernetesNodeGroupTimeoutsToTerraform = exports.KubernetesNodeGroupScalePolicyOutputReference = exports.kubernetesNodeGroupScalePolicyToTerraform = exports.KubernetesNodeGroupScalePolicyFixedScaleOutputReference = exports.kubernetesNodeGroupScalePolicyFixedScaleToTerraform = exports.KubernetesNodeGroupScalePolicyAutoScaleOutputReference = exports.kubernetesNodeGroupScalePolicyAutoScaleToTerraform = exports.KubernetesNodeGroupMaintenancePolicyOutputReference = exports.kubernetesNodeGroupMaintenancePolicyToTerraform = exports.KubernetesNodeGroupMaintenancePolicyMaintenanceWindowList = exports.KubernetesNodeGroupMaintenancePolicyMaintenanceWindowOutputReference = exports.kubernetesNodeGroupMaintenancePolicyMaintenanceWindowToTerraform = exports.KubernetesNodeGroupInstanceTemplateOutputReference = exports.kubernetesNodeGroupInstanceTemplateToTerraform = exports.KubernetesNodeGroupInstanceTemplateSchedulingPolicyOutputReference = exports.kubernetesNodeGroupInstanceTemplateSchedulingPolicyToTerraform = exports.KubernetesNodeGroupInstanceTemplateResourcesOutputReference = exports.kubernetesNodeGroupInstanceTemplateResourcesToTerraform = exports.KubernetesNodeGroupInstanceTemplatePlacementPolicyOutputReference = exports.kubernetesNodeGroupInstanceTemplatePlacementPolicyToTerraform = exports.KubernetesNodeGroupInstanceTemplateNetworkInterfaceList = exports.KubernetesNodeGroupInstanceTemplateNetworkInterfaceOutputReference = exports.kubernetesNodeGroupInstanceTemplateNetworkInterfaceToTerraform = exports.KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecordsList = exports.KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecordsOutputReference = exports.kubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecordsToTerraform = exports.KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecordsList = exports.KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecordsOutputReference = exports.kubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecordsToTerraform = exports.KubernetesNodeGroupInstanceTemplateContainerRuntimeOutputReference = exports.kubernetesNodeGroupInstanceTemplateContainerRuntimeToTerraform = exports.KubernetesNodeGroupInstanceTemplateBootDiskOutputReference = exports.kubernetesNodeGroupInstanceTemplateBootDiskToTerraform = exports.KubernetesNodeGroupDeployPolicyOutputReference = exports.kubernetesNodeGroupDeployPolicyToTerraform = exports.KubernetesNodeGroupAllocationPolicyOutputReference = exports.kubernetesNodeGroupAllocationPolicyToTerraform = exports.KubernetesNodeGroupAllocationPolicyLocationList = exports.KubernetesNodeGroupAllocationPolicyLocationOutputReference = exports.kubernetesNodeGroupAllocationPolicyLocationToTerraform = exports.KubernetesNodeGroupVersionInfoList = exports.KubernetesNodeGroupVersionInfoOutputReference = exports.kubernetesNodeGroupVersionInfoToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function kubernetesNodeGroupVersionInfoToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.kubernetesNodeGroupVersionInfoToTerraform = kubernetesNodeGroupVersionInfoToTerraform;
class KubernetesNodeGroupVersionInfoOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // current_version - computed: true, optional: false, required: false
    get currentVersion() {
        return this.getStringAttribute('current_version');
    }
    // new_revision_available - computed: true, optional: false, required: false
    get newRevisionAvailable() {
        return this.getBooleanAttribute('new_revision_available');
    }
    // new_revision_summary - computed: true, optional: false, required: false
    get newRevisionSummary() {
        return this.getStringAttribute('new_revision_summary');
    }
    // version_deprecated - computed: true, optional: false, required: false
    get versionDeprecated() {
        return this.getBooleanAttribute('version_deprecated');
    }
}
exports.KubernetesNodeGroupVersionInfoOutputReference = KubernetesNodeGroupVersionInfoOutputReference;
_a = JSII_RTTI_SYMBOL_1;
KubernetesNodeGroupVersionInfoOutputReference[_a] = { fqn: "@cdktf/provider-yandex.KubernetesNodeGroupVersionInfoOutputReference", version: "2.0.32" };
class KubernetesNodeGroupVersionInfoList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new KubernetesNodeGroupVersionInfoOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.KubernetesNodeGroupVersionInfoList = KubernetesNodeGroupVersionInfoList;
_b = JSII_RTTI_SYMBOL_1;
KubernetesNodeGroupVersionInfoList[_b] = { fqn: "@cdktf/provider-yandex.KubernetesNodeGroupVersionInfoList", version: "2.0.32" };
function kubernetesNodeGroupAllocationPolicyLocationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        subnet_id: cdktf.stringToTerraform(struct.subnetId),
        zone: cdktf.stringToTerraform(struct.zone),
    };
}
exports.kubernetesNodeGroupAllocationPolicyLocationToTerraform = kubernetesNodeGroupAllocationPolicyLocationToTerraform;
class KubernetesNodeGroupAllocationPolicyLocationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._subnetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetId = this._subnetId;
        }
        if (this._zone !== undefined) {
            hasAnyValues = true;
            internalValueResult.zone = this._zone;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._subnetId = undefined;
            this._zone = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._subnetId = value.subnetId;
            this._zone = value.zone;
        }
    }
    get subnetId() {
        return this.getStringAttribute('subnet_id');
    }
    set subnetId(value) {
        this._subnetId = value;
    }
    resetSubnetId() {
        this._subnetId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetIdInput() {
        return this._subnetId;
    }
    get zone() {
        return this.getStringAttribute('zone');
    }
    set zone(value) {
        this._zone = value;
    }
    resetZone() {
        this._zone = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get zoneInput() {
        return this._zone;
    }
}
exports.KubernetesNodeGroupAllocationPolicyLocationOutputReference = KubernetesNodeGroupAllocationPolicyLocationOutputReference;
_c = JSII_RTTI_SYMBOL_1;
KubernetesNodeGroupAllocationPolicyLocationOutputReference[_c] = { fqn: "@cdktf/provider-yandex.KubernetesNodeGroupAllocationPolicyLocationOutputReference", version: "2.0.32" };
class KubernetesNodeGroupAllocationPolicyLocationList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new KubernetesNodeGroupAllocationPolicyLocationOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.KubernetesNodeGroupAllocationPolicyLocationList = KubernetesNodeGroupAllocationPolicyLocationList;
_d = JSII_RTTI_SYMBOL_1;
KubernetesNodeGroupAllocationPolicyLocationList[_d] = { fqn: "@cdktf/provider-yandex.KubernetesNodeGroupAllocationPolicyLocationList", version: "2.0.32" };
function kubernetesNodeGroupAllocationPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        location: cdktf.listMapper(kubernetesNodeGroupAllocationPolicyLocationToTerraform, true)(struct.location),
    };
}
exports.kubernetesNodeGroupAllocationPolicyToTerraform = kubernetesNodeGroupAllocationPolicyToTerraform;
class KubernetesNodeGroupAllocationPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // location - computed: false, optional: true, required: false
        this._location = new KubernetesNodeGroupAllocationPolicyLocationList(this, "location", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._location?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.location = this._location?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._location.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._location.internalValue = value.location;
        }
    }
    get location() {
        return this._location;
    }
    putLocation(value) {
        this._location.internalValue = value;
    }
    resetLocation() {
        this._location.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location.internalValue;
    }
}
exports.KubernetesNodeGroupAllocationPolicyOutputReference = KubernetesNodeGroupAllocationPolicyOutputReference;
_e = JSII_RTTI_SYMBOL_1;
KubernetesNodeGroupAllocationPolicyOutputReference[_e] = { fqn: "@cdktf/provider-yandex.KubernetesNodeGroupAllocationPolicyOutputReference", version: "2.0.32" };
function kubernetesNodeGroupDeployPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_expansion: cdktf.numberToTerraform(struct.maxExpansion),
        max_unavailable: cdktf.numberToTerraform(struct.maxUnavailable),
    };
}
exports.kubernetesNodeGroupDeployPolicyToTerraform = kubernetesNodeGroupDeployPolicyToTerraform;
class KubernetesNodeGroupDeployPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxExpansion !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxExpansion = this._maxExpansion;
        }
        if (this._maxUnavailable !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxUnavailable = this._maxUnavailable;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maxExpansion = undefined;
            this._maxUnavailable = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maxExpansion = value.maxExpansion;
            this._maxUnavailable = value.maxUnavailable;
        }
    }
    get maxExpansion() {
        return this.getNumberAttribute('max_expansion');
    }
    set maxExpansion(value) {
        this._maxExpansion = value;
    }
    // Temporarily expose input value. Use with caution.
    get maxExpansionInput() {
        return this._maxExpansion;
    }
    get maxUnavailable() {
        return this.getNumberAttribute('max_unavailable');
    }
    set maxUnavailable(value) {
        this._maxUnavailable = value;
    }
    // Temporarily expose input value. Use with caution.
    get maxUnavailableInput() {
        return this._maxUnavailable;
    }
}
exports.KubernetesNodeGroupDeployPolicyOutputReference = KubernetesNodeGroupDeployPolicyOutputReference;
_f = JSII_RTTI_SYMBOL_1;
KubernetesNodeGroupDeployPolicyOutputReference[_f] = { fqn: "@cdktf/provider-yandex.KubernetesNodeGroupDeployPolicyOutputReference", version: "2.0.32" };
function kubernetesNodeGroupInstanceTemplateBootDiskToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        size: cdktf.numberToTerraform(struct.size),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.kubernetesNodeGroupInstanceTemplateBootDiskToTerraform = kubernetesNodeGroupInstanceTemplateBootDiskToTerraform;
class KubernetesNodeGroupInstanceTemplateBootDiskOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._size !== undefined) {
            hasAnyValues = true;
            internalValueResult.size = this._size;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._size = undefined;
            this._type = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._size = value.size;
            this._type = value.type;
        }
    }
    get size() {
        return this.getNumberAttribute('size');
    }
    set size(value) {
        this._size = value;
    }
    resetSize() {
        this._size = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sizeInput() {
        return this._size;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    resetType() {
        this._type = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
}
exports.KubernetesNodeGroupInstanceTemplateBootDiskOutputReference = KubernetesNodeGroupInstanceTemplateBootDiskOutputReference;
_g = JSII_RTTI_SYMBOL_1;
KubernetesNodeGroupInstanceTemplateBootDiskOutputReference[_g] = { fqn: "@cdktf/provider-yandex.KubernetesNodeGroupInstanceTemplateBootDiskOutputReference", version: "2.0.32" };
function kubernetesNodeGroupInstanceTemplateContainerRuntimeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.kubernetesNodeGroupInstanceTemplateContainerRuntimeToTerraform = kubernetesNodeGroupInstanceTemplateContainerRuntimeToTerraform;
class KubernetesNodeGroupInstanceTemplateContainerRuntimeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._type = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._type = value.type;
        }
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
}
exports.KubernetesNodeGroupInstanceTemplateContainerRuntimeOutputReference = KubernetesNodeGroupInstanceTemplateContainerRuntimeOutputReference;
_h = JSII_RTTI_SYMBOL_1;
KubernetesNodeGroupInstanceTemplateContainerRuntimeOutputReference[_h] = { fqn: "@cdktf/provider-yandex.KubernetesNodeGroupInstanceTemplateContainerRuntimeOutputReference", version: "2.0.32" };
function kubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecordsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dns_zone_id: cdktf.stringToTerraform(struct.dnsZoneId),
        fqdn: cdktf.stringToTerraform(struct.fqdn),
        ptr: cdktf.booleanToTerraform(struct.ptr),
        ttl: cdktf.numberToTerraform(struct.ttl),
    };
}
exports.kubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecordsToTerraform = kubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecordsToTerraform;
class KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecordsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dnsZoneId !== undefined) {
            hasAnyValues = true;
            internalValueResult.dnsZoneId = this._dnsZoneId;
        }
        if (this._fqdn !== undefined) {
            hasAnyValues = true;
            internalValueResult.fqdn = this._fqdn;
        }
        if (this._ptr !== undefined) {
            hasAnyValues = true;
            internalValueResult.ptr = this._ptr;
        }
        if (this._ttl !== undefined) {
            hasAnyValues = true;
            internalValueResult.ttl = this._ttl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._dnsZoneId = undefined;
            this._fqdn = undefined;
            this._ptr = undefined;
            this._ttl = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._dnsZoneId = value.dnsZoneId;
            this._fqdn = value.fqdn;
            this._ptr = value.ptr;
            this._ttl = value.ttl;
        }
    }
    get dnsZoneId() {
        return this.getStringAttribute('dns_zone_id');
    }
    set dnsZoneId(value) {
        this._dnsZoneId = value;
    }
    resetDnsZoneId() {
        this._dnsZoneId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dnsZoneIdInput() {
        return this._dnsZoneId;
    }
    get fqdn() {
        return this.getStringAttribute('fqdn');
    }
    set fqdn(value) {
        this._fqdn = value;
    }
    // Temporarily expose input value. Use with caution.
    get fqdnInput() {
        return this._fqdn;
    }
    get ptr() {
        return this.getBooleanAttribute('ptr');
    }
    set ptr(value) {
        this._ptr = value;
    }
    resetPtr() {
        this._ptr = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ptrInput() {
        return this._ptr;
    }
    get ttl() {
        return this.getNumberAttribute('ttl');
    }
    set ttl(value) {
        this._ttl = value;
    }
    resetTtl() {
        this._ttl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ttlInput() {
        return this._ttl;
    }
}
exports.KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecordsOutputReference = KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecordsOutputReference;
_j = JSII_RTTI_SYMBOL_1;
KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecordsOutputReference[_j] = { fqn: "@cdktf/provider-yandex.KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecordsOutputReference", version: "2.0.32" };
class KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecordsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecordsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecordsList = KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecordsList;
_k = JSII_RTTI_SYMBOL_1;
KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecordsList[_k] = { fqn: "@cdktf/provider-yandex.KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecordsList", version: "2.0.32" };
function kubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecordsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dns_zone_id: cdktf.stringToTerraform(struct.dnsZoneId),
        fqdn: cdktf.stringToTerraform(struct.fqdn),
        ptr: cdktf.booleanToTerraform(struct.ptr),
        ttl: cdktf.numberToTerraform(struct.ttl),
    };
}
exports.kubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecordsToTerraform = kubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecordsToTerraform;
class KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecordsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dnsZoneId !== undefined) {
            hasAnyValues = true;
            internalValueResult.dnsZoneId = this._dnsZoneId;
        }
        if (this._fqdn !== undefined) {
            hasAnyValues = true;
            internalValueResult.fqdn = this._fqdn;
        }
        if (this._ptr !== undefined) {
            hasAnyValues = true;
            internalValueResult.ptr = this._ptr;
        }
        if (this._ttl !== undefined) {
            hasAnyValues = true;
            internalValueResult.ttl = this._ttl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._dnsZoneId = undefined;
            this._fqdn = undefined;
            this._ptr = undefined;
            this._ttl = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._dnsZoneId = value.dnsZoneId;
            this._fqdn = value.fqdn;
            this._ptr = value.ptr;
            this._ttl = value.ttl;
        }
    }
    get dnsZoneId() {
        return this.getStringAttribute('dns_zone_id');
    }
    set dnsZoneId(value) {
        this._dnsZoneId = value;
    }
    resetDnsZoneId() {
        this._dnsZoneId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dnsZoneIdInput() {
        return this._dnsZoneId;
    }
    get fqdn() {
        return this.getStringAttribute('fqdn');
    }
    set fqdn(value) {
        this._fqdn = value;
    }
    // Temporarily expose input value. Use with caution.
    get fqdnInput() {
        return this._fqdn;
    }
    get ptr() {
        return this.getBooleanAttribute('ptr');
    }
    set ptr(value) {
        this._ptr = value;
    }
    resetPtr() {
        this._ptr = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ptrInput() {
        return this._ptr;
    }
    get ttl() {
        return this.getNumberAttribute('ttl');
    }
    set ttl(value) {
        this._ttl = value;
    }
    resetTtl() {
        this._ttl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ttlInput() {
        return this._ttl;
    }
}
exports.KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecordsOutputReference = KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecordsOutputReference;
_l = JSII_RTTI_SYMBOL_1;
KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecordsOutputReference[_l] = { fqn: "@cdktf/provider-yandex.KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecordsOutputReference", version: "2.0.32" };
class KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecordsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecordsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecordsList = KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecordsList;
_m = JSII_RTTI_SYMBOL_1;
KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecordsList[_m] = { fqn: "@cdktf/provider-yandex.KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecordsList", version: "2.0.32" };
function kubernetesNodeGroupInstanceTemplateNetworkInterfaceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ipv4: cdktf.booleanToTerraform(struct.ipv4),
        ipv6: cdktf.booleanToTerraform(struct.ipv6),
        nat: cdktf.booleanToTerraform(struct.nat),
        security_group_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.securityGroupIds),
        subnet_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.subnetIds),
        ipv4_dns_records: cdktf.listMapper(kubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecordsToTerraform, true)(struct.ipv4DnsRecords),
        ipv6_dns_records: cdktf.listMapper(kubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecordsToTerraform, true)(struct.ipv6DnsRecords),
    };
}
exports.kubernetesNodeGroupInstanceTemplateNetworkInterfaceToTerraform = kubernetesNodeGroupInstanceTemplateNetworkInterfaceToTerraform;
class KubernetesNodeGroupInstanceTemplateNetworkInterfaceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // ipv4_dns_records - computed: false, optional: true, required: false
        this._ipv4DnsRecords = new KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecordsList(this, "ipv4_dns_records", false);
        // ipv6_dns_records - computed: false, optional: true, required: false
        this._ipv6DnsRecords = new KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecordsList(this, "ipv6_dns_records", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._ipv4 !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipv4 = this._ipv4;
        }
        if (this._ipv6 !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipv6 = this._ipv6;
        }
        if (this._nat !== undefined) {
            hasAnyValues = true;
            internalValueResult.nat = this._nat;
        }
        if (this._securityGroupIds !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityGroupIds = this._securityGroupIds;
        }
        if (this._subnetIds !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetIds = this._subnetIds;
        }
        if (this._ipv4DnsRecords?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipv4DnsRecords = this._ipv4DnsRecords?.internalValue;
        }
        if (this._ipv6DnsRecords?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipv6DnsRecords = this._ipv6DnsRecords?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._ipv4 = undefined;
            this._ipv6 = undefined;
            this._nat = undefined;
            this._securityGroupIds = undefined;
            this._subnetIds = undefined;
            this._ipv4DnsRecords.internalValue = undefined;
            this._ipv6DnsRecords.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._ipv4 = value.ipv4;
            this._ipv6 = value.ipv6;
            this._nat = value.nat;
            this._securityGroupIds = value.securityGroupIds;
            this._subnetIds = value.subnetIds;
            this._ipv4DnsRecords.internalValue = value.ipv4DnsRecords;
            this._ipv6DnsRecords.internalValue = value.ipv6DnsRecords;
        }
    }
    get ipv4() {
        return this.getBooleanAttribute('ipv4');
    }
    set ipv4(value) {
        this._ipv4 = value;
    }
    resetIpv4() {
        this._ipv4 = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipv4Input() {
        return this._ipv4;
    }
    get ipv6() {
        return this.getBooleanAttribute('ipv6');
    }
    set ipv6(value) {
        this._ipv6 = value;
    }
    resetIpv6() {
        this._ipv6 = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipv6Input() {
        return this._ipv6;
    }
    get nat() {
        return this.getBooleanAttribute('nat');
    }
    set nat(value) {
        this._nat = value;
    }
    resetNat() {
        this._nat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get natInput() {
        return this._nat;
    }
    get securityGroupIds() {
        return cdktf.Fn.tolist(this.getListAttribute('security_group_ids'));
    }
    set securityGroupIds(value) {
        this._securityGroupIds = value;
    }
    resetSecurityGroupIds() {
        this._securityGroupIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityGroupIdsInput() {
        return this._securityGroupIds;
    }
    get subnetIds() {
        return cdktf.Fn.tolist(this.getListAttribute('subnet_ids'));
    }
    set subnetIds(value) {
        this._subnetIds = value;
    }
    // Temporarily expose input value. Use with caution.
    get subnetIdsInput() {
        return this._subnetIds;
    }
    get ipv4DnsRecords() {
        return this._ipv4DnsRecords;
    }
    putIpv4DnsRecords(value) {
        this._ipv4DnsRecords.internalValue = value;
    }
    resetIpv4DnsRecords() {
        this._ipv4DnsRecords.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipv4DnsRecordsInput() {
        return this._ipv4DnsRecords.internalValue;
    }
    get ipv6DnsRecords() {
        return this._ipv6DnsRecords;
    }
    putIpv6DnsRecords(value) {
        this._ipv6DnsRecords.internalValue = value;
    }
    resetIpv6DnsRecords() {
        this._ipv6DnsRecords.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipv6DnsRecordsInput() {
        return this._ipv6DnsRecords.internalValue;
    }
}
exports.KubernetesNodeGroupInstanceTemplateNetworkInterfaceOutputReference = KubernetesNodeGroupInstanceTemplateNetworkInterfaceOutputReference;
_o = JSII_RTTI_SYMBOL_1;
KubernetesNodeGroupInstanceTemplateNetworkInterfaceOutputReference[_o] = { fqn: "@cdktf/provider-yandex.KubernetesNodeGroupInstanceTemplateNetworkInterfaceOutputReference", version: "2.0.32" };
class KubernetesNodeGroupInstanceTemplateNetworkInterfaceList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new KubernetesNodeGroupInstanceTemplateNetworkInterfaceOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.KubernetesNodeGroupInstanceTemplateNetworkInterfaceList = KubernetesNodeGroupInstanceTemplateNetworkInterfaceList;
_p = JSII_RTTI_SYMBOL_1;
KubernetesNodeGroupInstanceTemplateNetworkInterfaceList[_p] = { fqn: "@cdktf/provider-yandex.KubernetesNodeGroupInstanceTemplateNetworkInterfaceList", version: "2.0.32" };
function kubernetesNodeGroupInstanceTemplatePlacementPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        placement_group_id: cdktf.stringToTerraform(struct.placementGroupId),
    };
}
exports.kubernetesNodeGroupInstanceTemplatePlacementPolicyToTerraform = kubernetesNodeGroupInstanceTemplatePlacementPolicyToTerraform;
class KubernetesNodeGroupInstanceTemplatePlacementPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._placementGroupId !== undefined) {
            hasAnyValues = true;
            internalValueResult.placementGroupId = this._placementGroupId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._placementGroupId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._placementGroupId = value.placementGroupId;
        }
    }
    get placementGroupId() {
        return this.getStringAttribute('placement_group_id');
    }
    set placementGroupId(value) {
        this._placementGroupId = value;
    }
    // Temporarily expose input value. Use with caution.
    get placementGroupIdInput() {
        return this._placementGroupId;
    }
}
exports.KubernetesNodeGroupInstanceTemplatePlacementPolicyOutputReference = KubernetesNodeGroupInstanceTemplatePlacementPolicyOutputReference;
_q = JSII_RTTI_SYMBOL_1;
KubernetesNodeGroupInstanceTemplatePlacementPolicyOutputReference[_q] = { fqn: "@cdktf/provider-yandex.KubernetesNodeGroupInstanceTemplatePlacementPolicyOutputReference", version: "2.0.32" };
function kubernetesNodeGroupInstanceTemplateResourcesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        core_fraction: cdktf.numberToTerraform(struct.coreFraction),
        cores: cdktf.numberToTerraform(struct.cores),
        gpus: cdktf.numberToTerraform(struct.gpus),
        memory: cdktf.numberToTerraform(struct.memory),
    };
}
exports.kubernetesNodeGroupInstanceTemplateResourcesToTerraform = kubernetesNodeGroupInstanceTemplateResourcesToTerraform;
class KubernetesNodeGroupInstanceTemplateResourcesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._coreFraction !== undefined) {
            hasAnyValues = true;
            internalValueResult.coreFraction = this._coreFraction;
        }
        if (this._cores !== undefined) {
            hasAnyValues = true;
            internalValueResult.cores = this._cores;
        }
        if (this._gpus !== undefined) {
            hasAnyValues = true;
            internalValueResult.gpus = this._gpus;
        }
        if (this._memory !== undefined) {
            hasAnyValues = true;
            internalValueResult.memory = this._memory;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._coreFraction = undefined;
            this._cores = undefined;
            this._gpus = undefined;
            this._memory = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._coreFraction = value.coreFraction;
            this._cores = value.cores;
            this._gpus = value.gpus;
            this._memory = value.memory;
        }
    }
    get coreFraction() {
        return this.getNumberAttribute('core_fraction');
    }
    set coreFraction(value) {
        this._coreFraction = value;
    }
    resetCoreFraction() {
        this._coreFraction = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get coreFractionInput() {
        return this._coreFraction;
    }
    get cores() {
        return this.getNumberAttribute('cores');
    }
    set cores(value) {
        this._cores = value;
    }
    resetCores() {
        this._cores = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get coresInput() {
        return this._cores;
    }
    get gpus() {
        return this.getNumberAttribute('gpus');
    }
    set gpus(value) {
        this._gpus = value;
    }
    resetGpus() {
        this._gpus = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gpusInput() {
        return this._gpus;
    }
    get memory() {
        return this.getNumberAttribute('memory');
    }
    set memory(value) {
        this._memory = value;
    }
    resetMemory() {
        this._memory = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get memoryInput() {
        return this._memory;
    }
}
exports.KubernetesNodeGroupInstanceTemplateResourcesOutputReference = KubernetesNodeGroupInstanceTemplateResourcesOutputReference;
_r = JSII_RTTI_SYMBOL_1;
KubernetesNodeGroupInstanceTemplateResourcesOutputReference[_r] = { fqn: "@cdktf/provider-yandex.KubernetesNodeGroupInstanceTemplateResourcesOutputReference", version: "2.0.32" };
function kubernetesNodeGroupInstanceTemplateSchedulingPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        preemptible: cdktf.booleanToTerraform(struct.preemptible),
    };
}
exports.kubernetesNodeGroupInstanceTemplateSchedulingPolicyToTerraform = kubernetesNodeGroupInstanceTemplateSchedulingPolicyToTerraform;
class KubernetesNodeGroupInstanceTemplateSchedulingPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._preemptible !== undefined) {
            hasAnyValues = true;
            internalValueResult.preemptible = this._preemptible;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._preemptible = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._preemptible = value.preemptible;
        }
    }
    get preemptible() {
        return this.getBooleanAttribute('preemptible');
    }
    set preemptible(value) {
        this._preemptible = value;
    }
    resetPreemptible() {
        this._preemptible = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get preemptibleInput() {
        return this._preemptible;
    }
}
exports.KubernetesNodeGroupInstanceTemplateSchedulingPolicyOutputReference = KubernetesNodeGroupInstanceTemplateSchedulingPolicyOutputReference;
_s = JSII_RTTI_SYMBOL_1;
KubernetesNodeGroupInstanceTemplateSchedulingPolicyOutputReference[_s] = { fqn: "@cdktf/provider-yandex.KubernetesNodeGroupInstanceTemplateSchedulingPolicyOutputReference", version: "2.0.32" };
function kubernetesNodeGroupInstanceTemplateToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        labels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.labels),
        metadata: cdktf.hashMapper(cdktf.stringToTerraform)(struct.metadata),
        name: cdktf.stringToTerraform(struct.name),
        nat: cdktf.booleanToTerraform(struct.nat),
        network_acceleration_type: cdktf.stringToTerraform(struct.networkAccelerationType),
        platform_id: cdktf.stringToTerraform(struct.platformId),
        boot_disk: kubernetesNodeGroupInstanceTemplateBootDiskToTerraform(struct.bootDisk),
        container_runtime: kubernetesNodeGroupInstanceTemplateContainerRuntimeToTerraform(struct.containerRuntime),
        network_interface: cdktf.listMapper(kubernetesNodeGroupInstanceTemplateNetworkInterfaceToTerraform, true)(struct.networkInterface),
        placement_policy: kubernetesNodeGroupInstanceTemplatePlacementPolicyToTerraform(struct.placementPolicy),
        resources: kubernetesNodeGroupInstanceTemplateResourcesToTerraform(struct.resources),
        scheduling_policy: kubernetesNodeGroupInstanceTemplateSchedulingPolicyToTerraform(struct.schedulingPolicy),
    };
}
exports.kubernetesNodeGroupInstanceTemplateToTerraform = kubernetesNodeGroupInstanceTemplateToTerraform;
class KubernetesNodeGroupInstanceTemplateOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // boot_disk - computed: false, optional: true, required: false
        this._bootDisk = new KubernetesNodeGroupInstanceTemplateBootDiskOutputReference(this, "boot_disk");
        // container_runtime - computed: false, optional: true, required: false
        this._containerRuntime = new KubernetesNodeGroupInstanceTemplateContainerRuntimeOutputReference(this, "container_runtime");
        // network_interface - computed: false, optional: true, required: false
        this._networkInterface = new KubernetesNodeGroupInstanceTemplateNetworkInterfaceList(this, "network_interface", false);
        // placement_policy - computed: false, optional: true, required: false
        this._placementPolicy = new KubernetesNodeGroupInstanceTemplatePlacementPolicyOutputReference(this, "placement_policy");
        // resources - computed: false, optional: true, required: false
        this._resources = new KubernetesNodeGroupInstanceTemplateResourcesOutputReference(this, "resources");
        // scheduling_policy - computed: false, optional: true, required: false
        this._schedulingPolicy = new KubernetesNodeGroupInstanceTemplateSchedulingPolicyOutputReference(this, "scheduling_policy");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._labels !== undefined) {
            hasAnyValues = true;
            internalValueResult.labels = this._labels;
        }
        if (this._metadata !== undefined) {
            hasAnyValues = true;
            internalValueResult.metadata = this._metadata;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._nat !== undefined) {
            hasAnyValues = true;
            internalValueResult.nat = this._nat;
        }
        if (this._networkAccelerationType !== undefined) {
            hasAnyValues = true;
            internalValueResult.networkAccelerationType = this._networkAccelerationType;
        }
        if (this._platformId !== undefined) {
            hasAnyValues = true;
            internalValueResult.platformId = this._platformId;
        }
        if (this._bootDisk?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.bootDisk = this._bootDisk?.internalValue;
        }
        if (this._containerRuntime?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.containerRuntime = this._containerRuntime?.internalValue;
        }
        if (this._networkInterface?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.networkInterface = this._networkInterface?.internalValue;
        }
        if (this._placementPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.placementPolicy = this._placementPolicy?.internalValue;
        }
        if (this._resources?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.resources = this._resources?.internalValue;
        }
        if (this._schedulingPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.schedulingPolicy = this._schedulingPolicy?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._labels = undefined;
            this._metadata = undefined;
            this._name = undefined;
            this._nat = undefined;
            this._networkAccelerationType = undefined;
            this._platformId = undefined;
            this._bootDisk.internalValue = undefined;
            this._containerRuntime.internalValue = undefined;
            this._networkInterface.internalValue = undefined;
            this._placementPolicy.internalValue = undefined;
            this._resources.internalValue = undefined;
            this._schedulingPolicy.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._labels = value.labels;
            this._metadata = value.metadata;
            this._name = value.name;
            this._nat = value.nat;
            this._networkAccelerationType = value.networkAccelerationType;
            this._platformId = value.platformId;
            this._bootDisk.internalValue = value.bootDisk;
            this._containerRuntime.internalValue = value.containerRuntime;
            this._networkInterface.internalValue = value.networkInterface;
            this._placementPolicy.internalValue = value.placementPolicy;
            this._resources.internalValue = value.resources;
            this._schedulingPolicy.internalValue = value.schedulingPolicy;
        }
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get metadata() {
        return this.getStringMapAttribute('metadata');
    }
    set metadata(value) {
        this._metadata = value;
    }
    resetMetadata() {
        this._metadata = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metadataInput() {
        return this._metadata;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get nat() {
        return this.getBooleanAttribute('nat');
    }
    set nat(value) {
        this._nat = value;
    }
    resetNat() {
        this._nat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get natInput() {
        return this._nat;
    }
    get networkAccelerationType() {
        return this.getStringAttribute('network_acceleration_type');
    }
    set networkAccelerationType(value) {
        this._networkAccelerationType = value;
    }
    resetNetworkAccelerationType() {
        this._networkAccelerationType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkAccelerationTypeInput() {
        return this._networkAccelerationType;
    }
    get platformId() {
        return this.getStringAttribute('platform_id');
    }
    set platformId(value) {
        this._platformId = value;
    }
    resetPlatformId() {
        this._platformId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get platformIdInput() {
        return this._platformId;
    }
    get bootDisk() {
        return this._bootDisk;
    }
    putBootDisk(value) {
        this._bootDisk.internalValue = value;
    }
    resetBootDisk() {
        this._bootDisk.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bootDiskInput() {
        return this._bootDisk.internalValue;
    }
    get containerRuntime() {
        return this._containerRuntime;
    }
    putContainerRuntime(value) {
        this._containerRuntime.internalValue = value;
    }
    resetContainerRuntime() {
        this._containerRuntime.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get containerRuntimeInput() {
        return this._containerRuntime.internalValue;
    }
    get networkInterface() {
        return this._networkInterface;
    }
    putNetworkInterface(value) {
        this._networkInterface.internalValue = value;
    }
    resetNetworkInterface() {
        this._networkInterface.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkInterfaceInput() {
        return this._networkInterface.internalValue;
    }
    get placementPolicy() {
        return this._placementPolicy;
    }
    putPlacementPolicy(value) {
        this._placementPolicy.internalValue = value;
    }
    resetPlacementPolicy() {
        this._placementPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get placementPolicyInput() {
        return this._placementPolicy.internalValue;
    }
    get resources() {
        return this._resources;
    }
    putResources(value) {
        this._resources.internalValue = value;
    }
    resetResources() {
        this._resources.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourcesInput() {
        return this._resources.internalValue;
    }
    get schedulingPolicy() {
        return this._schedulingPolicy;
    }
    putSchedulingPolicy(value) {
        this._schedulingPolicy.internalValue = value;
    }
    resetSchedulingPolicy() {
        this._schedulingPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get schedulingPolicyInput() {
        return this._schedulingPolicy.internalValue;
    }
}
exports.KubernetesNodeGroupInstanceTemplateOutputReference = KubernetesNodeGroupInstanceTemplateOutputReference;
_t = JSII_RTTI_SYMBOL_1;
KubernetesNodeGroupInstanceTemplateOutputReference[_t] = { fqn: "@cdktf/provider-yandex.KubernetesNodeGroupInstanceTemplateOutputReference", version: "2.0.32" };
function kubernetesNodeGroupMaintenancePolicyMaintenanceWindowToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        day: cdktf.stringToTerraform(struct.day),
        duration: cdktf.stringToTerraform(struct.duration),
        start_time: cdktf.stringToTerraform(struct.startTime),
    };
}
exports.kubernetesNodeGroupMaintenancePolicyMaintenanceWindowToTerraform = kubernetesNodeGroupMaintenancePolicyMaintenanceWindowToTerraform;
class KubernetesNodeGroupMaintenancePolicyMaintenanceWindowOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._day !== undefined) {
            hasAnyValues = true;
            internalValueResult.day = this._day;
        }
        if (this._duration !== undefined) {
            hasAnyValues = true;
            internalValueResult.duration = this._duration;
        }
        if (this._startTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.startTime = this._startTime;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._day = undefined;
            this._duration = undefined;
            this._startTime = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._day = value.day;
            this._duration = value.duration;
            this._startTime = value.startTime;
        }
    }
    get day() {
        return this.getStringAttribute('day');
    }
    set day(value) {
        this._day = value;
    }
    resetDay() {
        this._day = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dayInput() {
        return this._day;
    }
    get duration() {
        return this.getStringAttribute('duration');
    }
    set duration(value) {
        this._duration = value;
    }
    // Temporarily expose input value. Use with caution.
    get durationInput() {
        return this._duration;
    }
    get startTime() {
        return this.getStringAttribute('start_time');
    }
    set startTime(value) {
        this._startTime = value;
    }
    // Temporarily expose input value. Use with caution.
    get startTimeInput() {
        return this._startTime;
    }
}
exports.KubernetesNodeGroupMaintenancePolicyMaintenanceWindowOutputReference = KubernetesNodeGroupMaintenancePolicyMaintenanceWindowOutputReference;
_u = JSII_RTTI_SYMBOL_1;
KubernetesNodeGroupMaintenancePolicyMaintenanceWindowOutputReference[_u] = { fqn: "@cdktf/provider-yandex.KubernetesNodeGroupMaintenancePolicyMaintenanceWindowOutputReference", version: "2.0.32" };
class KubernetesNodeGroupMaintenancePolicyMaintenanceWindowList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new KubernetesNodeGroupMaintenancePolicyMaintenanceWindowOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.KubernetesNodeGroupMaintenancePolicyMaintenanceWindowList = KubernetesNodeGroupMaintenancePolicyMaintenanceWindowList;
_v = JSII_RTTI_SYMBOL_1;
KubernetesNodeGroupMaintenancePolicyMaintenanceWindowList[_v] = { fqn: "@cdktf/provider-yandex.KubernetesNodeGroupMaintenancePolicyMaintenanceWindowList", version: "2.0.32" };
function kubernetesNodeGroupMaintenancePolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auto_repair: cdktf.booleanToTerraform(struct.autoRepair),
        auto_upgrade: cdktf.booleanToTerraform(struct.autoUpgrade),
        maintenance_window: cdktf.listMapper(kubernetesNodeGroupMaintenancePolicyMaintenanceWindowToTerraform, true)(struct.maintenanceWindow),
    };
}
exports.kubernetesNodeGroupMaintenancePolicyToTerraform = kubernetesNodeGroupMaintenancePolicyToTerraform;
class KubernetesNodeGroupMaintenancePolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // maintenance_window - computed: false, optional: true, required: false
        this._maintenanceWindow = new KubernetesNodeGroupMaintenancePolicyMaintenanceWindowList(this, "maintenance_window", true);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._autoRepair !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoRepair = this._autoRepair;
        }
        if (this._autoUpgrade !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoUpgrade = this._autoUpgrade;
        }
        if (this._maintenanceWindow?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.maintenanceWindow = this._maintenanceWindow?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._autoRepair = undefined;
            this._autoUpgrade = undefined;
            this._maintenanceWindow.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._autoRepair = value.autoRepair;
            this._autoUpgrade = value.autoUpgrade;
            this._maintenanceWindow.internalValue = value.maintenanceWindow;
        }
    }
    get autoRepair() {
        return this.getBooleanAttribute('auto_repair');
    }
    set autoRepair(value) {
        this._autoRepair = value;
    }
    // Temporarily expose input value. Use with caution.
    get autoRepairInput() {
        return this._autoRepair;
    }
    get autoUpgrade() {
        return this.getBooleanAttribute('auto_upgrade');
    }
    set autoUpgrade(value) {
        this._autoUpgrade = value;
    }
    // Temporarily expose input value. Use with caution.
    get autoUpgradeInput() {
        return this._autoUpgrade;
    }
    get maintenanceWindow() {
        return this._maintenanceWindow;
    }
    putMaintenanceWindow(value) {
        this._maintenanceWindow.internalValue = value;
    }
    resetMaintenanceWindow() {
        this._maintenanceWindow.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maintenanceWindowInput() {
        return this._maintenanceWindow.internalValue;
    }
}
exports.KubernetesNodeGroupMaintenancePolicyOutputReference = KubernetesNodeGroupMaintenancePolicyOutputReference;
_w = JSII_RTTI_SYMBOL_1;
KubernetesNodeGroupMaintenancePolicyOutputReference[_w] = { fqn: "@cdktf/provider-yandex.KubernetesNodeGroupMaintenancePolicyOutputReference", version: "2.0.32" };
function kubernetesNodeGroupScalePolicyAutoScaleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        initial: cdktf.numberToTerraform(struct.initial),
        max: cdktf.numberToTerraform(struct.max),
        min: cdktf.numberToTerraform(struct.min),
    };
}
exports.kubernetesNodeGroupScalePolicyAutoScaleToTerraform = kubernetesNodeGroupScalePolicyAutoScaleToTerraform;
class KubernetesNodeGroupScalePolicyAutoScaleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._initial !== undefined) {
            hasAnyValues = true;
            internalValueResult.initial = this._initial;
        }
        if (this._max !== undefined) {
            hasAnyValues = true;
            internalValueResult.max = this._max;
        }
        if (this._min !== undefined) {
            hasAnyValues = true;
            internalValueResult.min = this._min;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._initial = undefined;
            this._max = undefined;
            this._min = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._initial = value.initial;
            this._max = value.max;
            this._min = value.min;
        }
    }
    get initial() {
        return this.getNumberAttribute('initial');
    }
    set initial(value) {
        this._initial = value;
    }
    // Temporarily expose input value. Use with caution.
    get initialInput() {
        return this._initial;
    }
    get max() {
        return this.getNumberAttribute('max');
    }
    set max(value) {
        this._max = value;
    }
    // Temporarily expose input value. Use with caution.
    get maxInput() {
        return this._max;
    }
    get min() {
        return this.getNumberAttribute('min');
    }
    set min(value) {
        this._min = value;
    }
    // Temporarily expose input value. Use with caution.
    get minInput() {
        return this._min;
    }
}
exports.KubernetesNodeGroupScalePolicyAutoScaleOutputReference = KubernetesNodeGroupScalePolicyAutoScaleOutputReference;
_x = JSII_RTTI_SYMBOL_1;
KubernetesNodeGroupScalePolicyAutoScaleOutputReference[_x] = { fqn: "@cdktf/provider-yandex.KubernetesNodeGroupScalePolicyAutoScaleOutputReference", version: "2.0.32" };
function kubernetesNodeGroupScalePolicyFixedScaleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        size: cdktf.numberToTerraform(struct.size),
    };
}
exports.kubernetesNodeGroupScalePolicyFixedScaleToTerraform = kubernetesNodeGroupScalePolicyFixedScaleToTerraform;
class KubernetesNodeGroupScalePolicyFixedScaleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._size !== undefined) {
            hasAnyValues = true;
            internalValueResult.size = this._size;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._size = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._size = value.size;
        }
    }
    get size() {
        return this.getNumberAttribute('size');
    }
    set size(value) {
        this._size = value;
    }
    resetSize() {
        this._size = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sizeInput() {
        return this._size;
    }
}
exports.KubernetesNodeGroupScalePolicyFixedScaleOutputReference = KubernetesNodeGroupScalePolicyFixedScaleOutputReference;
_y = JSII_RTTI_SYMBOL_1;
KubernetesNodeGroupScalePolicyFixedScaleOutputReference[_y] = { fqn: "@cdktf/provider-yandex.KubernetesNodeGroupScalePolicyFixedScaleOutputReference", version: "2.0.32" };
function kubernetesNodeGroupScalePolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auto_scale: kubernetesNodeGroupScalePolicyAutoScaleToTerraform(struct.autoScale),
        fixed_scale: kubernetesNodeGroupScalePolicyFixedScaleToTerraform(struct.fixedScale),
    };
}
exports.kubernetesNodeGroupScalePolicyToTerraform = kubernetesNodeGroupScalePolicyToTerraform;
class KubernetesNodeGroupScalePolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // auto_scale - computed: false, optional: true, required: false
        this._autoScale = new KubernetesNodeGroupScalePolicyAutoScaleOutputReference(this, "auto_scale");
        // fixed_scale - computed: false, optional: true, required: false
        this._fixedScale = new KubernetesNodeGroupScalePolicyFixedScaleOutputReference(this, "fixed_scale");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._autoScale?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoScale = this._autoScale?.internalValue;
        }
        if (this._fixedScale?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.fixedScale = this._fixedScale?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._autoScale.internalValue = undefined;
            this._fixedScale.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._autoScale.internalValue = value.autoScale;
            this._fixedScale.internalValue = value.fixedScale;
        }
    }
    get autoScale() {
        return this._autoScale;
    }
    putAutoScale(value) {
        this._autoScale.internalValue = value;
    }
    resetAutoScale() {
        this._autoScale.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoScaleInput() {
        return this._autoScale.internalValue;
    }
    get fixedScale() {
        return this._fixedScale;
    }
    putFixedScale(value) {
        this._fixedScale.internalValue = value;
    }
    resetFixedScale() {
        this._fixedScale.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fixedScaleInput() {
        return this._fixedScale.internalValue;
    }
}
exports.KubernetesNodeGroupScalePolicyOutputReference = KubernetesNodeGroupScalePolicyOutputReference;
_z = JSII_RTTI_SYMBOL_1;
KubernetesNodeGroupScalePolicyOutputReference[_z] = { fqn: "@cdktf/provider-yandex.KubernetesNodeGroupScalePolicyOutputReference", version: "2.0.32" };
function kubernetesNodeGroupTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        read: cdktf.stringToTerraform(struct.read),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.kubernetesNodeGroupTimeoutsToTerraform = kubernetesNodeGroupTimeoutsToTerraform;
class KubernetesNodeGroupTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._read !== undefined) {
            hasAnyValues = true;
            internalValueResult.read = this._read;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._read = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._read = value.read;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get read() {
        return this.getStringAttribute('read');
    }
    set read(value) {
        this._read = value;
    }
    resetRead() {
        this._read = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get readInput() {
        return this._read;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.KubernetesNodeGroupTimeoutsOutputReference = KubernetesNodeGroupTimeoutsOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
KubernetesNodeGroupTimeoutsOutputReference[_0] = { fqn: "@cdktf/provider-yandex.KubernetesNodeGroupTimeoutsOutputReference", version: "2.0.32" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/yandex/r/kubernetes_node_group yandex_kubernetes_node_group}
*/
class KubernetesNodeGroup extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/yandex/r/kubernetes_node_group yandex_kubernetes_node_group} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options KubernetesNodeGroupConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'yandex_kubernetes_node_group',
            terraformGeneratorMetadata: {
                providerName: 'yandex',
                providerVersion: '0.77.0',
                providerVersionConstraint: '~> 0.73'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // version_info - computed: true, optional: false, required: false
        this._versionInfo = new KubernetesNodeGroupVersionInfoList(this, "version_info", false);
        // allocation_policy - computed: false, optional: true, required: false
        this._allocationPolicy = new KubernetesNodeGroupAllocationPolicyOutputReference(this, "allocation_policy");
        // deploy_policy - computed: false, optional: true, required: false
        this._deployPolicy = new KubernetesNodeGroupDeployPolicyOutputReference(this, "deploy_policy");
        // instance_template - computed: false, optional: false, required: true
        this._instanceTemplate = new KubernetesNodeGroupInstanceTemplateOutputReference(this, "instance_template");
        // maintenance_policy - computed: false, optional: true, required: false
        this._maintenancePolicy = new KubernetesNodeGroupMaintenancePolicyOutputReference(this, "maintenance_policy");
        // scale_policy - computed: false, optional: false, required: true
        this._scalePolicy = new KubernetesNodeGroupScalePolicyOutputReference(this, "scale_policy");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new KubernetesNodeGroupTimeoutsOutputReference(this, "timeouts");
        this._allowedUnsafeSysctls = config.allowedUnsafeSysctls;
        this._clusterId = config.clusterId;
        this._description = config.description;
        this._id = config.id;
        this._labels = config.labels;
        this._name = config.name;
        this._nodeLabels = config.nodeLabels;
        this._nodeTaints = config.nodeTaints;
        this._version = config.version;
        this._allocationPolicy.internalValue = config.allocationPolicy;
        this._deployPolicy.internalValue = config.deployPolicy;
        this._instanceTemplate.internalValue = config.instanceTemplate;
        this._maintenancePolicy.internalValue = config.maintenancePolicy;
        this._scalePolicy.internalValue = config.scalePolicy;
        this._timeouts.internalValue = config.timeouts;
    }
    get allowedUnsafeSysctls() {
        return this.getListAttribute('allowed_unsafe_sysctls');
    }
    set allowedUnsafeSysctls(value) {
        this._allowedUnsafeSysctls = value;
    }
    resetAllowedUnsafeSysctls() {
        this._allowedUnsafeSysctls = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedUnsafeSysctlsInput() {
        return this._allowedUnsafeSysctls;
    }
    get clusterId() {
        return this.getStringAttribute('cluster_id');
    }
    set clusterId(value) {
        this._clusterId = value;
    }
    // Temporarily expose input value. Use with caution.
    get clusterIdInput() {
        return this._clusterId;
    }
    // created_at - computed: true, optional: false, required: false
    get createdAt() {
        return this.getStringAttribute('created_at');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // instance_group_id - computed: true, optional: false, required: false
    get instanceGroupId() {
        return this.getStringAttribute('instance_group_id');
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get nodeLabels() {
        return this.getStringMapAttribute('node_labels');
    }
    set nodeLabels(value) {
        this._nodeLabels = value;
    }
    resetNodeLabels() {
        this._nodeLabels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodeLabelsInput() {
        return this._nodeLabels;
    }
    get nodeTaints() {
        return this.getListAttribute('node_taints');
    }
    set nodeTaints(value) {
        this._nodeTaints = value;
    }
    resetNodeTaints() {
        this._nodeTaints = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodeTaintsInput() {
        return this._nodeTaints;
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getStringAttribute('status');
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    resetVersion() {
        this._version = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
    get versionInfo() {
        return this._versionInfo;
    }
    get allocationPolicy() {
        return this._allocationPolicy;
    }
    putAllocationPolicy(value) {
        this._allocationPolicy.internalValue = value;
    }
    resetAllocationPolicy() {
        this._allocationPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allocationPolicyInput() {
        return this._allocationPolicy.internalValue;
    }
    get deployPolicy() {
        return this._deployPolicy;
    }
    putDeployPolicy(value) {
        this._deployPolicy.internalValue = value;
    }
    resetDeployPolicy() {
        this._deployPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deployPolicyInput() {
        return this._deployPolicy.internalValue;
    }
    get instanceTemplate() {
        return this._instanceTemplate;
    }
    putInstanceTemplate(value) {
        this._instanceTemplate.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get instanceTemplateInput() {
        return this._instanceTemplate.internalValue;
    }
    get maintenancePolicy() {
        return this._maintenancePolicy;
    }
    putMaintenancePolicy(value) {
        this._maintenancePolicy.internalValue = value;
    }
    resetMaintenancePolicy() {
        this._maintenancePolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maintenancePolicyInput() {
        return this._maintenancePolicy.internalValue;
    }
    get scalePolicy() {
        return this._scalePolicy;
    }
    putScalePolicy(value) {
        this._scalePolicy.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get scalePolicyInput() {
        return this._scalePolicy.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            allowed_unsafe_sysctls: cdktf.listMapper(cdktf.stringToTerraform, false)(this._allowedUnsafeSysctls),
            cluster_id: cdktf.stringToTerraform(this._clusterId),
            description: cdktf.stringToTerraform(this._description),
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            name: cdktf.stringToTerraform(this._name),
            node_labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._nodeLabels),
            node_taints: cdktf.listMapper(cdktf.stringToTerraform, false)(this._nodeTaints),
            version: cdktf.stringToTerraform(this._version),
            allocation_policy: kubernetesNodeGroupAllocationPolicyToTerraform(this._allocationPolicy.internalValue),
            deploy_policy: kubernetesNodeGroupDeployPolicyToTerraform(this._deployPolicy.internalValue),
            instance_template: kubernetesNodeGroupInstanceTemplateToTerraform(this._instanceTemplate.internalValue),
            maintenance_policy: kubernetesNodeGroupMaintenancePolicyToTerraform(this._maintenancePolicy.internalValue),
            scale_policy: kubernetesNodeGroupScalePolicyToTerraform(this._scalePolicy.internalValue),
            timeouts: kubernetesNodeGroupTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
}
exports.KubernetesNodeGroup = KubernetesNodeGroup;
_1 = JSII_RTTI_SYMBOL_1;
KubernetesNodeGroup[_1] = { fqn: "@cdktf/provider-yandex.KubernetesNodeGroup", version: "2.0.32" };
// =================
// STATIC PROPERTIES
// =================
KubernetesNodeGroup.tfResourceType = "yandex_kubernetes_node_group";
//# sourceMappingURL=data:application/json;base64,