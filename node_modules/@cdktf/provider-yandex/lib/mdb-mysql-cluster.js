"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MdbMysqlCluster = exports.MdbMysqlClusterUserList = exports.MdbMysqlClusterUserOutputReference = exports.mdbMysqlClusterUserToTerraform = exports.MdbMysqlClusterUserPermissionList = exports.MdbMysqlClusterUserPermissionOutputReference = exports.mdbMysqlClusterUserPermissionToTerraform = exports.MdbMysqlClusterUserConnectionLimitsOutputReference = exports.mdbMysqlClusterUserConnectionLimitsToTerraform = exports.MdbMysqlClusterTimeoutsOutputReference = exports.mdbMysqlClusterTimeoutsToTerraform = exports.MdbMysqlClusterRestoreOutputReference = exports.mdbMysqlClusterRestoreToTerraform = exports.MdbMysqlClusterResourcesOutputReference = exports.mdbMysqlClusterResourcesToTerraform = exports.MdbMysqlClusterPerformanceDiagnosticsOutputReference = exports.mdbMysqlClusterPerformanceDiagnosticsToTerraform = exports.MdbMysqlClusterMaintenanceWindowOutputReference = exports.mdbMysqlClusterMaintenanceWindowToTerraform = exports.MdbMysqlClusterHostList = exports.MdbMysqlClusterHostOutputReference = exports.mdbMysqlClusterHostToTerraform = exports.MdbMysqlClusterDatabaseList = exports.MdbMysqlClusterDatabaseOutputReference = exports.mdbMysqlClusterDatabaseToTerraform = exports.MdbMysqlClusterBackupWindowStartOutputReference = exports.mdbMysqlClusterBackupWindowStartToTerraform = exports.MdbMysqlClusterAccessOutputReference = exports.mdbMysqlClusterAccessToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function mdbMysqlClusterAccessToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        data_lens: cdktf.booleanToTerraform(struct.dataLens),
        web_sql: cdktf.booleanToTerraform(struct.webSql),
    };
}
exports.mdbMysqlClusterAccessToTerraform = mdbMysqlClusterAccessToTerraform;
class MdbMysqlClusterAccessOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dataLens !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataLens = this._dataLens;
        }
        if (this._webSql !== undefined) {
            hasAnyValues = true;
            internalValueResult.webSql = this._webSql;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dataLens = undefined;
            this._webSql = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dataLens = value.dataLens;
            this._webSql = value.webSql;
        }
    }
    get dataLens() {
        return this.getBooleanAttribute('data_lens');
    }
    set dataLens(value) {
        this._dataLens = value;
    }
    resetDataLens() {
        this._dataLens = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataLensInput() {
        return this._dataLens;
    }
    get webSql() {
        return this.getBooleanAttribute('web_sql');
    }
    set webSql(value) {
        this._webSql = value;
    }
    resetWebSql() {
        this._webSql = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get webSqlInput() {
        return this._webSql;
    }
}
exports.MdbMysqlClusterAccessOutputReference = MdbMysqlClusterAccessOutputReference;
_a = JSII_RTTI_SYMBOL_1;
MdbMysqlClusterAccessOutputReference[_a] = { fqn: "@cdktf/provider-yandex.MdbMysqlClusterAccessOutputReference", version: "2.0.32" };
function mdbMysqlClusterBackupWindowStartToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        hours: cdktf.numberToTerraform(struct.hours),
        minutes: cdktf.numberToTerraform(struct.minutes),
    };
}
exports.mdbMysqlClusterBackupWindowStartToTerraform = mdbMysqlClusterBackupWindowStartToTerraform;
class MdbMysqlClusterBackupWindowStartOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hours !== undefined) {
            hasAnyValues = true;
            internalValueResult.hours = this._hours;
        }
        if (this._minutes !== undefined) {
            hasAnyValues = true;
            internalValueResult.minutes = this._minutes;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hours = undefined;
            this._minutes = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hours = value.hours;
            this._minutes = value.minutes;
        }
    }
    get hours() {
        return this.getNumberAttribute('hours');
    }
    set hours(value) {
        this._hours = value;
    }
    resetHours() {
        this._hours = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hoursInput() {
        return this._hours;
    }
    get minutes() {
        return this.getNumberAttribute('minutes');
    }
    set minutes(value) {
        this._minutes = value;
    }
    resetMinutes() {
        this._minutes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minutesInput() {
        return this._minutes;
    }
}
exports.MdbMysqlClusterBackupWindowStartOutputReference = MdbMysqlClusterBackupWindowStartOutputReference;
_b = JSII_RTTI_SYMBOL_1;
MdbMysqlClusterBackupWindowStartOutputReference[_b] = { fqn: "@cdktf/provider-yandex.MdbMysqlClusterBackupWindowStartOutputReference", version: "2.0.32" };
function mdbMysqlClusterDatabaseToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.mdbMysqlClusterDatabaseToTerraform = mdbMysqlClusterDatabaseToTerraform;
class MdbMysqlClusterDatabaseOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.MdbMysqlClusterDatabaseOutputReference = MdbMysqlClusterDatabaseOutputReference;
_c = JSII_RTTI_SYMBOL_1;
MdbMysqlClusterDatabaseOutputReference[_c] = { fqn: "@cdktf/provider-yandex.MdbMysqlClusterDatabaseOutputReference", version: "2.0.32" };
class MdbMysqlClusterDatabaseList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MdbMysqlClusterDatabaseOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MdbMysqlClusterDatabaseList = MdbMysqlClusterDatabaseList;
_d = JSII_RTTI_SYMBOL_1;
MdbMysqlClusterDatabaseList[_d] = { fqn: "@cdktf/provider-yandex.MdbMysqlClusterDatabaseList", version: "2.0.32" };
function mdbMysqlClusterHostToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        assign_public_ip: cdktf.booleanToTerraform(struct.assignPublicIp),
        backup_priority: cdktf.numberToTerraform(struct.backupPriority),
        name: cdktf.stringToTerraform(struct.name),
        priority: cdktf.numberToTerraform(struct.priority),
        replication_source_name: cdktf.stringToTerraform(struct.replicationSourceName),
        subnet_id: cdktf.stringToTerraform(struct.subnetId),
        zone: cdktf.stringToTerraform(struct.zone),
    };
}
exports.mdbMysqlClusterHostToTerraform = mdbMysqlClusterHostToTerraform;
class MdbMysqlClusterHostOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._assignPublicIp !== undefined) {
            hasAnyValues = true;
            internalValueResult.assignPublicIp = this._assignPublicIp;
        }
        if (this._backupPriority !== undefined) {
            hasAnyValues = true;
            internalValueResult.backupPriority = this._backupPriority;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._priority !== undefined) {
            hasAnyValues = true;
            internalValueResult.priority = this._priority;
        }
        if (this._replicationSourceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.replicationSourceName = this._replicationSourceName;
        }
        if (this._subnetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetId = this._subnetId;
        }
        if (this._zone !== undefined) {
            hasAnyValues = true;
            internalValueResult.zone = this._zone;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._assignPublicIp = undefined;
            this._backupPriority = undefined;
            this._name = undefined;
            this._priority = undefined;
            this._replicationSourceName = undefined;
            this._subnetId = undefined;
            this._zone = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._assignPublicIp = value.assignPublicIp;
            this._backupPriority = value.backupPriority;
            this._name = value.name;
            this._priority = value.priority;
            this._replicationSourceName = value.replicationSourceName;
            this._subnetId = value.subnetId;
            this._zone = value.zone;
        }
    }
    get assignPublicIp() {
        return this.getBooleanAttribute('assign_public_ip');
    }
    set assignPublicIp(value) {
        this._assignPublicIp = value;
    }
    resetAssignPublicIp() {
        this._assignPublicIp = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get assignPublicIpInput() {
        return this._assignPublicIp;
    }
    get backupPriority() {
        return this.getNumberAttribute('backup_priority');
    }
    set backupPriority(value) {
        this._backupPriority = value;
    }
    resetBackupPriority() {
        this._backupPriority = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backupPriorityInput() {
        return this._backupPriority;
    }
    // fqdn - computed: true, optional: false, required: false
    get fqdn() {
        return this.getStringAttribute('fqdn');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get priority() {
        return this.getNumberAttribute('priority');
    }
    set priority(value) {
        this._priority = value;
    }
    resetPriority() {
        this._priority = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get priorityInput() {
        return this._priority;
    }
    // replication_source - computed: true, optional: false, required: false
    get replicationSource() {
        return this.getStringAttribute('replication_source');
    }
    get replicationSourceName() {
        return this.getStringAttribute('replication_source_name');
    }
    set replicationSourceName(value) {
        this._replicationSourceName = value;
    }
    resetReplicationSourceName() {
        this._replicationSourceName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replicationSourceNameInput() {
        return this._replicationSourceName;
    }
    get subnetId() {
        return this.getStringAttribute('subnet_id');
    }
    set subnetId(value) {
        this._subnetId = value;
    }
    resetSubnetId() {
        this._subnetId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetIdInput() {
        return this._subnetId;
    }
    get zone() {
        return this.getStringAttribute('zone');
    }
    set zone(value) {
        this._zone = value;
    }
    // Temporarily expose input value. Use with caution.
    get zoneInput() {
        return this._zone;
    }
}
exports.MdbMysqlClusterHostOutputReference = MdbMysqlClusterHostOutputReference;
_e = JSII_RTTI_SYMBOL_1;
MdbMysqlClusterHostOutputReference[_e] = { fqn: "@cdktf/provider-yandex.MdbMysqlClusterHostOutputReference", version: "2.0.32" };
class MdbMysqlClusterHostList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MdbMysqlClusterHostOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MdbMysqlClusterHostList = MdbMysqlClusterHostList;
_f = JSII_RTTI_SYMBOL_1;
MdbMysqlClusterHostList[_f] = { fqn: "@cdktf/provider-yandex.MdbMysqlClusterHostList", version: "2.0.32" };
function mdbMysqlClusterMaintenanceWindowToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        day: cdktf.stringToTerraform(struct.day),
        hour: cdktf.numberToTerraform(struct.hour),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.mdbMysqlClusterMaintenanceWindowToTerraform = mdbMysqlClusterMaintenanceWindowToTerraform;
class MdbMysqlClusterMaintenanceWindowOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._day !== undefined) {
            hasAnyValues = true;
            internalValueResult.day = this._day;
        }
        if (this._hour !== undefined) {
            hasAnyValues = true;
            internalValueResult.hour = this._hour;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._day = undefined;
            this._hour = undefined;
            this._type = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._day = value.day;
            this._hour = value.hour;
            this._type = value.type;
        }
    }
    get day() {
        return this.getStringAttribute('day');
    }
    set day(value) {
        this._day = value;
    }
    resetDay() {
        this._day = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dayInput() {
        return this._day;
    }
    get hour() {
        return this.getNumberAttribute('hour');
    }
    set hour(value) {
        this._hour = value;
    }
    resetHour() {
        this._hour = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hourInput() {
        return this._hour;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
}
exports.MdbMysqlClusterMaintenanceWindowOutputReference = MdbMysqlClusterMaintenanceWindowOutputReference;
_g = JSII_RTTI_SYMBOL_1;
MdbMysqlClusterMaintenanceWindowOutputReference[_g] = { fqn: "@cdktf/provider-yandex.MdbMysqlClusterMaintenanceWindowOutputReference", version: "2.0.32" };
function mdbMysqlClusterPerformanceDiagnosticsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        sessions_sampling_interval: cdktf.numberToTerraform(struct.sessionsSamplingInterval),
        statements_sampling_interval: cdktf.numberToTerraform(struct.statementsSamplingInterval),
    };
}
exports.mdbMysqlClusterPerformanceDiagnosticsToTerraform = mdbMysqlClusterPerformanceDiagnosticsToTerraform;
class MdbMysqlClusterPerformanceDiagnosticsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._sessionsSamplingInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.sessionsSamplingInterval = this._sessionsSamplingInterval;
        }
        if (this._statementsSamplingInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.statementsSamplingInterval = this._statementsSamplingInterval;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._sessionsSamplingInterval = undefined;
            this._statementsSamplingInterval = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._sessionsSamplingInterval = value.sessionsSamplingInterval;
            this._statementsSamplingInterval = value.statementsSamplingInterval;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get sessionsSamplingInterval() {
        return this.getNumberAttribute('sessions_sampling_interval');
    }
    set sessionsSamplingInterval(value) {
        this._sessionsSamplingInterval = value;
    }
    // Temporarily expose input value. Use with caution.
    get sessionsSamplingIntervalInput() {
        return this._sessionsSamplingInterval;
    }
    get statementsSamplingInterval() {
        return this.getNumberAttribute('statements_sampling_interval');
    }
    set statementsSamplingInterval(value) {
        this._statementsSamplingInterval = value;
    }
    // Temporarily expose input value. Use with caution.
    get statementsSamplingIntervalInput() {
        return this._statementsSamplingInterval;
    }
}
exports.MdbMysqlClusterPerformanceDiagnosticsOutputReference = MdbMysqlClusterPerformanceDiagnosticsOutputReference;
_h = JSII_RTTI_SYMBOL_1;
MdbMysqlClusterPerformanceDiagnosticsOutputReference[_h] = { fqn: "@cdktf/provider-yandex.MdbMysqlClusterPerformanceDiagnosticsOutputReference", version: "2.0.32" };
function mdbMysqlClusterResourcesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        disk_size: cdktf.numberToTerraform(struct.diskSize),
        disk_type_id: cdktf.stringToTerraform(struct.diskTypeId),
        resource_preset_id: cdktf.stringToTerraform(struct.resourcePresetId),
    };
}
exports.mdbMysqlClusterResourcesToTerraform = mdbMysqlClusterResourcesToTerraform;
class MdbMysqlClusterResourcesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._diskSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskSize = this._diskSize;
        }
        if (this._diskTypeId !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskTypeId = this._diskTypeId;
        }
        if (this._resourcePresetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourcePresetId = this._resourcePresetId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._diskSize = undefined;
            this._diskTypeId = undefined;
            this._resourcePresetId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._diskSize = value.diskSize;
            this._diskTypeId = value.diskTypeId;
            this._resourcePresetId = value.resourcePresetId;
        }
    }
    get diskSize() {
        return this.getNumberAttribute('disk_size');
    }
    set diskSize(value) {
        this._diskSize = value;
    }
    // Temporarily expose input value. Use with caution.
    get diskSizeInput() {
        return this._diskSize;
    }
    get diskTypeId() {
        return this.getStringAttribute('disk_type_id');
    }
    set diskTypeId(value) {
        this._diskTypeId = value;
    }
    // Temporarily expose input value. Use with caution.
    get diskTypeIdInput() {
        return this._diskTypeId;
    }
    get resourcePresetId() {
        return this.getStringAttribute('resource_preset_id');
    }
    set resourcePresetId(value) {
        this._resourcePresetId = value;
    }
    // Temporarily expose input value. Use with caution.
    get resourcePresetIdInput() {
        return this._resourcePresetId;
    }
}
exports.MdbMysqlClusterResourcesOutputReference = MdbMysqlClusterResourcesOutputReference;
_j = JSII_RTTI_SYMBOL_1;
MdbMysqlClusterResourcesOutputReference[_j] = { fqn: "@cdktf/provider-yandex.MdbMysqlClusterResourcesOutputReference", version: "2.0.32" };
function mdbMysqlClusterRestoreToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        backup_id: cdktf.stringToTerraform(struct.backupId),
        time: cdktf.stringToTerraform(struct.time),
    };
}
exports.mdbMysqlClusterRestoreToTerraform = mdbMysqlClusterRestoreToTerraform;
class MdbMysqlClusterRestoreOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._backupId !== undefined) {
            hasAnyValues = true;
            internalValueResult.backupId = this._backupId;
        }
        if (this._time !== undefined) {
            hasAnyValues = true;
            internalValueResult.time = this._time;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._backupId = undefined;
            this._time = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._backupId = value.backupId;
            this._time = value.time;
        }
    }
    get backupId() {
        return this.getStringAttribute('backup_id');
    }
    set backupId(value) {
        this._backupId = value;
    }
    // Temporarily expose input value. Use with caution.
    get backupIdInput() {
        return this._backupId;
    }
    get time() {
        return this.getStringAttribute('time');
    }
    set time(value) {
        this._time = value;
    }
    resetTime() {
        this._time = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeInput() {
        return this._time;
    }
}
exports.MdbMysqlClusterRestoreOutputReference = MdbMysqlClusterRestoreOutputReference;
_k = JSII_RTTI_SYMBOL_1;
MdbMysqlClusterRestoreOutputReference[_k] = { fqn: "@cdktf/provider-yandex.MdbMysqlClusterRestoreOutputReference", version: "2.0.32" };
function mdbMysqlClusterTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.mdbMysqlClusterTimeoutsToTerraform = mdbMysqlClusterTimeoutsToTerraform;
class MdbMysqlClusterTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.MdbMysqlClusterTimeoutsOutputReference = MdbMysqlClusterTimeoutsOutputReference;
_l = JSII_RTTI_SYMBOL_1;
MdbMysqlClusterTimeoutsOutputReference[_l] = { fqn: "@cdktf/provider-yandex.MdbMysqlClusterTimeoutsOutputReference", version: "2.0.32" };
function mdbMysqlClusterUserConnectionLimitsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_connections_per_hour: cdktf.numberToTerraform(struct.maxConnectionsPerHour),
        max_questions_per_hour: cdktf.numberToTerraform(struct.maxQuestionsPerHour),
        max_updates_per_hour: cdktf.numberToTerraform(struct.maxUpdatesPerHour),
        max_user_connections: cdktf.numberToTerraform(struct.maxUserConnections),
    };
}
exports.mdbMysqlClusterUserConnectionLimitsToTerraform = mdbMysqlClusterUserConnectionLimitsToTerraform;
class MdbMysqlClusterUserConnectionLimitsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxConnectionsPerHour !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxConnectionsPerHour = this._maxConnectionsPerHour;
        }
        if (this._maxQuestionsPerHour !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxQuestionsPerHour = this._maxQuestionsPerHour;
        }
        if (this._maxUpdatesPerHour !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxUpdatesPerHour = this._maxUpdatesPerHour;
        }
        if (this._maxUserConnections !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxUserConnections = this._maxUserConnections;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maxConnectionsPerHour = undefined;
            this._maxQuestionsPerHour = undefined;
            this._maxUpdatesPerHour = undefined;
            this._maxUserConnections = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maxConnectionsPerHour = value.maxConnectionsPerHour;
            this._maxQuestionsPerHour = value.maxQuestionsPerHour;
            this._maxUpdatesPerHour = value.maxUpdatesPerHour;
            this._maxUserConnections = value.maxUserConnections;
        }
    }
    get maxConnectionsPerHour() {
        return this.getNumberAttribute('max_connections_per_hour');
    }
    set maxConnectionsPerHour(value) {
        this._maxConnectionsPerHour = value;
    }
    resetMaxConnectionsPerHour() {
        this._maxConnectionsPerHour = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxConnectionsPerHourInput() {
        return this._maxConnectionsPerHour;
    }
    get maxQuestionsPerHour() {
        return this.getNumberAttribute('max_questions_per_hour');
    }
    set maxQuestionsPerHour(value) {
        this._maxQuestionsPerHour = value;
    }
    resetMaxQuestionsPerHour() {
        this._maxQuestionsPerHour = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxQuestionsPerHourInput() {
        return this._maxQuestionsPerHour;
    }
    get maxUpdatesPerHour() {
        return this.getNumberAttribute('max_updates_per_hour');
    }
    set maxUpdatesPerHour(value) {
        this._maxUpdatesPerHour = value;
    }
    resetMaxUpdatesPerHour() {
        this._maxUpdatesPerHour = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxUpdatesPerHourInput() {
        return this._maxUpdatesPerHour;
    }
    get maxUserConnections() {
        return this.getNumberAttribute('max_user_connections');
    }
    set maxUserConnections(value) {
        this._maxUserConnections = value;
    }
    resetMaxUserConnections() {
        this._maxUserConnections = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxUserConnectionsInput() {
        return this._maxUserConnections;
    }
}
exports.MdbMysqlClusterUserConnectionLimitsOutputReference = MdbMysqlClusterUserConnectionLimitsOutputReference;
_m = JSII_RTTI_SYMBOL_1;
MdbMysqlClusterUserConnectionLimitsOutputReference[_m] = { fqn: "@cdktf/provider-yandex.MdbMysqlClusterUserConnectionLimitsOutputReference", version: "2.0.32" };
function mdbMysqlClusterUserPermissionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        database_name: cdktf.stringToTerraform(struct.databaseName),
        roles: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.roles),
    };
}
exports.mdbMysqlClusterUserPermissionToTerraform = mdbMysqlClusterUserPermissionToTerraform;
class MdbMysqlClusterUserPermissionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._databaseName !== undefined) {
            hasAnyValues = true;
            internalValueResult.databaseName = this._databaseName;
        }
        if (this._roles !== undefined) {
            hasAnyValues = true;
            internalValueResult.roles = this._roles;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._databaseName = undefined;
            this._roles = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._databaseName = value.databaseName;
            this._roles = value.roles;
        }
    }
    get databaseName() {
        return this.getStringAttribute('database_name');
    }
    set databaseName(value) {
        this._databaseName = value;
    }
    // Temporarily expose input value. Use with caution.
    get databaseNameInput() {
        return this._databaseName;
    }
    get roles() {
        return this.getListAttribute('roles');
    }
    set roles(value) {
        this._roles = value;
    }
    resetRoles() {
        this._roles = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rolesInput() {
        return this._roles;
    }
}
exports.MdbMysqlClusterUserPermissionOutputReference = MdbMysqlClusterUserPermissionOutputReference;
_o = JSII_RTTI_SYMBOL_1;
MdbMysqlClusterUserPermissionOutputReference[_o] = { fqn: "@cdktf/provider-yandex.MdbMysqlClusterUserPermissionOutputReference", version: "2.0.32" };
class MdbMysqlClusterUserPermissionList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MdbMysqlClusterUserPermissionOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MdbMysqlClusterUserPermissionList = MdbMysqlClusterUserPermissionList;
_p = JSII_RTTI_SYMBOL_1;
MdbMysqlClusterUserPermissionList[_p] = { fqn: "@cdktf/provider-yandex.MdbMysqlClusterUserPermissionList", version: "2.0.32" };
function mdbMysqlClusterUserToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        authentication_plugin: cdktf.stringToTerraform(struct.authenticationPlugin),
        global_permissions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.globalPermissions),
        name: cdktf.stringToTerraform(struct.name),
        password: cdktf.stringToTerraform(struct.password),
        connection_limits: mdbMysqlClusterUserConnectionLimitsToTerraform(struct.connectionLimits),
        permission: cdktf.listMapper(mdbMysqlClusterUserPermissionToTerraform, true)(struct.permission),
    };
}
exports.mdbMysqlClusterUserToTerraform = mdbMysqlClusterUserToTerraform;
class MdbMysqlClusterUserOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // connection_limits - computed: false, optional: true, required: false
        this._connectionLimits = new MdbMysqlClusterUserConnectionLimitsOutputReference(this, "connection_limits");
        // permission - computed: false, optional: true, required: false
        this._permission = new MdbMysqlClusterUserPermissionList(this, "permission", true);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._authenticationPlugin !== undefined) {
            hasAnyValues = true;
            internalValueResult.authenticationPlugin = this._authenticationPlugin;
        }
        if (this._globalPermissions !== undefined) {
            hasAnyValues = true;
            internalValueResult.globalPermissions = this._globalPermissions;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._password !== undefined) {
            hasAnyValues = true;
            internalValueResult.password = this._password;
        }
        if (this._connectionLimits?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectionLimits = this._connectionLimits?.internalValue;
        }
        if (this._permission?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.permission = this._permission?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._authenticationPlugin = undefined;
            this._globalPermissions = undefined;
            this._name = undefined;
            this._password = undefined;
            this._connectionLimits.internalValue = undefined;
            this._permission.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._authenticationPlugin = value.authenticationPlugin;
            this._globalPermissions = value.globalPermissions;
            this._name = value.name;
            this._password = value.password;
            this._connectionLimits.internalValue = value.connectionLimits;
            this._permission.internalValue = value.permission;
        }
    }
    get authenticationPlugin() {
        return this.getStringAttribute('authentication_plugin');
    }
    set authenticationPlugin(value) {
        this._authenticationPlugin = value;
    }
    resetAuthenticationPlugin() {
        this._authenticationPlugin = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authenticationPluginInput() {
        return this._authenticationPlugin;
    }
    get globalPermissions() {
        return cdktf.Fn.tolist(this.getListAttribute('global_permissions'));
    }
    set globalPermissions(value) {
        this._globalPermissions = value;
    }
    resetGlobalPermissions() {
        this._globalPermissions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get globalPermissionsInput() {
        return this._globalPermissions;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get password() {
        return this.getStringAttribute('password');
    }
    set password(value) {
        this._password = value;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password;
    }
    get connectionLimits() {
        return this._connectionLimits;
    }
    putConnectionLimits(value) {
        this._connectionLimits.internalValue = value;
    }
    resetConnectionLimits() {
        this._connectionLimits.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionLimitsInput() {
        return this._connectionLimits.internalValue;
    }
    get permission() {
        return this._permission;
    }
    putPermission(value) {
        this._permission.internalValue = value;
    }
    resetPermission() {
        this._permission.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get permissionInput() {
        return this._permission.internalValue;
    }
}
exports.MdbMysqlClusterUserOutputReference = MdbMysqlClusterUserOutputReference;
_q = JSII_RTTI_SYMBOL_1;
MdbMysqlClusterUserOutputReference[_q] = { fqn: "@cdktf/provider-yandex.MdbMysqlClusterUserOutputReference", version: "2.0.32" };
class MdbMysqlClusterUserList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MdbMysqlClusterUserOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MdbMysqlClusterUserList = MdbMysqlClusterUserList;
_r = JSII_RTTI_SYMBOL_1;
MdbMysqlClusterUserList[_r] = { fqn: "@cdktf/provider-yandex.MdbMysqlClusterUserList", version: "2.0.32" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/yandex/r/mdb_mysql_cluster yandex_mdb_mysql_cluster}
*/
class MdbMysqlCluster extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/yandex/r/mdb_mysql_cluster yandex_mdb_mysql_cluster} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options MdbMysqlClusterConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'yandex_mdb_mysql_cluster',
            terraformGeneratorMetadata: {
                providerName: 'yandex',
                providerVersion: '0.77.0',
                providerVersionConstraint: '~> 0.73'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // access - computed: false, optional: true, required: false
        this._access = new MdbMysqlClusterAccessOutputReference(this, "access");
        // backup_window_start - computed: false, optional: true, required: false
        this._backupWindowStart = new MdbMysqlClusterBackupWindowStartOutputReference(this, "backup_window_start");
        // database - computed: false, optional: true, required: false
        this._database = new MdbMysqlClusterDatabaseList(this, "database", true);
        // host - computed: false, optional: false, required: true
        this._host = new MdbMysqlClusterHostList(this, "host", false);
        // maintenance_window - computed: false, optional: true, required: false
        this._maintenanceWindow = new MdbMysqlClusterMaintenanceWindowOutputReference(this, "maintenance_window");
        // performance_diagnostics - computed: false, optional: true, required: false
        this._performanceDiagnostics = new MdbMysqlClusterPerformanceDiagnosticsOutputReference(this, "performance_diagnostics");
        // resources - computed: false, optional: false, required: true
        this._resources = new MdbMysqlClusterResourcesOutputReference(this, "resources");
        // restore - computed: false, optional: true, required: false
        this._restore = new MdbMysqlClusterRestoreOutputReference(this, "restore");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new MdbMysqlClusterTimeoutsOutputReference(this, "timeouts");
        // user - computed: false, optional: true, required: false
        this._user = new MdbMysqlClusterUserList(this, "user", false);
        this._allowRegenerationHost = config.allowRegenerationHost;
        this._deletionProtection = config.deletionProtection;
        this._description = config.description;
        this._environment = config.environment;
        this._folderId = config.folderId;
        this._hostGroupIds = config.hostGroupIds;
        this._id = config.id;
        this._labels = config.labels;
        this._mysqlConfig = config.mysqlConfig;
        this._name = config.name;
        this._networkId = config.networkId;
        this._securityGroupIds = config.securityGroupIds;
        this._version = config.version;
        this._access.internalValue = config.access;
        this._backupWindowStart.internalValue = config.backupWindowStart;
        this._database.internalValue = config.database;
        this._host.internalValue = config.host;
        this._maintenanceWindow.internalValue = config.maintenanceWindow;
        this._performanceDiagnostics.internalValue = config.performanceDiagnostics;
        this._resources.internalValue = config.resources;
        this._restore.internalValue = config.restore;
        this._timeouts.internalValue = config.timeouts;
        this._user.internalValue = config.user;
    }
    get allowRegenerationHost() {
        return this.getBooleanAttribute('allow_regeneration_host');
    }
    set allowRegenerationHost(value) {
        this._allowRegenerationHost = value;
    }
    resetAllowRegenerationHost() {
        this._allowRegenerationHost = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowRegenerationHostInput() {
        return this._allowRegenerationHost;
    }
    // created_at - computed: true, optional: false, required: false
    get createdAt() {
        return this.getStringAttribute('created_at');
    }
    get deletionProtection() {
        return this.getBooleanAttribute('deletion_protection');
    }
    set deletionProtection(value) {
        this._deletionProtection = value;
    }
    resetDeletionProtection() {
        this._deletionProtection = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deletionProtectionInput() {
        return this._deletionProtection;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get environment() {
        return this.getStringAttribute('environment');
    }
    set environment(value) {
        this._environment = value;
    }
    // Temporarily expose input value. Use with caution.
    get environmentInput() {
        return this._environment;
    }
    get folderId() {
        return this.getStringAttribute('folder_id');
    }
    set folderId(value) {
        this._folderId = value;
    }
    resetFolderId() {
        this._folderId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get folderIdInput() {
        return this._folderId;
    }
    // health - computed: true, optional: false, required: false
    get health() {
        return this.getStringAttribute('health');
    }
    get hostGroupIds() {
        return cdktf.Fn.tolist(this.getListAttribute('host_group_ids'));
    }
    set hostGroupIds(value) {
        this._hostGroupIds = value;
    }
    resetHostGroupIds() {
        this._hostGroupIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostGroupIdsInput() {
        return this._hostGroupIds;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get mysqlConfig() {
        return this.getStringMapAttribute('mysql_config');
    }
    set mysqlConfig(value) {
        this._mysqlConfig = value;
    }
    resetMysqlConfig() {
        this._mysqlConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mysqlConfigInput() {
        return this._mysqlConfig;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get networkId() {
        return this.getStringAttribute('network_id');
    }
    set networkId(value) {
        this._networkId = value;
    }
    // Temporarily expose input value. Use with caution.
    get networkIdInput() {
        return this._networkId;
    }
    get securityGroupIds() {
        return cdktf.Fn.tolist(this.getListAttribute('security_group_ids'));
    }
    set securityGroupIds(value) {
        this._securityGroupIds = value;
    }
    resetSecurityGroupIds() {
        this._securityGroupIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityGroupIdsInput() {
        return this._securityGroupIds;
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getStringAttribute('status');
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
    get access() {
        return this._access;
    }
    putAccess(value) {
        this._access.internalValue = value;
    }
    resetAccess() {
        this._access.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessInput() {
        return this._access.internalValue;
    }
    get backupWindowStart() {
        return this._backupWindowStart;
    }
    putBackupWindowStart(value) {
        this._backupWindowStart.internalValue = value;
    }
    resetBackupWindowStart() {
        this._backupWindowStart.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backupWindowStartInput() {
        return this._backupWindowStart.internalValue;
    }
    get database() {
        return this._database;
    }
    putDatabase(value) {
        this._database.internalValue = value;
    }
    resetDatabase() {
        this._database.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get databaseInput() {
        return this._database.internalValue;
    }
    get host() {
        return this._host;
    }
    putHost(value) {
        this._host.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get hostInput() {
        return this._host.internalValue;
    }
    get maintenanceWindow() {
        return this._maintenanceWindow;
    }
    putMaintenanceWindow(value) {
        this._maintenanceWindow.internalValue = value;
    }
    resetMaintenanceWindow() {
        this._maintenanceWindow.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maintenanceWindowInput() {
        return this._maintenanceWindow.internalValue;
    }
    get performanceDiagnostics() {
        return this._performanceDiagnostics;
    }
    putPerformanceDiagnostics(value) {
        this._performanceDiagnostics.internalValue = value;
    }
    resetPerformanceDiagnostics() {
        this._performanceDiagnostics.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get performanceDiagnosticsInput() {
        return this._performanceDiagnostics.internalValue;
    }
    get resources() {
        return this._resources;
    }
    putResources(value) {
        this._resources.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get resourcesInput() {
        return this._resources.internalValue;
    }
    get restore() {
        return this._restore;
    }
    putRestore(value) {
        this._restore.internalValue = value;
    }
    resetRestore() {
        this._restore.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get restoreInput() {
        return this._restore.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    get user() {
        return this._user;
    }
    putUser(value) {
        this._user.internalValue = value;
    }
    resetUser() {
        this._user.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userInput() {
        return this._user.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            allow_regeneration_host: cdktf.booleanToTerraform(this._allowRegenerationHost),
            deletion_protection: cdktf.booleanToTerraform(this._deletionProtection),
            description: cdktf.stringToTerraform(this._description),
            environment: cdktf.stringToTerraform(this._environment),
            folder_id: cdktf.stringToTerraform(this._folderId),
            host_group_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(this._hostGroupIds),
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            mysql_config: cdktf.hashMapper(cdktf.stringToTerraform)(this._mysqlConfig),
            name: cdktf.stringToTerraform(this._name),
            network_id: cdktf.stringToTerraform(this._networkId),
            security_group_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(this._securityGroupIds),
            version: cdktf.stringToTerraform(this._version),
            access: mdbMysqlClusterAccessToTerraform(this._access.internalValue),
            backup_window_start: mdbMysqlClusterBackupWindowStartToTerraform(this._backupWindowStart.internalValue),
            database: cdktf.listMapper(mdbMysqlClusterDatabaseToTerraform, true)(this._database.internalValue),
            host: cdktf.listMapper(mdbMysqlClusterHostToTerraform, true)(this._host.internalValue),
            maintenance_window: mdbMysqlClusterMaintenanceWindowToTerraform(this._maintenanceWindow.internalValue),
            performance_diagnostics: mdbMysqlClusterPerformanceDiagnosticsToTerraform(this._performanceDiagnostics.internalValue),
            resources: mdbMysqlClusterResourcesToTerraform(this._resources.internalValue),
            restore: mdbMysqlClusterRestoreToTerraform(this._restore.internalValue),
            timeouts: mdbMysqlClusterTimeoutsToTerraform(this._timeouts.internalValue),
            user: cdktf.listMapper(mdbMysqlClusterUserToTerraform, true)(this._user.internalValue),
        };
    }
}
exports.MdbMysqlCluster = MdbMysqlCluster;
_s = JSII_RTTI_SYMBOL_1;
MdbMysqlCluster[_s] = { fqn: "@cdktf/provider-yandex.MdbMysqlCluster", version: "2.0.32" };
// =================
// STATIC PROPERTIES
// =================
MdbMysqlCluster.tfResourceType = "yandex_mdb_mysql_cluster";
//# sourceMappingURL=data:application/json;base64,