"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatatransferEndpoint = exports.DatatransferEndpointSettingsOutputReference = exports.datatransferEndpointSettingsToTerraform = exports.DatatransferEndpointSettingsPostgresTargetOutputReference = exports.datatransferEndpointSettingsPostgresTargetToTerraform = exports.DatatransferEndpointSettingsPostgresTargetPasswordOutputReference = exports.datatransferEndpointSettingsPostgresTargetPasswordToTerraform = exports.DatatransferEndpointSettingsPostgresTargetConnectionOutputReference = exports.datatransferEndpointSettingsPostgresTargetConnectionToTerraform = exports.DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseOutputReference = exports.datatransferEndpointSettingsPostgresTargetConnectionOnPremiseToTerraform = exports.DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeOutputReference = exports.datatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeToTerraform = exports.DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeEnabledOutputReference = exports.datatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeEnabledToTerraform = exports.DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeDisabledOutputReference = exports.datatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeDisabledToTerraform = exports.DatatransferEndpointSettingsPostgresSourceOutputReference = exports.datatransferEndpointSettingsPostgresSourceToTerraform = exports.DatatransferEndpointSettingsPostgresSourcePasswordOutputReference = exports.datatransferEndpointSettingsPostgresSourcePasswordToTerraform = exports.DatatransferEndpointSettingsPostgresSourceObjectTransferSettingsOutputReference = exports.datatransferEndpointSettingsPostgresSourceObjectTransferSettingsToTerraform = exports.DatatransferEndpointSettingsPostgresSourceConnectionOutputReference = exports.datatransferEndpointSettingsPostgresSourceConnectionToTerraform = exports.DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseOutputReference = exports.datatransferEndpointSettingsPostgresSourceConnectionOnPremiseToTerraform = exports.DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeOutputReference = exports.datatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeToTerraform = exports.DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeEnabledOutputReference = exports.datatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeEnabledToTerraform = exports.DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeDisabledOutputReference = exports.datatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeDisabledToTerraform = exports.DatatransferEndpointSettingsMysqlTargetOutputReference = exports.datatransferEndpointSettingsMysqlTargetToTerraform = exports.DatatransferEndpointSettingsMysqlTargetPasswordOutputReference = exports.datatransferEndpointSettingsMysqlTargetPasswordToTerraform = exports.DatatransferEndpointSettingsMysqlTargetConnectionOutputReference = exports.datatransferEndpointSettingsMysqlTargetConnectionToTerraform = exports.DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseOutputReference = exports.datatransferEndpointSettingsMysqlTargetConnectionOnPremiseToTerraform = exports.DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeOutputReference = exports.datatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeToTerraform = exports.DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeEnabledOutputReference = exports.datatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeEnabledToTerraform = exports.DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeDisabledOutputReference = exports.datatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeDisabledToTerraform = exports.DatatransferEndpointSettingsMysqlSourceOutputReference = exports.datatransferEndpointSettingsMysqlSourceToTerraform = exports.DatatransferEndpointSettingsMysqlSourcePasswordOutputReference = exports.datatransferEndpointSettingsMysqlSourcePasswordToTerraform = exports.DatatransferEndpointSettingsMysqlSourceObjectTransferSettingsOutputReference = exports.datatransferEndpointSettingsMysqlSourceObjectTransferSettingsToTerraform = exports.DatatransferEndpointSettingsMysqlSourceConnectionOutputReference = exports.datatransferEndpointSettingsMysqlSourceConnectionToTerraform = exports.DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseOutputReference = exports.datatransferEndpointSettingsMysqlSourceConnectionOnPremiseToTerraform = exports.DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeOutputReference = exports.datatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeToTerraform = exports.DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeEnabledOutputReference = exports.datatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeEnabledToTerraform = exports.DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeDisabledOutputReference = exports.datatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeDisabledToTerraform = exports.DatatransferEndpointSettingsMongoTargetOutputReference = exports.datatransferEndpointSettingsMongoTargetToTerraform = exports.DatatransferEndpointSettingsMongoTargetConnectionOutputReference = exports.datatransferEndpointSettingsMongoTargetConnectionToTerraform = exports.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOutputReference = exports.datatransferEndpointSettingsMongoTargetConnectionConnectionOptionsToTerraform = exports.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsPasswordOutputReference = exports.datatransferEndpointSettingsMongoTargetConnectionConnectionOptionsPasswordToTerraform = exports.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseOutputReference = exports.datatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseToTerraform = exports.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeOutputReference = exports.datatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeToTerraform = exports.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeEnabledOutputReference = exports.datatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeEnabledToTerraform = exports.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeDisabledOutputReference = exports.datatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeDisabledToTerraform = exports.DatatransferEndpointSettingsMongoSourceOutputReference = exports.datatransferEndpointSettingsMongoSourceToTerraform = exports.DatatransferEndpointSettingsMongoSourceExcludedCollectionsList = exports.DatatransferEndpointSettingsMongoSourceExcludedCollectionsOutputReference = exports.datatransferEndpointSettingsMongoSourceExcludedCollectionsToTerraform = exports.DatatransferEndpointSettingsMongoSourceConnectionOutputReference = exports.datatransferEndpointSettingsMongoSourceConnectionToTerraform = exports.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOutputReference = exports.datatransferEndpointSettingsMongoSourceConnectionConnectionOptionsToTerraform = exports.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsPasswordOutputReference = exports.datatransferEndpointSettingsMongoSourceConnectionConnectionOptionsPasswordToTerraform = exports.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseOutputReference = exports.datatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseToTerraform = exports.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeOutputReference = exports.datatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeToTerraform = exports.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeEnabledOutputReference = exports.datatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeEnabledToTerraform = exports.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeDisabledOutputReference = exports.datatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeDisabledToTerraform = exports.DatatransferEndpointSettingsMongoSourceCollectionsList = exports.DatatransferEndpointSettingsMongoSourceCollectionsOutputReference = exports.datatransferEndpointSettingsMongoSourceCollectionsToTerraform = exports.DatatransferEndpointSettingsClickhouseTargetOutputReference = exports.datatransferEndpointSettingsClickhouseTargetToTerraform = exports.DatatransferEndpointSettingsClickhouseTargetShardingOutputReference = exports.datatransferEndpointSettingsClickhouseTargetShardingToTerraform = exports.DatatransferEndpointSettingsClickhouseTargetShardingTransferIdOutputReference = exports.datatransferEndpointSettingsClickhouseTargetShardingTransferIdToTerraform = exports.DatatransferEndpointSettingsClickhouseTargetShardingColumnValueHashOutputReference = exports.datatransferEndpointSettingsClickhouseTargetShardingColumnValueHashToTerraform = exports.DatatransferEndpointSettingsClickhouseTargetConnectionOutputReference = exports.datatransferEndpointSettingsClickhouseTargetConnectionToTerraform = exports.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOutputReference = exports.datatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsToTerraform = exports.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsPasswordOutputReference = exports.datatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsPasswordToTerraform = exports.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseOutputReference = exports.datatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseToTerraform = exports.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeOutputReference = exports.datatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeToTerraform = exports.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeEnabledOutputReference = exports.datatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeEnabledToTerraform = exports.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeDisabledOutputReference = exports.datatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeDisabledToTerraform = exports.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseShardsList = exports.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseShardsOutputReference = exports.datatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseShardsToTerraform = exports.DatatransferEndpointSettingsClickhouseTargetAltNamesList = exports.DatatransferEndpointSettingsClickhouseTargetAltNamesOutputReference = exports.datatransferEndpointSettingsClickhouseTargetAltNamesToTerraform = exports.DatatransferEndpointSettingsClickhouseSourceOutputReference = exports.datatransferEndpointSettingsClickhouseSourceToTerraform = exports.DatatransferEndpointSettingsClickhouseSourceConnectionOutputReference = exports.datatransferEndpointSettingsClickhouseSourceConnectionToTerraform = exports.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOutputReference = exports.datatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsToTerraform = exports.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsPasswordOutputReference = exports.datatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsPasswordToTerraform = exports.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseOutputReference = exports.datatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseToTerraform = exports.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeOutputReference = exports.datatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeToTerraform = exports.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeEnabledOutputReference = exports.datatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeEnabledToTerraform = exports.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeDisabledOutputReference = exports.datatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeDisabledToTerraform = exports.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseShardsList = exports.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseShardsOutputReference = exports.datatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseShardsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function datatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseShardsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        hosts: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.hosts),
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.datatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseShardsToTerraform = datatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseShardsToTerraform;
class DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseShardsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hosts !== undefined) {
            hasAnyValues = true;
            internalValueResult.hosts = this._hosts;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._hosts = undefined;
            this._name = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._hosts = value.hosts;
            this._name = value.name;
        }
    }
    get hosts() {
        return this.getListAttribute('hosts');
    }
    set hosts(value) {
        this._hosts = value;
    }
    resetHosts() {
        this._hosts = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostsInput() {
        return this._hosts;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseShardsOutputReference = DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseShardsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseShardsOutputReference[_a] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseShardsOutputReference", version: "2.0.32" };
class DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseShardsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseShardsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseShardsList = DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseShardsList;
_b = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseShardsList[_b] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseShardsList", version: "2.0.32" };
function datatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeDisabledToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.datatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeDisabledToTerraform = datatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeDisabledToTerraform;
class DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeDisabledOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeDisabledOutputReference = DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeDisabledOutputReference;
_c = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeDisabledOutputReference[_c] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeDisabledOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeEnabledToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ca_certificate: cdktf.stringToTerraform(struct.caCertificate),
    };
}
exports.datatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeEnabledToTerraform = datatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeEnabledToTerraform;
class DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeEnabledOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._caCertificate !== undefined) {
            hasAnyValues = true;
            internalValueResult.caCertificate = this._caCertificate;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._caCertificate = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._caCertificate = value.caCertificate;
        }
    }
    get caCertificate() {
        return this.getStringAttribute('ca_certificate');
    }
    set caCertificate(value) {
        this._caCertificate = value;
    }
    resetCaCertificate() {
        this._caCertificate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get caCertificateInput() {
        return this._caCertificate;
    }
}
exports.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeEnabledOutputReference = DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeEnabledOutputReference;
_d = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeEnabledOutputReference[_d] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeEnabledOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        disabled: datatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeDisabledToTerraform(struct.disabled),
        enabled: datatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeEnabledToTerraform(struct.enabled),
    };
}
exports.datatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeToTerraform = datatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeToTerraform;
class DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // disabled - computed: false, optional: true, required: false
        this._disabled = new DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeDisabledOutputReference(this, "disabled");
        // enabled - computed: false, optional: true, required: false
        this._enabled = new DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeEnabledOutputReference(this, "enabled");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._disabled?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.disabled = this._disabled?.internalValue;
        }
        if (this._enabled?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._disabled.internalValue = undefined;
            this._enabled.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._disabled.internalValue = value.disabled;
            this._enabled.internalValue = value.enabled;
        }
    }
    get disabled() {
        return this._disabled;
    }
    putDisabled(value) {
        this._disabled.internalValue = value;
    }
    resetDisabled() {
        this._disabled.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disabledInput() {
        return this._disabled.internalValue;
    }
    get enabled() {
        return this._enabled;
    }
    putEnabled(value) {
        this._enabled.internalValue = value;
    }
    resetEnabled() {
        this._enabled.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled.internalValue;
    }
}
exports.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeOutputReference = DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeOutputReference;
_e = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeOutputReference[_e] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        http_port: cdktf.numberToTerraform(struct.httpPort),
        native_port: cdktf.numberToTerraform(struct.nativePort),
        shards: cdktf.listMapper(datatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseShardsToTerraform, true)(struct.shards),
        tls_mode: datatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeToTerraform(struct.tlsMode),
    };
}
exports.datatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseToTerraform = datatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseToTerraform;
class DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // shards - computed: false, optional: true, required: false
        this._shards = new DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseShardsList(this, "shards", false);
        // tls_mode - computed: false, optional: true, required: false
        this._tlsMode = new DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeOutputReference(this, "tls_mode");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._httpPort !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpPort = this._httpPort;
        }
        if (this._nativePort !== undefined) {
            hasAnyValues = true;
            internalValueResult.nativePort = this._nativePort;
        }
        if (this._shards?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.shards = this._shards?.internalValue;
        }
        if (this._tlsMode?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tlsMode = this._tlsMode?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._httpPort = undefined;
            this._nativePort = undefined;
            this._shards.internalValue = undefined;
            this._tlsMode.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._httpPort = value.httpPort;
            this._nativePort = value.nativePort;
            this._shards.internalValue = value.shards;
            this._tlsMode.internalValue = value.tlsMode;
        }
    }
    get httpPort() {
        return this.getNumberAttribute('http_port');
    }
    set httpPort(value) {
        this._httpPort = value;
    }
    resetHttpPort() {
        this._httpPort = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpPortInput() {
        return this._httpPort;
    }
    get nativePort() {
        return this.getNumberAttribute('native_port');
    }
    set nativePort(value) {
        this._nativePort = value;
    }
    resetNativePort() {
        this._nativePort = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nativePortInput() {
        return this._nativePort;
    }
    get shards() {
        return this._shards;
    }
    putShards(value) {
        this._shards.internalValue = value;
    }
    resetShards() {
        this._shards.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get shardsInput() {
        return this._shards.internalValue;
    }
    get tlsMode() {
        return this._tlsMode;
    }
    putTlsMode(value) {
        this._tlsMode.internalValue = value;
    }
    resetTlsMode() {
        this._tlsMode.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tlsModeInput() {
        return this._tlsMode.internalValue;
    }
}
exports.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseOutputReference = DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseOutputReference;
_f = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseOutputReference[_f] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsPasswordToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        raw: cdktf.stringToTerraform(struct.raw),
    };
}
exports.datatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsPasswordToTerraform = datatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsPasswordToTerraform;
class DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsPasswordOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._raw !== undefined) {
            hasAnyValues = true;
            internalValueResult.raw = this._raw;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._raw = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._raw = value.raw;
        }
    }
    get raw() {
        return this.getStringAttribute('raw');
    }
    set raw(value) {
        this._raw = value;
    }
    resetRaw() {
        this._raw = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rawInput() {
        return this._raw;
    }
}
exports.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsPasswordOutputReference = DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsPasswordOutputReference;
_g = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsPasswordOutputReference[_g] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsPasswordOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        mdb_cluster_id: cdktf.stringToTerraform(struct.mdbClusterId),
        user: cdktf.stringToTerraform(struct.user),
        on_premise: datatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseToTerraform(struct.onPremise),
        password: datatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsPasswordToTerraform(struct.password),
    };
}
exports.datatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsToTerraform = datatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsToTerraform;
class DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // on_premise - computed: false, optional: true, required: false
        this._onPremise = new DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseOutputReference(this, "on_premise");
        // password - computed: false, optional: true, required: false
        this._password = new DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsPasswordOutputReference(this, "password");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._database !== undefined) {
            hasAnyValues = true;
            internalValueResult.database = this._database;
        }
        if (this._mdbClusterId !== undefined) {
            hasAnyValues = true;
            internalValueResult.mdbClusterId = this._mdbClusterId;
        }
        if (this._user !== undefined) {
            hasAnyValues = true;
            internalValueResult.user = this._user;
        }
        if (this._onPremise?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.onPremise = this._onPremise?.internalValue;
        }
        if (this._password?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.password = this._password?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._database = undefined;
            this._mdbClusterId = undefined;
            this._user = undefined;
            this._onPremise.internalValue = undefined;
            this._password.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._database = value.database;
            this._mdbClusterId = value.mdbClusterId;
            this._user = value.user;
            this._onPremise.internalValue = value.onPremise;
            this._password.internalValue = value.password;
        }
    }
    get database() {
        return this.getStringAttribute('database');
    }
    set database(value) {
        this._database = value;
    }
    resetDatabase() {
        this._database = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get databaseInput() {
        return this._database;
    }
    get mdbClusterId() {
        return this.getStringAttribute('mdb_cluster_id');
    }
    set mdbClusterId(value) {
        this._mdbClusterId = value;
    }
    resetMdbClusterId() {
        this._mdbClusterId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mdbClusterIdInput() {
        return this._mdbClusterId;
    }
    get user() {
        return this.getStringAttribute('user');
    }
    set user(value) {
        this._user = value;
    }
    resetUser() {
        this._user = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userInput() {
        return this._user;
    }
    get onPremise() {
        return this._onPremise;
    }
    putOnPremise(value) {
        this._onPremise.internalValue = value;
    }
    resetOnPremise() {
        this._onPremise.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get onPremiseInput() {
        return this._onPremise.internalValue;
    }
    get password() {
        return this._password;
    }
    putPassword(value) {
        this._password.internalValue = value;
    }
    resetPassword() {
        this._password.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password.internalValue;
    }
}
exports.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOutputReference = DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOutputReference;
_h = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOutputReference[_h] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsClickhouseSourceConnectionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        connection_options: datatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsToTerraform(struct.connectionOptions),
    };
}
exports.datatransferEndpointSettingsClickhouseSourceConnectionToTerraform = datatransferEndpointSettingsClickhouseSourceConnectionToTerraform;
class DatatransferEndpointSettingsClickhouseSourceConnectionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // connection_options - computed: false, optional: true, required: false
        this._connectionOptions = new DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOutputReference(this, "connection_options");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._connectionOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectionOptions = this._connectionOptions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._connectionOptions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._connectionOptions.internalValue = value.connectionOptions;
        }
    }
    get connectionOptions() {
        return this._connectionOptions;
    }
    putConnectionOptions(value) {
        this._connectionOptions.internalValue = value;
    }
    resetConnectionOptions() {
        this._connectionOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionOptionsInput() {
        return this._connectionOptions.internalValue;
    }
}
exports.DatatransferEndpointSettingsClickhouseSourceConnectionOutputReference = DatatransferEndpointSettingsClickhouseSourceConnectionOutputReference;
_j = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsClickhouseSourceConnectionOutputReference[_j] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsClickhouseSourceConnectionOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsClickhouseSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        exclude_tables: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.excludeTables),
        include_tables: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.includeTables),
        security_groups: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.securityGroups),
        subnet_id: cdktf.stringToTerraform(struct.subnetId),
        connection: datatransferEndpointSettingsClickhouseSourceConnectionToTerraform(struct.connection),
    };
}
exports.datatransferEndpointSettingsClickhouseSourceToTerraform = datatransferEndpointSettingsClickhouseSourceToTerraform;
class DatatransferEndpointSettingsClickhouseSourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // connection - computed: false, optional: true, required: false
        this._connection = new DatatransferEndpointSettingsClickhouseSourceConnectionOutputReference(this, "connection");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._excludeTables !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludeTables = this._excludeTables;
        }
        if (this._includeTables !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeTables = this._includeTables;
        }
        if (this._securityGroups !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityGroups = this._securityGroups;
        }
        if (this._subnetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetId = this._subnetId;
        }
        if (this._connection?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.connection = this._connection?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._excludeTables = undefined;
            this._includeTables = undefined;
            this._securityGroups = undefined;
            this._subnetId = undefined;
            this._connection.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._excludeTables = value.excludeTables;
            this._includeTables = value.includeTables;
            this._securityGroups = value.securityGroups;
            this._subnetId = value.subnetId;
            this._connection.internalValue = value.connection;
        }
    }
    get excludeTables() {
        return this.getListAttribute('exclude_tables');
    }
    set excludeTables(value) {
        this._excludeTables = value;
    }
    resetExcludeTables() {
        this._excludeTables = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludeTablesInput() {
        return this._excludeTables;
    }
    get includeTables() {
        return this.getListAttribute('include_tables');
    }
    set includeTables(value) {
        this._includeTables = value;
    }
    resetIncludeTables() {
        this._includeTables = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeTablesInput() {
        return this._includeTables;
    }
    get securityGroups() {
        return this.getListAttribute('security_groups');
    }
    set securityGroups(value) {
        this._securityGroups = value;
    }
    resetSecurityGroups() {
        this._securityGroups = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityGroupsInput() {
        return this._securityGroups;
    }
    get subnetId() {
        return this.getStringAttribute('subnet_id');
    }
    set subnetId(value) {
        this._subnetId = value;
    }
    resetSubnetId() {
        this._subnetId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetIdInput() {
        return this._subnetId;
    }
    get connection() {
        return this._connection;
    }
    putConnection(value) {
        this._connection.internalValue = value;
    }
    resetConnection() {
        this._connection.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionInput() {
        return this._connection.internalValue;
    }
}
exports.DatatransferEndpointSettingsClickhouseSourceOutputReference = DatatransferEndpointSettingsClickhouseSourceOutputReference;
_k = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsClickhouseSourceOutputReference[_k] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsClickhouseSourceOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsClickhouseTargetAltNamesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        from_name: cdktf.stringToTerraform(struct.fromName),
        to_name: cdktf.stringToTerraform(struct.toName),
    };
}
exports.datatransferEndpointSettingsClickhouseTargetAltNamesToTerraform = datatransferEndpointSettingsClickhouseTargetAltNamesToTerraform;
class DatatransferEndpointSettingsClickhouseTargetAltNamesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._fromName !== undefined) {
            hasAnyValues = true;
            internalValueResult.fromName = this._fromName;
        }
        if (this._toName !== undefined) {
            hasAnyValues = true;
            internalValueResult.toName = this._toName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._fromName = undefined;
            this._toName = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._fromName = value.fromName;
            this._toName = value.toName;
        }
    }
    get fromName() {
        return this.getStringAttribute('from_name');
    }
    set fromName(value) {
        this._fromName = value;
    }
    resetFromName() {
        this._fromName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fromNameInput() {
        return this._fromName;
    }
    get toName() {
        return this.getStringAttribute('to_name');
    }
    set toName(value) {
        this._toName = value;
    }
    resetToName() {
        this._toName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get toNameInput() {
        return this._toName;
    }
}
exports.DatatransferEndpointSettingsClickhouseTargetAltNamesOutputReference = DatatransferEndpointSettingsClickhouseTargetAltNamesOutputReference;
_l = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsClickhouseTargetAltNamesOutputReference[_l] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsClickhouseTargetAltNamesOutputReference", version: "2.0.32" };
class DatatransferEndpointSettingsClickhouseTargetAltNamesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatatransferEndpointSettingsClickhouseTargetAltNamesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatatransferEndpointSettingsClickhouseTargetAltNamesList = DatatransferEndpointSettingsClickhouseTargetAltNamesList;
_m = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsClickhouseTargetAltNamesList[_m] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsClickhouseTargetAltNamesList", version: "2.0.32" };
function datatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseShardsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        hosts: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.hosts),
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.datatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseShardsToTerraform = datatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseShardsToTerraform;
class DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseShardsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hosts !== undefined) {
            hasAnyValues = true;
            internalValueResult.hosts = this._hosts;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._hosts = undefined;
            this._name = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._hosts = value.hosts;
            this._name = value.name;
        }
    }
    get hosts() {
        return this.getListAttribute('hosts');
    }
    set hosts(value) {
        this._hosts = value;
    }
    resetHosts() {
        this._hosts = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostsInput() {
        return this._hosts;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseShardsOutputReference = DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseShardsOutputReference;
_o = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseShardsOutputReference[_o] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseShardsOutputReference", version: "2.0.32" };
class DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseShardsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseShardsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseShardsList = DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseShardsList;
_p = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseShardsList[_p] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseShardsList", version: "2.0.32" };
function datatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeDisabledToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.datatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeDisabledToTerraform = datatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeDisabledToTerraform;
class DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeDisabledOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeDisabledOutputReference = DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeDisabledOutputReference;
_q = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeDisabledOutputReference[_q] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeDisabledOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeEnabledToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ca_certificate: cdktf.stringToTerraform(struct.caCertificate),
    };
}
exports.datatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeEnabledToTerraform = datatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeEnabledToTerraform;
class DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeEnabledOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._caCertificate !== undefined) {
            hasAnyValues = true;
            internalValueResult.caCertificate = this._caCertificate;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._caCertificate = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._caCertificate = value.caCertificate;
        }
    }
    get caCertificate() {
        return this.getStringAttribute('ca_certificate');
    }
    set caCertificate(value) {
        this._caCertificate = value;
    }
    resetCaCertificate() {
        this._caCertificate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get caCertificateInput() {
        return this._caCertificate;
    }
}
exports.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeEnabledOutputReference = DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeEnabledOutputReference;
_r = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeEnabledOutputReference[_r] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeEnabledOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        disabled: datatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeDisabledToTerraform(struct.disabled),
        enabled: datatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeEnabledToTerraform(struct.enabled),
    };
}
exports.datatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeToTerraform = datatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeToTerraform;
class DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // disabled - computed: false, optional: true, required: false
        this._disabled = new DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeDisabledOutputReference(this, "disabled");
        // enabled - computed: false, optional: true, required: false
        this._enabled = new DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeEnabledOutputReference(this, "enabled");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._disabled?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.disabled = this._disabled?.internalValue;
        }
        if (this._enabled?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._disabled.internalValue = undefined;
            this._enabled.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._disabled.internalValue = value.disabled;
            this._enabled.internalValue = value.enabled;
        }
    }
    get disabled() {
        return this._disabled;
    }
    putDisabled(value) {
        this._disabled.internalValue = value;
    }
    resetDisabled() {
        this._disabled.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disabledInput() {
        return this._disabled.internalValue;
    }
    get enabled() {
        return this._enabled;
    }
    putEnabled(value) {
        this._enabled.internalValue = value;
    }
    resetEnabled() {
        this._enabled.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled.internalValue;
    }
}
exports.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeOutputReference = DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeOutputReference;
_s = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeOutputReference[_s] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        http_port: cdktf.numberToTerraform(struct.httpPort),
        native_port: cdktf.numberToTerraform(struct.nativePort),
        shards: cdktf.listMapper(datatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseShardsToTerraform, true)(struct.shards),
        tls_mode: datatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeToTerraform(struct.tlsMode),
    };
}
exports.datatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseToTerraform = datatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseToTerraform;
class DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // shards - computed: false, optional: true, required: false
        this._shards = new DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseShardsList(this, "shards", false);
        // tls_mode - computed: false, optional: true, required: false
        this._tlsMode = new DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeOutputReference(this, "tls_mode");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._httpPort !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpPort = this._httpPort;
        }
        if (this._nativePort !== undefined) {
            hasAnyValues = true;
            internalValueResult.nativePort = this._nativePort;
        }
        if (this._shards?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.shards = this._shards?.internalValue;
        }
        if (this._tlsMode?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tlsMode = this._tlsMode?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._httpPort = undefined;
            this._nativePort = undefined;
            this._shards.internalValue = undefined;
            this._tlsMode.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._httpPort = value.httpPort;
            this._nativePort = value.nativePort;
            this._shards.internalValue = value.shards;
            this._tlsMode.internalValue = value.tlsMode;
        }
    }
    get httpPort() {
        return this.getNumberAttribute('http_port');
    }
    set httpPort(value) {
        this._httpPort = value;
    }
    resetHttpPort() {
        this._httpPort = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpPortInput() {
        return this._httpPort;
    }
    get nativePort() {
        return this.getNumberAttribute('native_port');
    }
    set nativePort(value) {
        this._nativePort = value;
    }
    resetNativePort() {
        this._nativePort = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nativePortInput() {
        return this._nativePort;
    }
    get shards() {
        return this._shards;
    }
    putShards(value) {
        this._shards.internalValue = value;
    }
    resetShards() {
        this._shards.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get shardsInput() {
        return this._shards.internalValue;
    }
    get tlsMode() {
        return this._tlsMode;
    }
    putTlsMode(value) {
        this._tlsMode.internalValue = value;
    }
    resetTlsMode() {
        this._tlsMode.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tlsModeInput() {
        return this._tlsMode.internalValue;
    }
}
exports.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseOutputReference = DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseOutputReference;
_t = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseOutputReference[_t] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsPasswordToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        raw: cdktf.stringToTerraform(struct.raw),
    };
}
exports.datatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsPasswordToTerraform = datatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsPasswordToTerraform;
class DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsPasswordOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._raw !== undefined) {
            hasAnyValues = true;
            internalValueResult.raw = this._raw;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._raw = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._raw = value.raw;
        }
    }
    get raw() {
        return this.getStringAttribute('raw');
    }
    set raw(value) {
        this._raw = value;
    }
    resetRaw() {
        this._raw = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rawInput() {
        return this._raw;
    }
}
exports.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsPasswordOutputReference = DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsPasswordOutputReference;
_u = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsPasswordOutputReference[_u] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsPasswordOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        mdb_cluster_id: cdktf.stringToTerraform(struct.mdbClusterId),
        user: cdktf.stringToTerraform(struct.user),
        on_premise: datatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseToTerraform(struct.onPremise),
        password: datatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsPasswordToTerraform(struct.password),
    };
}
exports.datatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsToTerraform = datatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsToTerraform;
class DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // on_premise - computed: false, optional: true, required: false
        this._onPremise = new DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseOutputReference(this, "on_premise");
        // password - computed: false, optional: true, required: false
        this._password = new DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsPasswordOutputReference(this, "password");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._database !== undefined) {
            hasAnyValues = true;
            internalValueResult.database = this._database;
        }
        if (this._mdbClusterId !== undefined) {
            hasAnyValues = true;
            internalValueResult.mdbClusterId = this._mdbClusterId;
        }
        if (this._user !== undefined) {
            hasAnyValues = true;
            internalValueResult.user = this._user;
        }
        if (this._onPremise?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.onPremise = this._onPremise?.internalValue;
        }
        if (this._password?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.password = this._password?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._database = undefined;
            this._mdbClusterId = undefined;
            this._user = undefined;
            this._onPremise.internalValue = undefined;
            this._password.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._database = value.database;
            this._mdbClusterId = value.mdbClusterId;
            this._user = value.user;
            this._onPremise.internalValue = value.onPremise;
            this._password.internalValue = value.password;
        }
    }
    get database() {
        return this.getStringAttribute('database');
    }
    set database(value) {
        this._database = value;
    }
    resetDatabase() {
        this._database = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get databaseInput() {
        return this._database;
    }
    get mdbClusterId() {
        return this.getStringAttribute('mdb_cluster_id');
    }
    set mdbClusterId(value) {
        this._mdbClusterId = value;
    }
    resetMdbClusterId() {
        this._mdbClusterId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mdbClusterIdInput() {
        return this._mdbClusterId;
    }
    get user() {
        return this.getStringAttribute('user');
    }
    set user(value) {
        this._user = value;
    }
    resetUser() {
        this._user = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userInput() {
        return this._user;
    }
    get onPremise() {
        return this._onPremise;
    }
    putOnPremise(value) {
        this._onPremise.internalValue = value;
    }
    resetOnPremise() {
        this._onPremise.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get onPremiseInput() {
        return this._onPremise.internalValue;
    }
    get password() {
        return this._password;
    }
    putPassword(value) {
        this._password.internalValue = value;
    }
    resetPassword() {
        this._password.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password.internalValue;
    }
}
exports.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOutputReference = DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOutputReference;
_v = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOutputReference[_v] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsClickhouseTargetConnectionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        connection_options: datatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsToTerraform(struct.connectionOptions),
    };
}
exports.datatransferEndpointSettingsClickhouseTargetConnectionToTerraform = datatransferEndpointSettingsClickhouseTargetConnectionToTerraform;
class DatatransferEndpointSettingsClickhouseTargetConnectionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // connection_options - computed: false, optional: true, required: false
        this._connectionOptions = new DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOutputReference(this, "connection_options");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._connectionOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectionOptions = this._connectionOptions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._connectionOptions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._connectionOptions.internalValue = value.connectionOptions;
        }
    }
    get connectionOptions() {
        return this._connectionOptions;
    }
    putConnectionOptions(value) {
        this._connectionOptions.internalValue = value;
    }
    resetConnectionOptions() {
        this._connectionOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionOptionsInput() {
        return this._connectionOptions.internalValue;
    }
}
exports.DatatransferEndpointSettingsClickhouseTargetConnectionOutputReference = DatatransferEndpointSettingsClickhouseTargetConnectionOutputReference;
_w = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsClickhouseTargetConnectionOutputReference[_w] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsClickhouseTargetConnectionOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsClickhouseTargetShardingColumnValueHashToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        column_name: cdktf.stringToTerraform(struct.columnName),
    };
}
exports.datatransferEndpointSettingsClickhouseTargetShardingColumnValueHashToTerraform = datatransferEndpointSettingsClickhouseTargetShardingColumnValueHashToTerraform;
class DatatransferEndpointSettingsClickhouseTargetShardingColumnValueHashOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._columnName !== undefined) {
            hasAnyValues = true;
            internalValueResult.columnName = this._columnName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._columnName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._columnName = value.columnName;
        }
    }
    get columnName() {
        return this.getStringAttribute('column_name');
    }
    set columnName(value) {
        this._columnName = value;
    }
    resetColumnName() {
        this._columnName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get columnNameInput() {
        return this._columnName;
    }
}
exports.DatatransferEndpointSettingsClickhouseTargetShardingColumnValueHashOutputReference = DatatransferEndpointSettingsClickhouseTargetShardingColumnValueHashOutputReference;
_x = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsClickhouseTargetShardingColumnValueHashOutputReference[_x] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsClickhouseTargetShardingColumnValueHashOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsClickhouseTargetShardingTransferIdToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.datatransferEndpointSettingsClickhouseTargetShardingTransferIdToTerraform = datatransferEndpointSettingsClickhouseTargetShardingTransferIdToTerraform;
class DatatransferEndpointSettingsClickhouseTargetShardingTransferIdOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DatatransferEndpointSettingsClickhouseTargetShardingTransferIdOutputReference = DatatransferEndpointSettingsClickhouseTargetShardingTransferIdOutputReference;
_y = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsClickhouseTargetShardingTransferIdOutputReference[_y] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsClickhouseTargetShardingTransferIdOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsClickhouseTargetShardingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        column_value_hash: datatransferEndpointSettingsClickhouseTargetShardingColumnValueHashToTerraform(struct.columnValueHash),
        transfer_id: datatransferEndpointSettingsClickhouseTargetShardingTransferIdToTerraform(struct.transferId),
    };
}
exports.datatransferEndpointSettingsClickhouseTargetShardingToTerraform = datatransferEndpointSettingsClickhouseTargetShardingToTerraform;
class DatatransferEndpointSettingsClickhouseTargetShardingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // column_value_hash - computed: false, optional: true, required: false
        this._columnValueHash = new DatatransferEndpointSettingsClickhouseTargetShardingColumnValueHashOutputReference(this, "column_value_hash");
        // transfer_id - computed: false, optional: true, required: false
        this._transferId = new DatatransferEndpointSettingsClickhouseTargetShardingTransferIdOutputReference(this, "transfer_id");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._columnValueHash?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.columnValueHash = this._columnValueHash?.internalValue;
        }
        if (this._transferId?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.transferId = this._transferId?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._columnValueHash.internalValue = undefined;
            this._transferId.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._columnValueHash.internalValue = value.columnValueHash;
            this._transferId.internalValue = value.transferId;
        }
    }
    get columnValueHash() {
        return this._columnValueHash;
    }
    putColumnValueHash(value) {
        this._columnValueHash.internalValue = value;
    }
    resetColumnValueHash() {
        this._columnValueHash.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get columnValueHashInput() {
        return this._columnValueHash.internalValue;
    }
    get transferId() {
        return this._transferId;
    }
    putTransferId(value) {
        this._transferId.internalValue = value;
    }
    resetTransferId() {
        this._transferId.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get transferIdInput() {
        return this._transferId.internalValue;
    }
}
exports.DatatransferEndpointSettingsClickhouseTargetShardingOutputReference = DatatransferEndpointSettingsClickhouseTargetShardingOutputReference;
_z = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsClickhouseTargetShardingOutputReference[_z] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsClickhouseTargetShardingOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsClickhouseTargetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cleanup_policy: cdktf.stringToTerraform(struct.cleanupPolicy),
        clickhouse_cluster_name: cdktf.stringToTerraform(struct.clickhouseClusterName),
        security_groups: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.securityGroups),
        subnet_id: cdktf.stringToTerraform(struct.subnetId),
        alt_names: cdktf.listMapper(datatransferEndpointSettingsClickhouseTargetAltNamesToTerraform, true)(struct.altNames),
        connection: datatransferEndpointSettingsClickhouseTargetConnectionToTerraform(struct.connection),
        sharding: datatransferEndpointSettingsClickhouseTargetShardingToTerraform(struct.sharding),
    };
}
exports.datatransferEndpointSettingsClickhouseTargetToTerraform = datatransferEndpointSettingsClickhouseTargetToTerraform;
class DatatransferEndpointSettingsClickhouseTargetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // alt_names - computed: false, optional: true, required: false
        this._altNames = new DatatransferEndpointSettingsClickhouseTargetAltNamesList(this, "alt_names", false);
        // connection - computed: false, optional: true, required: false
        this._connection = new DatatransferEndpointSettingsClickhouseTargetConnectionOutputReference(this, "connection");
        // sharding - computed: false, optional: true, required: false
        this._sharding = new DatatransferEndpointSettingsClickhouseTargetShardingOutputReference(this, "sharding");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cleanupPolicy !== undefined) {
            hasAnyValues = true;
            internalValueResult.cleanupPolicy = this._cleanupPolicy;
        }
        if (this._clickhouseClusterName !== undefined) {
            hasAnyValues = true;
            internalValueResult.clickhouseClusterName = this._clickhouseClusterName;
        }
        if (this._securityGroups !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityGroups = this._securityGroups;
        }
        if (this._subnetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetId = this._subnetId;
        }
        if (this._altNames?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.altNames = this._altNames?.internalValue;
        }
        if (this._connection?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.connection = this._connection?.internalValue;
        }
        if (this._sharding?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sharding = this._sharding?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cleanupPolicy = undefined;
            this._clickhouseClusterName = undefined;
            this._securityGroups = undefined;
            this._subnetId = undefined;
            this._altNames.internalValue = undefined;
            this._connection.internalValue = undefined;
            this._sharding.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cleanupPolicy = value.cleanupPolicy;
            this._clickhouseClusterName = value.clickhouseClusterName;
            this._securityGroups = value.securityGroups;
            this._subnetId = value.subnetId;
            this._altNames.internalValue = value.altNames;
            this._connection.internalValue = value.connection;
            this._sharding.internalValue = value.sharding;
        }
    }
    get cleanupPolicy() {
        return this.getStringAttribute('cleanup_policy');
    }
    set cleanupPolicy(value) {
        this._cleanupPolicy = value;
    }
    resetCleanupPolicy() {
        this._cleanupPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cleanupPolicyInput() {
        return this._cleanupPolicy;
    }
    get clickhouseClusterName() {
        return this.getStringAttribute('clickhouse_cluster_name');
    }
    set clickhouseClusterName(value) {
        this._clickhouseClusterName = value;
    }
    resetClickhouseClusterName() {
        this._clickhouseClusterName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clickhouseClusterNameInput() {
        return this._clickhouseClusterName;
    }
    get securityGroups() {
        return this.getListAttribute('security_groups');
    }
    set securityGroups(value) {
        this._securityGroups = value;
    }
    resetSecurityGroups() {
        this._securityGroups = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityGroupsInput() {
        return this._securityGroups;
    }
    get subnetId() {
        return this.getStringAttribute('subnet_id');
    }
    set subnetId(value) {
        this._subnetId = value;
    }
    resetSubnetId() {
        this._subnetId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetIdInput() {
        return this._subnetId;
    }
    get altNames() {
        return this._altNames;
    }
    putAltNames(value) {
        this._altNames.internalValue = value;
    }
    resetAltNames() {
        this._altNames.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get altNamesInput() {
        return this._altNames.internalValue;
    }
    get connection() {
        return this._connection;
    }
    putConnection(value) {
        this._connection.internalValue = value;
    }
    resetConnection() {
        this._connection.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionInput() {
        return this._connection.internalValue;
    }
    get sharding() {
        return this._sharding;
    }
    putSharding(value) {
        this._sharding.internalValue = value;
    }
    resetSharding() {
        this._sharding.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get shardingInput() {
        return this._sharding.internalValue;
    }
}
exports.DatatransferEndpointSettingsClickhouseTargetOutputReference = DatatransferEndpointSettingsClickhouseTargetOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsClickhouseTargetOutputReference[_0] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsClickhouseTargetOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsMongoSourceCollectionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        collection_name: cdktf.stringToTerraform(struct.collectionName),
        database_name: cdktf.stringToTerraform(struct.databaseName),
    };
}
exports.datatransferEndpointSettingsMongoSourceCollectionsToTerraform = datatransferEndpointSettingsMongoSourceCollectionsToTerraform;
class DatatransferEndpointSettingsMongoSourceCollectionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._collectionName !== undefined) {
            hasAnyValues = true;
            internalValueResult.collectionName = this._collectionName;
        }
        if (this._databaseName !== undefined) {
            hasAnyValues = true;
            internalValueResult.databaseName = this._databaseName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._collectionName = undefined;
            this._databaseName = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._collectionName = value.collectionName;
            this._databaseName = value.databaseName;
        }
    }
    get collectionName() {
        return this.getStringAttribute('collection_name');
    }
    set collectionName(value) {
        this._collectionName = value;
    }
    resetCollectionName() {
        this._collectionName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get collectionNameInput() {
        return this._collectionName;
    }
    get databaseName() {
        return this.getStringAttribute('database_name');
    }
    set databaseName(value) {
        this._databaseName = value;
    }
    resetDatabaseName() {
        this._databaseName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get databaseNameInput() {
        return this._databaseName;
    }
}
exports.DatatransferEndpointSettingsMongoSourceCollectionsOutputReference = DatatransferEndpointSettingsMongoSourceCollectionsOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsMongoSourceCollectionsOutputReference[_1] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsMongoSourceCollectionsOutputReference", version: "2.0.32" };
class DatatransferEndpointSettingsMongoSourceCollectionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatatransferEndpointSettingsMongoSourceCollectionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatatransferEndpointSettingsMongoSourceCollectionsList = DatatransferEndpointSettingsMongoSourceCollectionsList;
_2 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsMongoSourceCollectionsList[_2] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsMongoSourceCollectionsList", version: "2.0.32" };
function datatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeDisabledToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.datatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeDisabledToTerraform = datatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeDisabledToTerraform;
class DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeDisabledOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeDisabledOutputReference = DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeDisabledOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeDisabledOutputReference[_3] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeDisabledOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeEnabledToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ca_certificate: cdktf.stringToTerraform(struct.caCertificate),
    };
}
exports.datatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeEnabledToTerraform = datatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeEnabledToTerraform;
class DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeEnabledOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._caCertificate !== undefined) {
            hasAnyValues = true;
            internalValueResult.caCertificate = this._caCertificate;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._caCertificate = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._caCertificate = value.caCertificate;
        }
    }
    get caCertificate() {
        return this.getStringAttribute('ca_certificate');
    }
    set caCertificate(value) {
        this._caCertificate = value;
    }
    resetCaCertificate() {
        this._caCertificate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get caCertificateInput() {
        return this._caCertificate;
    }
}
exports.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeEnabledOutputReference = DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeEnabledOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeEnabledOutputReference[_4] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeEnabledOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        disabled: datatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeDisabledToTerraform(struct.disabled),
        enabled: datatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeEnabledToTerraform(struct.enabled),
    };
}
exports.datatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeToTerraform = datatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeToTerraform;
class DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // disabled - computed: false, optional: true, required: false
        this._disabled = new DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeDisabledOutputReference(this, "disabled");
        // enabled - computed: false, optional: true, required: false
        this._enabled = new DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeEnabledOutputReference(this, "enabled");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._disabled?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.disabled = this._disabled?.internalValue;
        }
        if (this._enabled?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._disabled.internalValue = undefined;
            this._enabled.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._disabled.internalValue = value.disabled;
            this._enabled.internalValue = value.enabled;
        }
    }
    get disabled() {
        return this._disabled;
    }
    putDisabled(value) {
        this._disabled.internalValue = value;
    }
    resetDisabled() {
        this._disabled.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disabledInput() {
        return this._disabled.internalValue;
    }
    get enabled() {
        return this._enabled;
    }
    putEnabled(value) {
        this._enabled.internalValue = value;
    }
    resetEnabled() {
        this._enabled.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled.internalValue;
    }
}
exports.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeOutputReference = DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeOutputReference;
_5 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeOutputReference[_5] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        hosts: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.hosts),
        port: cdktf.numberToTerraform(struct.port),
        replica_set: cdktf.stringToTerraform(struct.replicaSet),
        tls_mode: datatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeToTerraform(struct.tlsMode),
    };
}
exports.datatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseToTerraform = datatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseToTerraform;
class DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // tls_mode - computed: false, optional: true, required: false
        this._tlsMode = new DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeOutputReference(this, "tls_mode");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hosts !== undefined) {
            hasAnyValues = true;
            internalValueResult.hosts = this._hosts;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        if (this._replicaSet !== undefined) {
            hasAnyValues = true;
            internalValueResult.replicaSet = this._replicaSet;
        }
        if (this._tlsMode?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tlsMode = this._tlsMode?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hosts = undefined;
            this._port = undefined;
            this._replicaSet = undefined;
            this._tlsMode.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hosts = value.hosts;
            this._port = value.port;
            this._replicaSet = value.replicaSet;
            this._tlsMode.internalValue = value.tlsMode;
        }
    }
    get hosts() {
        return this.getListAttribute('hosts');
    }
    set hosts(value) {
        this._hosts = value;
    }
    resetHosts() {
        this._hosts = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostsInput() {
        return this._hosts;
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    resetPort() {
        this._port = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
    get replicaSet() {
        return this.getStringAttribute('replica_set');
    }
    set replicaSet(value) {
        this._replicaSet = value;
    }
    resetReplicaSet() {
        this._replicaSet = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replicaSetInput() {
        return this._replicaSet;
    }
    get tlsMode() {
        return this._tlsMode;
    }
    putTlsMode(value) {
        this._tlsMode.internalValue = value;
    }
    resetTlsMode() {
        this._tlsMode.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tlsModeInput() {
        return this._tlsMode.internalValue;
    }
}
exports.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseOutputReference = DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseOutputReference;
_6 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseOutputReference[_6] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsMongoSourceConnectionConnectionOptionsPasswordToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        raw: cdktf.stringToTerraform(struct.raw),
    };
}
exports.datatransferEndpointSettingsMongoSourceConnectionConnectionOptionsPasswordToTerraform = datatransferEndpointSettingsMongoSourceConnectionConnectionOptionsPasswordToTerraform;
class DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsPasswordOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._raw !== undefined) {
            hasAnyValues = true;
            internalValueResult.raw = this._raw;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._raw = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._raw = value.raw;
        }
    }
    get raw() {
        return this.getStringAttribute('raw');
    }
    set raw(value) {
        this._raw = value;
    }
    resetRaw() {
        this._raw = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rawInput() {
        return this._raw;
    }
}
exports.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsPasswordOutputReference = DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsPasswordOutputReference;
_7 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsPasswordOutputReference[_7] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsPasswordOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsMongoSourceConnectionConnectionOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auth_source: cdktf.stringToTerraform(struct.authSource),
        mdb_cluster_id: cdktf.stringToTerraform(struct.mdbClusterId),
        user: cdktf.stringToTerraform(struct.user),
        on_premise: datatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseToTerraform(struct.onPremise),
        password: datatransferEndpointSettingsMongoSourceConnectionConnectionOptionsPasswordToTerraform(struct.password),
    };
}
exports.datatransferEndpointSettingsMongoSourceConnectionConnectionOptionsToTerraform = datatransferEndpointSettingsMongoSourceConnectionConnectionOptionsToTerraform;
class DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // on_premise - computed: false, optional: true, required: false
        this._onPremise = new DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseOutputReference(this, "on_premise");
        // password - computed: false, optional: true, required: false
        this._password = new DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsPasswordOutputReference(this, "password");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._authSource !== undefined) {
            hasAnyValues = true;
            internalValueResult.authSource = this._authSource;
        }
        if (this._mdbClusterId !== undefined) {
            hasAnyValues = true;
            internalValueResult.mdbClusterId = this._mdbClusterId;
        }
        if (this._user !== undefined) {
            hasAnyValues = true;
            internalValueResult.user = this._user;
        }
        if (this._onPremise?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.onPremise = this._onPremise?.internalValue;
        }
        if (this._password?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.password = this._password?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._authSource = undefined;
            this._mdbClusterId = undefined;
            this._user = undefined;
            this._onPremise.internalValue = undefined;
            this._password.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._authSource = value.authSource;
            this._mdbClusterId = value.mdbClusterId;
            this._user = value.user;
            this._onPremise.internalValue = value.onPremise;
            this._password.internalValue = value.password;
        }
    }
    get authSource() {
        return this.getStringAttribute('auth_source');
    }
    set authSource(value) {
        this._authSource = value;
    }
    resetAuthSource() {
        this._authSource = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authSourceInput() {
        return this._authSource;
    }
    get mdbClusterId() {
        return this.getStringAttribute('mdb_cluster_id');
    }
    set mdbClusterId(value) {
        this._mdbClusterId = value;
    }
    resetMdbClusterId() {
        this._mdbClusterId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mdbClusterIdInput() {
        return this._mdbClusterId;
    }
    get user() {
        return this.getStringAttribute('user');
    }
    set user(value) {
        this._user = value;
    }
    resetUser() {
        this._user = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userInput() {
        return this._user;
    }
    get onPremise() {
        return this._onPremise;
    }
    putOnPremise(value) {
        this._onPremise.internalValue = value;
    }
    resetOnPremise() {
        this._onPremise.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get onPremiseInput() {
        return this._onPremise.internalValue;
    }
    get password() {
        return this._password;
    }
    putPassword(value) {
        this._password.internalValue = value;
    }
    resetPassword() {
        this._password.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password.internalValue;
    }
}
exports.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOutputReference = DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOutputReference;
_8 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOutputReference[_8] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsMongoSourceConnectionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        connection_options: datatransferEndpointSettingsMongoSourceConnectionConnectionOptionsToTerraform(struct.connectionOptions),
    };
}
exports.datatransferEndpointSettingsMongoSourceConnectionToTerraform = datatransferEndpointSettingsMongoSourceConnectionToTerraform;
class DatatransferEndpointSettingsMongoSourceConnectionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // connection_options - computed: false, optional: true, required: false
        this._connectionOptions = new DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOutputReference(this, "connection_options");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._connectionOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectionOptions = this._connectionOptions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._connectionOptions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._connectionOptions.internalValue = value.connectionOptions;
        }
    }
    get connectionOptions() {
        return this._connectionOptions;
    }
    putConnectionOptions(value) {
        this._connectionOptions.internalValue = value;
    }
    resetConnectionOptions() {
        this._connectionOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionOptionsInput() {
        return this._connectionOptions.internalValue;
    }
}
exports.DatatransferEndpointSettingsMongoSourceConnectionOutputReference = DatatransferEndpointSettingsMongoSourceConnectionOutputReference;
_9 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsMongoSourceConnectionOutputReference[_9] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsMongoSourceConnectionOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsMongoSourceExcludedCollectionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        collection_name: cdktf.stringToTerraform(struct.collectionName),
        database_name: cdktf.stringToTerraform(struct.databaseName),
    };
}
exports.datatransferEndpointSettingsMongoSourceExcludedCollectionsToTerraform = datatransferEndpointSettingsMongoSourceExcludedCollectionsToTerraform;
class DatatransferEndpointSettingsMongoSourceExcludedCollectionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._collectionName !== undefined) {
            hasAnyValues = true;
            internalValueResult.collectionName = this._collectionName;
        }
        if (this._databaseName !== undefined) {
            hasAnyValues = true;
            internalValueResult.databaseName = this._databaseName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._collectionName = undefined;
            this._databaseName = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._collectionName = value.collectionName;
            this._databaseName = value.databaseName;
        }
    }
    get collectionName() {
        return this.getStringAttribute('collection_name');
    }
    set collectionName(value) {
        this._collectionName = value;
    }
    resetCollectionName() {
        this._collectionName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get collectionNameInput() {
        return this._collectionName;
    }
    get databaseName() {
        return this.getStringAttribute('database_name');
    }
    set databaseName(value) {
        this._databaseName = value;
    }
    resetDatabaseName() {
        this._databaseName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get databaseNameInput() {
        return this._databaseName;
    }
}
exports.DatatransferEndpointSettingsMongoSourceExcludedCollectionsOutputReference = DatatransferEndpointSettingsMongoSourceExcludedCollectionsOutputReference;
_10 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsMongoSourceExcludedCollectionsOutputReference[_10] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsMongoSourceExcludedCollectionsOutputReference", version: "2.0.32" };
class DatatransferEndpointSettingsMongoSourceExcludedCollectionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatatransferEndpointSettingsMongoSourceExcludedCollectionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatatransferEndpointSettingsMongoSourceExcludedCollectionsList = DatatransferEndpointSettingsMongoSourceExcludedCollectionsList;
_11 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsMongoSourceExcludedCollectionsList[_11] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsMongoSourceExcludedCollectionsList", version: "2.0.32" };
function datatransferEndpointSettingsMongoSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        secondary_preferred_mode: cdktf.booleanToTerraform(struct.secondaryPreferredMode),
        security_groups: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.securityGroups),
        subnet_id: cdktf.stringToTerraform(struct.subnetId),
        collections: cdktf.listMapper(datatransferEndpointSettingsMongoSourceCollectionsToTerraform, true)(struct.collections),
        connection: datatransferEndpointSettingsMongoSourceConnectionToTerraform(struct.connection),
        excluded_collections: cdktf.listMapper(datatransferEndpointSettingsMongoSourceExcludedCollectionsToTerraform, true)(struct.excludedCollections),
    };
}
exports.datatransferEndpointSettingsMongoSourceToTerraform = datatransferEndpointSettingsMongoSourceToTerraform;
class DatatransferEndpointSettingsMongoSourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // collections - computed: false, optional: true, required: false
        this._collections = new DatatransferEndpointSettingsMongoSourceCollectionsList(this, "collections", false);
        // connection - computed: false, optional: true, required: false
        this._connection = new DatatransferEndpointSettingsMongoSourceConnectionOutputReference(this, "connection");
        // excluded_collections - computed: false, optional: true, required: false
        this._excludedCollections = new DatatransferEndpointSettingsMongoSourceExcludedCollectionsList(this, "excluded_collections", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._secondaryPreferredMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.secondaryPreferredMode = this._secondaryPreferredMode;
        }
        if (this._securityGroups !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityGroups = this._securityGroups;
        }
        if (this._subnetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetId = this._subnetId;
        }
        if (this._collections?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.collections = this._collections?.internalValue;
        }
        if (this._connection?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.connection = this._connection?.internalValue;
        }
        if (this._excludedCollections?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludedCollections = this._excludedCollections?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._secondaryPreferredMode = undefined;
            this._securityGroups = undefined;
            this._subnetId = undefined;
            this._collections.internalValue = undefined;
            this._connection.internalValue = undefined;
            this._excludedCollections.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._secondaryPreferredMode = value.secondaryPreferredMode;
            this._securityGroups = value.securityGroups;
            this._subnetId = value.subnetId;
            this._collections.internalValue = value.collections;
            this._connection.internalValue = value.connection;
            this._excludedCollections.internalValue = value.excludedCollections;
        }
    }
    get secondaryPreferredMode() {
        return this.getBooleanAttribute('secondary_preferred_mode');
    }
    set secondaryPreferredMode(value) {
        this._secondaryPreferredMode = value;
    }
    resetSecondaryPreferredMode() {
        this._secondaryPreferredMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secondaryPreferredModeInput() {
        return this._secondaryPreferredMode;
    }
    get securityGroups() {
        return this.getListAttribute('security_groups');
    }
    set securityGroups(value) {
        this._securityGroups = value;
    }
    resetSecurityGroups() {
        this._securityGroups = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityGroupsInput() {
        return this._securityGroups;
    }
    get subnetId() {
        return this.getStringAttribute('subnet_id');
    }
    set subnetId(value) {
        this._subnetId = value;
    }
    resetSubnetId() {
        this._subnetId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetIdInput() {
        return this._subnetId;
    }
    get collections() {
        return this._collections;
    }
    putCollections(value) {
        this._collections.internalValue = value;
    }
    resetCollections() {
        this._collections.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get collectionsInput() {
        return this._collections.internalValue;
    }
    get connection() {
        return this._connection;
    }
    putConnection(value) {
        this._connection.internalValue = value;
    }
    resetConnection() {
        this._connection.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionInput() {
        return this._connection.internalValue;
    }
    get excludedCollections() {
        return this._excludedCollections;
    }
    putExcludedCollections(value) {
        this._excludedCollections.internalValue = value;
    }
    resetExcludedCollections() {
        this._excludedCollections.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludedCollectionsInput() {
        return this._excludedCollections.internalValue;
    }
}
exports.DatatransferEndpointSettingsMongoSourceOutputReference = DatatransferEndpointSettingsMongoSourceOutputReference;
_12 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsMongoSourceOutputReference[_12] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsMongoSourceOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeDisabledToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.datatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeDisabledToTerraform = datatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeDisabledToTerraform;
class DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeDisabledOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeDisabledOutputReference = DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeDisabledOutputReference;
_13 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeDisabledOutputReference[_13] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeDisabledOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeEnabledToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ca_certificate: cdktf.stringToTerraform(struct.caCertificate),
    };
}
exports.datatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeEnabledToTerraform = datatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeEnabledToTerraform;
class DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeEnabledOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._caCertificate !== undefined) {
            hasAnyValues = true;
            internalValueResult.caCertificate = this._caCertificate;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._caCertificate = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._caCertificate = value.caCertificate;
        }
    }
    get caCertificate() {
        return this.getStringAttribute('ca_certificate');
    }
    set caCertificate(value) {
        this._caCertificate = value;
    }
    resetCaCertificate() {
        this._caCertificate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get caCertificateInput() {
        return this._caCertificate;
    }
}
exports.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeEnabledOutputReference = DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeEnabledOutputReference;
_14 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeEnabledOutputReference[_14] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeEnabledOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        disabled: datatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeDisabledToTerraform(struct.disabled),
        enabled: datatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeEnabledToTerraform(struct.enabled),
    };
}
exports.datatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeToTerraform = datatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeToTerraform;
class DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // disabled - computed: false, optional: true, required: false
        this._disabled = new DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeDisabledOutputReference(this, "disabled");
        // enabled - computed: false, optional: true, required: false
        this._enabled = new DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeEnabledOutputReference(this, "enabled");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._disabled?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.disabled = this._disabled?.internalValue;
        }
        if (this._enabled?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._disabled.internalValue = undefined;
            this._enabled.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._disabled.internalValue = value.disabled;
            this._enabled.internalValue = value.enabled;
        }
    }
    get disabled() {
        return this._disabled;
    }
    putDisabled(value) {
        this._disabled.internalValue = value;
    }
    resetDisabled() {
        this._disabled.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disabledInput() {
        return this._disabled.internalValue;
    }
    get enabled() {
        return this._enabled;
    }
    putEnabled(value) {
        this._enabled.internalValue = value;
    }
    resetEnabled() {
        this._enabled.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled.internalValue;
    }
}
exports.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeOutputReference = DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeOutputReference;
_15 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeOutputReference[_15] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        hosts: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.hosts),
        port: cdktf.numberToTerraform(struct.port),
        replica_set: cdktf.stringToTerraform(struct.replicaSet),
        tls_mode: datatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeToTerraform(struct.tlsMode),
    };
}
exports.datatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseToTerraform = datatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseToTerraform;
class DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // tls_mode - computed: false, optional: true, required: false
        this._tlsMode = new DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeOutputReference(this, "tls_mode");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hosts !== undefined) {
            hasAnyValues = true;
            internalValueResult.hosts = this._hosts;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        if (this._replicaSet !== undefined) {
            hasAnyValues = true;
            internalValueResult.replicaSet = this._replicaSet;
        }
        if (this._tlsMode?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tlsMode = this._tlsMode?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hosts = undefined;
            this._port = undefined;
            this._replicaSet = undefined;
            this._tlsMode.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hosts = value.hosts;
            this._port = value.port;
            this._replicaSet = value.replicaSet;
            this._tlsMode.internalValue = value.tlsMode;
        }
    }
    get hosts() {
        return this.getListAttribute('hosts');
    }
    set hosts(value) {
        this._hosts = value;
    }
    resetHosts() {
        this._hosts = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostsInput() {
        return this._hosts;
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    resetPort() {
        this._port = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
    get replicaSet() {
        return this.getStringAttribute('replica_set');
    }
    set replicaSet(value) {
        this._replicaSet = value;
    }
    resetReplicaSet() {
        this._replicaSet = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replicaSetInput() {
        return this._replicaSet;
    }
    get tlsMode() {
        return this._tlsMode;
    }
    putTlsMode(value) {
        this._tlsMode.internalValue = value;
    }
    resetTlsMode() {
        this._tlsMode.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tlsModeInput() {
        return this._tlsMode.internalValue;
    }
}
exports.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseOutputReference = DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseOutputReference;
_16 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseOutputReference[_16] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsMongoTargetConnectionConnectionOptionsPasswordToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        raw: cdktf.stringToTerraform(struct.raw),
    };
}
exports.datatransferEndpointSettingsMongoTargetConnectionConnectionOptionsPasswordToTerraform = datatransferEndpointSettingsMongoTargetConnectionConnectionOptionsPasswordToTerraform;
class DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsPasswordOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._raw !== undefined) {
            hasAnyValues = true;
            internalValueResult.raw = this._raw;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._raw = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._raw = value.raw;
        }
    }
    get raw() {
        return this.getStringAttribute('raw');
    }
    set raw(value) {
        this._raw = value;
    }
    resetRaw() {
        this._raw = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rawInput() {
        return this._raw;
    }
}
exports.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsPasswordOutputReference = DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsPasswordOutputReference;
_17 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsPasswordOutputReference[_17] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsPasswordOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsMongoTargetConnectionConnectionOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auth_source: cdktf.stringToTerraform(struct.authSource),
        mdb_cluster_id: cdktf.stringToTerraform(struct.mdbClusterId),
        user: cdktf.stringToTerraform(struct.user),
        on_premise: datatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseToTerraform(struct.onPremise),
        password: datatransferEndpointSettingsMongoTargetConnectionConnectionOptionsPasswordToTerraform(struct.password),
    };
}
exports.datatransferEndpointSettingsMongoTargetConnectionConnectionOptionsToTerraform = datatransferEndpointSettingsMongoTargetConnectionConnectionOptionsToTerraform;
class DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // on_premise - computed: false, optional: true, required: false
        this._onPremise = new DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseOutputReference(this, "on_premise");
        // password - computed: false, optional: true, required: false
        this._password = new DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsPasswordOutputReference(this, "password");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._authSource !== undefined) {
            hasAnyValues = true;
            internalValueResult.authSource = this._authSource;
        }
        if (this._mdbClusterId !== undefined) {
            hasAnyValues = true;
            internalValueResult.mdbClusterId = this._mdbClusterId;
        }
        if (this._user !== undefined) {
            hasAnyValues = true;
            internalValueResult.user = this._user;
        }
        if (this._onPremise?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.onPremise = this._onPremise?.internalValue;
        }
        if (this._password?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.password = this._password?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._authSource = undefined;
            this._mdbClusterId = undefined;
            this._user = undefined;
            this._onPremise.internalValue = undefined;
            this._password.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._authSource = value.authSource;
            this._mdbClusterId = value.mdbClusterId;
            this._user = value.user;
            this._onPremise.internalValue = value.onPremise;
            this._password.internalValue = value.password;
        }
    }
    get authSource() {
        return this.getStringAttribute('auth_source');
    }
    set authSource(value) {
        this._authSource = value;
    }
    resetAuthSource() {
        this._authSource = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authSourceInput() {
        return this._authSource;
    }
    get mdbClusterId() {
        return this.getStringAttribute('mdb_cluster_id');
    }
    set mdbClusterId(value) {
        this._mdbClusterId = value;
    }
    resetMdbClusterId() {
        this._mdbClusterId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mdbClusterIdInput() {
        return this._mdbClusterId;
    }
    get user() {
        return this.getStringAttribute('user');
    }
    set user(value) {
        this._user = value;
    }
    resetUser() {
        this._user = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userInput() {
        return this._user;
    }
    get onPremise() {
        return this._onPremise;
    }
    putOnPremise(value) {
        this._onPremise.internalValue = value;
    }
    resetOnPremise() {
        this._onPremise.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get onPremiseInput() {
        return this._onPremise.internalValue;
    }
    get password() {
        return this._password;
    }
    putPassword(value) {
        this._password.internalValue = value;
    }
    resetPassword() {
        this._password.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password.internalValue;
    }
}
exports.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOutputReference = DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOutputReference;
_18 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOutputReference[_18] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsMongoTargetConnectionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        connection_options: datatransferEndpointSettingsMongoTargetConnectionConnectionOptionsToTerraform(struct.connectionOptions),
    };
}
exports.datatransferEndpointSettingsMongoTargetConnectionToTerraform = datatransferEndpointSettingsMongoTargetConnectionToTerraform;
class DatatransferEndpointSettingsMongoTargetConnectionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // connection_options - computed: false, optional: true, required: false
        this._connectionOptions = new DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOutputReference(this, "connection_options");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._connectionOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectionOptions = this._connectionOptions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._connectionOptions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._connectionOptions.internalValue = value.connectionOptions;
        }
    }
    get connectionOptions() {
        return this._connectionOptions;
    }
    putConnectionOptions(value) {
        this._connectionOptions.internalValue = value;
    }
    resetConnectionOptions() {
        this._connectionOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionOptionsInput() {
        return this._connectionOptions.internalValue;
    }
}
exports.DatatransferEndpointSettingsMongoTargetConnectionOutputReference = DatatransferEndpointSettingsMongoTargetConnectionOutputReference;
_19 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsMongoTargetConnectionOutputReference[_19] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsMongoTargetConnectionOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsMongoTargetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cleanup_policy: cdktf.stringToTerraform(struct.cleanupPolicy),
        database: cdktf.stringToTerraform(struct.database),
        security_groups: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.securityGroups),
        subnet_id: cdktf.stringToTerraform(struct.subnetId),
        connection: datatransferEndpointSettingsMongoTargetConnectionToTerraform(struct.connection),
    };
}
exports.datatransferEndpointSettingsMongoTargetToTerraform = datatransferEndpointSettingsMongoTargetToTerraform;
class DatatransferEndpointSettingsMongoTargetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // connection - computed: false, optional: true, required: false
        this._connection = new DatatransferEndpointSettingsMongoTargetConnectionOutputReference(this, "connection");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cleanupPolicy !== undefined) {
            hasAnyValues = true;
            internalValueResult.cleanupPolicy = this._cleanupPolicy;
        }
        if (this._database !== undefined) {
            hasAnyValues = true;
            internalValueResult.database = this._database;
        }
        if (this._securityGroups !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityGroups = this._securityGroups;
        }
        if (this._subnetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetId = this._subnetId;
        }
        if (this._connection?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.connection = this._connection?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cleanupPolicy = undefined;
            this._database = undefined;
            this._securityGroups = undefined;
            this._subnetId = undefined;
            this._connection.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cleanupPolicy = value.cleanupPolicy;
            this._database = value.database;
            this._securityGroups = value.securityGroups;
            this._subnetId = value.subnetId;
            this._connection.internalValue = value.connection;
        }
    }
    get cleanupPolicy() {
        return this.getStringAttribute('cleanup_policy');
    }
    set cleanupPolicy(value) {
        this._cleanupPolicy = value;
    }
    resetCleanupPolicy() {
        this._cleanupPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cleanupPolicyInput() {
        return this._cleanupPolicy;
    }
    get database() {
        return this.getStringAttribute('database');
    }
    set database(value) {
        this._database = value;
    }
    resetDatabase() {
        this._database = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get databaseInput() {
        return this._database;
    }
    get securityGroups() {
        return this.getListAttribute('security_groups');
    }
    set securityGroups(value) {
        this._securityGroups = value;
    }
    resetSecurityGroups() {
        this._securityGroups = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityGroupsInput() {
        return this._securityGroups;
    }
    get subnetId() {
        return this.getStringAttribute('subnet_id');
    }
    set subnetId(value) {
        this._subnetId = value;
    }
    resetSubnetId() {
        this._subnetId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetIdInput() {
        return this._subnetId;
    }
    get connection() {
        return this._connection;
    }
    putConnection(value) {
        this._connection.internalValue = value;
    }
    resetConnection() {
        this._connection.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionInput() {
        return this._connection.internalValue;
    }
}
exports.DatatransferEndpointSettingsMongoTargetOutputReference = DatatransferEndpointSettingsMongoTargetOutputReference;
_20 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsMongoTargetOutputReference[_20] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsMongoTargetOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeDisabledToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.datatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeDisabledToTerraform = datatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeDisabledToTerraform;
class DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeDisabledOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeDisabledOutputReference = DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeDisabledOutputReference;
_21 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeDisabledOutputReference[_21] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeDisabledOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeEnabledToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ca_certificate: cdktf.stringToTerraform(struct.caCertificate),
    };
}
exports.datatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeEnabledToTerraform = datatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeEnabledToTerraform;
class DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeEnabledOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._caCertificate !== undefined) {
            hasAnyValues = true;
            internalValueResult.caCertificate = this._caCertificate;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._caCertificate = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._caCertificate = value.caCertificate;
        }
    }
    get caCertificate() {
        return this.getStringAttribute('ca_certificate');
    }
    set caCertificate(value) {
        this._caCertificate = value;
    }
    resetCaCertificate() {
        this._caCertificate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get caCertificateInput() {
        return this._caCertificate;
    }
}
exports.DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeEnabledOutputReference = DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeEnabledOutputReference;
_22 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeEnabledOutputReference[_22] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeEnabledOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        disabled: datatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeDisabledToTerraform(struct.disabled),
        enabled: datatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeEnabledToTerraform(struct.enabled),
    };
}
exports.datatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeToTerraform = datatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeToTerraform;
class DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // disabled - computed: false, optional: true, required: false
        this._disabled = new DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeDisabledOutputReference(this, "disabled");
        // enabled - computed: false, optional: true, required: false
        this._enabled = new DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeEnabledOutputReference(this, "enabled");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._disabled?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.disabled = this._disabled?.internalValue;
        }
        if (this._enabled?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._disabled.internalValue = undefined;
            this._enabled.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._disabled.internalValue = value.disabled;
            this._enabled.internalValue = value.enabled;
        }
    }
    get disabled() {
        return this._disabled;
    }
    putDisabled(value) {
        this._disabled.internalValue = value;
    }
    resetDisabled() {
        this._disabled.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disabledInput() {
        return this._disabled.internalValue;
    }
    get enabled() {
        return this._enabled;
    }
    putEnabled(value) {
        this._enabled.internalValue = value;
    }
    resetEnabled() {
        this._enabled.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled.internalValue;
    }
}
exports.DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeOutputReference = DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeOutputReference;
_23 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeOutputReference[_23] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsMysqlSourceConnectionOnPremiseToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        hosts: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.hosts),
        port: cdktf.numberToTerraform(struct.port),
        subnet_id: cdktf.stringToTerraform(struct.subnetId),
        tls_mode: datatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeToTerraform(struct.tlsMode),
    };
}
exports.datatransferEndpointSettingsMysqlSourceConnectionOnPremiseToTerraform = datatransferEndpointSettingsMysqlSourceConnectionOnPremiseToTerraform;
class DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // tls_mode - computed: false, optional: true, required: false
        this._tlsMode = new DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeOutputReference(this, "tls_mode");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hosts !== undefined) {
            hasAnyValues = true;
            internalValueResult.hosts = this._hosts;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        if (this._subnetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetId = this._subnetId;
        }
        if (this._tlsMode?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tlsMode = this._tlsMode?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hosts = undefined;
            this._port = undefined;
            this._subnetId = undefined;
            this._tlsMode.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hosts = value.hosts;
            this._port = value.port;
            this._subnetId = value.subnetId;
            this._tlsMode.internalValue = value.tlsMode;
        }
    }
    get hosts() {
        return this.getListAttribute('hosts');
    }
    set hosts(value) {
        this._hosts = value;
    }
    resetHosts() {
        this._hosts = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostsInput() {
        return this._hosts;
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    resetPort() {
        this._port = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
    get subnetId() {
        return this.getStringAttribute('subnet_id');
    }
    set subnetId(value) {
        this._subnetId = value;
    }
    resetSubnetId() {
        this._subnetId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetIdInput() {
        return this._subnetId;
    }
    get tlsMode() {
        return this._tlsMode;
    }
    putTlsMode(value) {
        this._tlsMode.internalValue = value;
    }
    resetTlsMode() {
        this._tlsMode.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tlsModeInput() {
        return this._tlsMode.internalValue;
    }
}
exports.DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseOutputReference = DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseOutputReference;
_24 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseOutputReference[_24] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsMysqlSourceConnectionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        mdb_cluster_id: cdktf.stringToTerraform(struct.mdbClusterId),
        on_premise: datatransferEndpointSettingsMysqlSourceConnectionOnPremiseToTerraform(struct.onPremise),
    };
}
exports.datatransferEndpointSettingsMysqlSourceConnectionToTerraform = datatransferEndpointSettingsMysqlSourceConnectionToTerraform;
class DatatransferEndpointSettingsMysqlSourceConnectionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // on_premise - computed: false, optional: true, required: false
        this._onPremise = new DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseOutputReference(this, "on_premise");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._mdbClusterId !== undefined) {
            hasAnyValues = true;
            internalValueResult.mdbClusterId = this._mdbClusterId;
        }
        if (this._onPremise?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.onPremise = this._onPremise?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._mdbClusterId = undefined;
            this._onPremise.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._mdbClusterId = value.mdbClusterId;
            this._onPremise.internalValue = value.onPremise;
        }
    }
    get mdbClusterId() {
        return this.getStringAttribute('mdb_cluster_id');
    }
    set mdbClusterId(value) {
        this._mdbClusterId = value;
    }
    resetMdbClusterId() {
        this._mdbClusterId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mdbClusterIdInput() {
        return this._mdbClusterId;
    }
    get onPremise() {
        return this._onPremise;
    }
    putOnPremise(value) {
        this._onPremise.internalValue = value;
    }
    resetOnPremise() {
        this._onPremise.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get onPremiseInput() {
        return this._onPremise.internalValue;
    }
}
exports.DatatransferEndpointSettingsMysqlSourceConnectionOutputReference = DatatransferEndpointSettingsMysqlSourceConnectionOutputReference;
_25 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsMysqlSourceConnectionOutputReference[_25] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsMysqlSourceConnectionOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsMysqlSourceObjectTransferSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        routine: cdktf.stringToTerraform(struct.routine),
        trigger: cdktf.stringToTerraform(struct.trigger),
        view: cdktf.stringToTerraform(struct.view),
    };
}
exports.datatransferEndpointSettingsMysqlSourceObjectTransferSettingsToTerraform = datatransferEndpointSettingsMysqlSourceObjectTransferSettingsToTerraform;
class DatatransferEndpointSettingsMysqlSourceObjectTransferSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._routine !== undefined) {
            hasAnyValues = true;
            internalValueResult.routine = this._routine;
        }
        if (this._trigger !== undefined) {
            hasAnyValues = true;
            internalValueResult.trigger = this._trigger;
        }
        if (this._view !== undefined) {
            hasAnyValues = true;
            internalValueResult.view = this._view;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._routine = undefined;
            this._trigger = undefined;
            this._view = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._routine = value.routine;
            this._trigger = value.trigger;
            this._view = value.view;
        }
    }
    get routine() {
        return this.getStringAttribute('routine');
    }
    set routine(value) {
        this._routine = value;
    }
    resetRoutine() {
        this._routine = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get routineInput() {
        return this._routine;
    }
    get trigger() {
        return this.getStringAttribute('trigger');
    }
    set trigger(value) {
        this._trigger = value;
    }
    resetTrigger() {
        this._trigger = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get triggerInput() {
        return this._trigger;
    }
    get view() {
        return this.getStringAttribute('view');
    }
    set view(value) {
        this._view = value;
    }
    resetView() {
        this._view = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get viewInput() {
        return this._view;
    }
}
exports.DatatransferEndpointSettingsMysqlSourceObjectTransferSettingsOutputReference = DatatransferEndpointSettingsMysqlSourceObjectTransferSettingsOutputReference;
_26 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsMysqlSourceObjectTransferSettingsOutputReference[_26] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsMysqlSourceObjectTransferSettingsOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsMysqlSourcePasswordToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        raw: cdktf.stringToTerraform(struct.raw),
    };
}
exports.datatransferEndpointSettingsMysqlSourcePasswordToTerraform = datatransferEndpointSettingsMysqlSourcePasswordToTerraform;
class DatatransferEndpointSettingsMysqlSourcePasswordOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._raw !== undefined) {
            hasAnyValues = true;
            internalValueResult.raw = this._raw;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._raw = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._raw = value.raw;
        }
    }
    get raw() {
        return this.getStringAttribute('raw');
    }
    set raw(value) {
        this._raw = value;
    }
    resetRaw() {
        this._raw = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rawInput() {
        return this._raw;
    }
}
exports.DatatransferEndpointSettingsMysqlSourcePasswordOutputReference = DatatransferEndpointSettingsMysqlSourcePasswordOutputReference;
_27 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsMysqlSourcePasswordOutputReference[_27] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsMysqlSourcePasswordOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsMysqlSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        exclude_tables_regex: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.excludeTablesRegex),
        include_tables_regex: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.includeTablesRegex),
        security_groups: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.securityGroups),
        service_database: cdktf.stringToTerraform(struct.serviceDatabase),
        timezone: cdktf.stringToTerraform(struct.timezone),
        user: cdktf.stringToTerraform(struct.user),
        connection: datatransferEndpointSettingsMysqlSourceConnectionToTerraform(struct.connection),
        object_transfer_settings: datatransferEndpointSettingsMysqlSourceObjectTransferSettingsToTerraform(struct.objectTransferSettings),
        password: datatransferEndpointSettingsMysqlSourcePasswordToTerraform(struct.password),
    };
}
exports.datatransferEndpointSettingsMysqlSourceToTerraform = datatransferEndpointSettingsMysqlSourceToTerraform;
class DatatransferEndpointSettingsMysqlSourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // connection - computed: false, optional: true, required: false
        this._connection = new DatatransferEndpointSettingsMysqlSourceConnectionOutputReference(this, "connection");
        // object_transfer_settings - computed: false, optional: true, required: false
        this._objectTransferSettings = new DatatransferEndpointSettingsMysqlSourceObjectTransferSettingsOutputReference(this, "object_transfer_settings");
        // password - computed: false, optional: true, required: false
        this._password = new DatatransferEndpointSettingsMysqlSourcePasswordOutputReference(this, "password");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._database !== undefined) {
            hasAnyValues = true;
            internalValueResult.database = this._database;
        }
        if (this._excludeTablesRegex !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludeTablesRegex = this._excludeTablesRegex;
        }
        if (this._includeTablesRegex !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeTablesRegex = this._includeTablesRegex;
        }
        if (this._securityGroups !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityGroups = this._securityGroups;
        }
        if (this._serviceDatabase !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceDatabase = this._serviceDatabase;
        }
        if (this._timezone !== undefined) {
            hasAnyValues = true;
            internalValueResult.timezone = this._timezone;
        }
        if (this._user !== undefined) {
            hasAnyValues = true;
            internalValueResult.user = this._user;
        }
        if (this._connection?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.connection = this._connection?.internalValue;
        }
        if (this._objectTransferSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.objectTransferSettings = this._objectTransferSettings?.internalValue;
        }
        if (this._password?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.password = this._password?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._database = undefined;
            this._excludeTablesRegex = undefined;
            this._includeTablesRegex = undefined;
            this._securityGroups = undefined;
            this._serviceDatabase = undefined;
            this._timezone = undefined;
            this._user = undefined;
            this._connection.internalValue = undefined;
            this._objectTransferSettings.internalValue = undefined;
            this._password.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._database = value.database;
            this._excludeTablesRegex = value.excludeTablesRegex;
            this._includeTablesRegex = value.includeTablesRegex;
            this._securityGroups = value.securityGroups;
            this._serviceDatabase = value.serviceDatabase;
            this._timezone = value.timezone;
            this._user = value.user;
            this._connection.internalValue = value.connection;
            this._objectTransferSettings.internalValue = value.objectTransferSettings;
            this._password.internalValue = value.password;
        }
    }
    get database() {
        return this.getStringAttribute('database');
    }
    set database(value) {
        this._database = value;
    }
    resetDatabase() {
        this._database = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get databaseInput() {
        return this._database;
    }
    get excludeTablesRegex() {
        return this.getListAttribute('exclude_tables_regex');
    }
    set excludeTablesRegex(value) {
        this._excludeTablesRegex = value;
    }
    resetExcludeTablesRegex() {
        this._excludeTablesRegex = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludeTablesRegexInput() {
        return this._excludeTablesRegex;
    }
    get includeTablesRegex() {
        return this.getListAttribute('include_tables_regex');
    }
    set includeTablesRegex(value) {
        this._includeTablesRegex = value;
    }
    resetIncludeTablesRegex() {
        this._includeTablesRegex = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeTablesRegexInput() {
        return this._includeTablesRegex;
    }
    get securityGroups() {
        return this.getListAttribute('security_groups');
    }
    set securityGroups(value) {
        this._securityGroups = value;
    }
    resetSecurityGroups() {
        this._securityGroups = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityGroupsInput() {
        return this._securityGroups;
    }
    get serviceDatabase() {
        return this.getStringAttribute('service_database');
    }
    set serviceDatabase(value) {
        this._serviceDatabase = value;
    }
    resetServiceDatabase() {
        this._serviceDatabase = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceDatabaseInput() {
        return this._serviceDatabase;
    }
    get timezone() {
        return this.getStringAttribute('timezone');
    }
    set timezone(value) {
        this._timezone = value;
    }
    resetTimezone() {
        this._timezone = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timezoneInput() {
        return this._timezone;
    }
    get user() {
        return this.getStringAttribute('user');
    }
    set user(value) {
        this._user = value;
    }
    resetUser() {
        this._user = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userInput() {
        return this._user;
    }
    get connection() {
        return this._connection;
    }
    putConnection(value) {
        this._connection.internalValue = value;
    }
    resetConnection() {
        this._connection.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionInput() {
        return this._connection.internalValue;
    }
    get objectTransferSettings() {
        return this._objectTransferSettings;
    }
    putObjectTransferSettings(value) {
        this._objectTransferSettings.internalValue = value;
    }
    resetObjectTransferSettings() {
        this._objectTransferSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get objectTransferSettingsInput() {
        return this._objectTransferSettings.internalValue;
    }
    get password() {
        return this._password;
    }
    putPassword(value) {
        this._password.internalValue = value;
    }
    resetPassword() {
        this._password.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password.internalValue;
    }
}
exports.DatatransferEndpointSettingsMysqlSourceOutputReference = DatatransferEndpointSettingsMysqlSourceOutputReference;
_28 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsMysqlSourceOutputReference[_28] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsMysqlSourceOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeDisabledToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.datatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeDisabledToTerraform = datatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeDisabledToTerraform;
class DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeDisabledOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeDisabledOutputReference = DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeDisabledOutputReference;
_29 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeDisabledOutputReference[_29] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeDisabledOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeEnabledToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ca_certificate: cdktf.stringToTerraform(struct.caCertificate),
    };
}
exports.datatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeEnabledToTerraform = datatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeEnabledToTerraform;
class DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeEnabledOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._caCertificate !== undefined) {
            hasAnyValues = true;
            internalValueResult.caCertificate = this._caCertificate;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._caCertificate = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._caCertificate = value.caCertificate;
        }
    }
    get caCertificate() {
        return this.getStringAttribute('ca_certificate');
    }
    set caCertificate(value) {
        this._caCertificate = value;
    }
    resetCaCertificate() {
        this._caCertificate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get caCertificateInput() {
        return this._caCertificate;
    }
}
exports.DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeEnabledOutputReference = DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeEnabledOutputReference;
_30 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeEnabledOutputReference[_30] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeEnabledOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        disabled: datatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeDisabledToTerraform(struct.disabled),
        enabled: datatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeEnabledToTerraform(struct.enabled),
    };
}
exports.datatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeToTerraform = datatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeToTerraform;
class DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // disabled - computed: false, optional: true, required: false
        this._disabled = new DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeDisabledOutputReference(this, "disabled");
        // enabled - computed: false, optional: true, required: false
        this._enabled = new DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeEnabledOutputReference(this, "enabled");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._disabled?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.disabled = this._disabled?.internalValue;
        }
        if (this._enabled?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._disabled.internalValue = undefined;
            this._enabled.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._disabled.internalValue = value.disabled;
            this._enabled.internalValue = value.enabled;
        }
    }
    get disabled() {
        return this._disabled;
    }
    putDisabled(value) {
        this._disabled.internalValue = value;
    }
    resetDisabled() {
        this._disabled.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disabledInput() {
        return this._disabled.internalValue;
    }
    get enabled() {
        return this._enabled;
    }
    putEnabled(value) {
        this._enabled.internalValue = value;
    }
    resetEnabled() {
        this._enabled.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled.internalValue;
    }
}
exports.DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeOutputReference = DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeOutputReference;
_31 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeOutputReference[_31] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsMysqlTargetConnectionOnPremiseToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        hosts: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.hosts),
        port: cdktf.numberToTerraform(struct.port),
        subnet_id: cdktf.stringToTerraform(struct.subnetId),
        tls_mode: datatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeToTerraform(struct.tlsMode),
    };
}
exports.datatransferEndpointSettingsMysqlTargetConnectionOnPremiseToTerraform = datatransferEndpointSettingsMysqlTargetConnectionOnPremiseToTerraform;
class DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // tls_mode - computed: false, optional: true, required: false
        this._tlsMode = new DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeOutputReference(this, "tls_mode");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hosts !== undefined) {
            hasAnyValues = true;
            internalValueResult.hosts = this._hosts;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        if (this._subnetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetId = this._subnetId;
        }
        if (this._tlsMode?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tlsMode = this._tlsMode?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hosts = undefined;
            this._port = undefined;
            this._subnetId = undefined;
            this._tlsMode.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hosts = value.hosts;
            this._port = value.port;
            this._subnetId = value.subnetId;
            this._tlsMode.internalValue = value.tlsMode;
        }
    }
    get hosts() {
        return this.getListAttribute('hosts');
    }
    set hosts(value) {
        this._hosts = value;
    }
    resetHosts() {
        this._hosts = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostsInput() {
        return this._hosts;
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    resetPort() {
        this._port = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
    get subnetId() {
        return this.getStringAttribute('subnet_id');
    }
    set subnetId(value) {
        this._subnetId = value;
    }
    resetSubnetId() {
        this._subnetId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetIdInput() {
        return this._subnetId;
    }
    get tlsMode() {
        return this._tlsMode;
    }
    putTlsMode(value) {
        this._tlsMode.internalValue = value;
    }
    resetTlsMode() {
        this._tlsMode.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tlsModeInput() {
        return this._tlsMode.internalValue;
    }
}
exports.DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseOutputReference = DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseOutputReference;
_32 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseOutputReference[_32] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsMysqlTargetConnectionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        mdb_cluster_id: cdktf.stringToTerraform(struct.mdbClusterId),
        on_premise: datatransferEndpointSettingsMysqlTargetConnectionOnPremiseToTerraform(struct.onPremise),
    };
}
exports.datatransferEndpointSettingsMysqlTargetConnectionToTerraform = datatransferEndpointSettingsMysqlTargetConnectionToTerraform;
class DatatransferEndpointSettingsMysqlTargetConnectionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // on_premise - computed: false, optional: true, required: false
        this._onPremise = new DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseOutputReference(this, "on_premise");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._mdbClusterId !== undefined) {
            hasAnyValues = true;
            internalValueResult.mdbClusterId = this._mdbClusterId;
        }
        if (this._onPremise?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.onPremise = this._onPremise?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._mdbClusterId = undefined;
            this._onPremise.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._mdbClusterId = value.mdbClusterId;
            this._onPremise.internalValue = value.onPremise;
        }
    }
    get mdbClusterId() {
        return this.getStringAttribute('mdb_cluster_id');
    }
    set mdbClusterId(value) {
        this._mdbClusterId = value;
    }
    resetMdbClusterId() {
        this._mdbClusterId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mdbClusterIdInput() {
        return this._mdbClusterId;
    }
    get onPremise() {
        return this._onPremise;
    }
    putOnPremise(value) {
        this._onPremise.internalValue = value;
    }
    resetOnPremise() {
        this._onPremise.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get onPremiseInput() {
        return this._onPremise.internalValue;
    }
}
exports.DatatransferEndpointSettingsMysqlTargetConnectionOutputReference = DatatransferEndpointSettingsMysqlTargetConnectionOutputReference;
_33 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsMysqlTargetConnectionOutputReference[_33] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsMysqlTargetConnectionOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsMysqlTargetPasswordToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        raw: cdktf.stringToTerraform(struct.raw),
    };
}
exports.datatransferEndpointSettingsMysqlTargetPasswordToTerraform = datatransferEndpointSettingsMysqlTargetPasswordToTerraform;
class DatatransferEndpointSettingsMysqlTargetPasswordOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._raw !== undefined) {
            hasAnyValues = true;
            internalValueResult.raw = this._raw;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._raw = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._raw = value.raw;
        }
    }
    get raw() {
        return this.getStringAttribute('raw');
    }
    set raw(value) {
        this._raw = value;
    }
    resetRaw() {
        this._raw = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rawInput() {
        return this._raw;
    }
}
exports.DatatransferEndpointSettingsMysqlTargetPasswordOutputReference = DatatransferEndpointSettingsMysqlTargetPasswordOutputReference;
_34 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsMysqlTargetPasswordOutputReference[_34] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsMysqlTargetPasswordOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsMysqlTargetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        security_groups: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.securityGroups),
        skip_constraint_checks: cdktf.booleanToTerraform(struct.skipConstraintChecks),
        sql_mode: cdktf.stringToTerraform(struct.sqlMode),
        timezone: cdktf.stringToTerraform(struct.timezone),
        user: cdktf.stringToTerraform(struct.user),
        connection: datatransferEndpointSettingsMysqlTargetConnectionToTerraform(struct.connection),
        password: datatransferEndpointSettingsMysqlTargetPasswordToTerraform(struct.password),
    };
}
exports.datatransferEndpointSettingsMysqlTargetToTerraform = datatransferEndpointSettingsMysqlTargetToTerraform;
class DatatransferEndpointSettingsMysqlTargetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // connection - computed: false, optional: true, required: false
        this._connection = new DatatransferEndpointSettingsMysqlTargetConnectionOutputReference(this, "connection");
        // password - computed: false, optional: true, required: false
        this._password = new DatatransferEndpointSettingsMysqlTargetPasswordOutputReference(this, "password");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._database !== undefined) {
            hasAnyValues = true;
            internalValueResult.database = this._database;
        }
        if (this._securityGroups !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityGroups = this._securityGroups;
        }
        if (this._skipConstraintChecks !== undefined) {
            hasAnyValues = true;
            internalValueResult.skipConstraintChecks = this._skipConstraintChecks;
        }
        if (this._sqlMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.sqlMode = this._sqlMode;
        }
        if (this._timezone !== undefined) {
            hasAnyValues = true;
            internalValueResult.timezone = this._timezone;
        }
        if (this._user !== undefined) {
            hasAnyValues = true;
            internalValueResult.user = this._user;
        }
        if (this._connection?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.connection = this._connection?.internalValue;
        }
        if (this._password?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.password = this._password?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._database = undefined;
            this._securityGroups = undefined;
            this._skipConstraintChecks = undefined;
            this._sqlMode = undefined;
            this._timezone = undefined;
            this._user = undefined;
            this._connection.internalValue = undefined;
            this._password.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._database = value.database;
            this._securityGroups = value.securityGroups;
            this._skipConstraintChecks = value.skipConstraintChecks;
            this._sqlMode = value.sqlMode;
            this._timezone = value.timezone;
            this._user = value.user;
            this._connection.internalValue = value.connection;
            this._password.internalValue = value.password;
        }
    }
    get database() {
        return this.getStringAttribute('database');
    }
    set database(value) {
        this._database = value;
    }
    resetDatabase() {
        this._database = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get databaseInput() {
        return this._database;
    }
    get securityGroups() {
        return this.getListAttribute('security_groups');
    }
    set securityGroups(value) {
        this._securityGroups = value;
    }
    resetSecurityGroups() {
        this._securityGroups = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityGroupsInput() {
        return this._securityGroups;
    }
    get skipConstraintChecks() {
        return this.getBooleanAttribute('skip_constraint_checks');
    }
    set skipConstraintChecks(value) {
        this._skipConstraintChecks = value;
    }
    resetSkipConstraintChecks() {
        this._skipConstraintChecks = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get skipConstraintChecksInput() {
        return this._skipConstraintChecks;
    }
    get sqlMode() {
        return this.getStringAttribute('sql_mode');
    }
    set sqlMode(value) {
        this._sqlMode = value;
    }
    resetSqlMode() {
        this._sqlMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sqlModeInput() {
        return this._sqlMode;
    }
    get timezone() {
        return this.getStringAttribute('timezone');
    }
    set timezone(value) {
        this._timezone = value;
    }
    resetTimezone() {
        this._timezone = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timezoneInput() {
        return this._timezone;
    }
    get user() {
        return this.getStringAttribute('user');
    }
    set user(value) {
        this._user = value;
    }
    resetUser() {
        this._user = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userInput() {
        return this._user;
    }
    get connection() {
        return this._connection;
    }
    putConnection(value) {
        this._connection.internalValue = value;
    }
    resetConnection() {
        this._connection.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionInput() {
        return this._connection.internalValue;
    }
    get password() {
        return this._password;
    }
    putPassword(value) {
        this._password.internalValue = value;
    }
    resetPassword() {
        this._password.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password.internalValue;
    }
}
exports.DatatransferEndpointSettingsMysqlTargetOutputReference = DatatransferEndpointSettingsMysqlTargetOutputReference;
_35 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsMysqlTargetOutputReference[_35] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsMysqlTargetOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeDisabledToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.datatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeDisabledToTerraform = datatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeDisabledToTerraform;
class DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeDisabledOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeDisabledOutputReference = DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeDisabledOutputReference;
_36 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeDisabledOutputReference[_36] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeDisabledOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeEnabledToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ca_certificate: cdktf.stringToTerraform(struct.caCertificate),
    };
}
exports.datatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeEnabledToTerraform = datatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeEnabledToTerraform;
class DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeEnabledOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._caCertificate !== undefined) {
            hasAnyValues = true;
            internalValueResult.caCertificate = this._caCertificate;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._caCertificate = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._caCertificate = value.caCertificate;
        }
    }
    get caCertificate() {
        return this.getStringAttribute('ca_certificate');
    }
    set caCertificate(value) {
        this._caCertificate = value;
    }
    resetCaCertificate() {
        this._caCertificate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get caCertificateInput() {
        return this._caCertificate;
    }
}
exports.DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeEnabledOutputReference = DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeEnabledOutputReference;
_37 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeEnabledOutputReference[_37] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeEnabledOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        disabled: datatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeDisabledToTerraform(struct.disabled),
        enabled: datatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeEnabledToTerraform(struct.enabled),
    };
}
exports.datatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeToTerraform = datatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeToTerraform;
class DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // disabled - computed: false, optional: true, required: false
        this._disabled = new DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeDisabledOutputReference(this, "disabled");
        // enabled - computed: false, optional: true, required: false
        this._enabled = new DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeEnabledOutputReference(this, "enabled");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._disabled?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.disabled = this._disabled?.internalValue;
        }
        if (this._enabled?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._disabled.internalValue = undefined;
            this._enabled.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._disabled.internalValue = value.disabled;
            this._enabled.internalValue = value.enabled;
        }
    }
    get disabled() {
        return this._disabled;
    }
    putDisabled(value) {
        this._disabled.internalValue = value;
    }
    resetDisabled() {
        this._disabled.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disabledInput() {
        return this._disabled.internalValue;
    }
    get enabled() {
        return this._enabled;
    }
    putEnabled(value) {
        this._enabled.internalValue = value;
    }
    resetEnabled() {
        this._enabled.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled.internalValue;
    }
}
exports.DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeOutputReference = DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeOutputReference;
_38 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeOutputReference[_38] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsPostgresSourceConnectionOnPremiseToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        hosts: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.hosts),
        port: cdktf.numberToTerraform(struct.port),
        subnet_id: cdktf.stringToTerraform(struct.subnetId),
        tls_mode: datatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeToTerraform(struct.tlsMode),
    };
}
exports.datatransferEndpointSettingsPostgresSourceConnectionOnPremiseToTerraform = datatransferEndpointSettingsPostgresSourceConnectionOnPremiseToTerraform;
class DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // tls_mode - computed: false, optional: true, required: false
        this._tlsMode = new DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeOutputReference(this, "tls_mode");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hosts !== undefined) {
            hasAnyValues = true;
            internalValueResult.hosts = this._hosts;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        if (this._subnetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetId = this._subnetId;
        }
        if (this._tlsMode?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tlsMode = this._tlsMode?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hosts = undefined;
            this._port = undefined;
            this._subnetId = undefined;
            this._tlsMode.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hosts = value.hosts;
            this._port = value.port;
            this._subnetId = value.subnetId;
            this._tlsMode.internalValue = value.tlsMode;
        }
    }
    get hosts() {
        return this.getListAttribute('hosts');
    }
    set hosts(value) {
        this._hosts = value;
    }
    resetHosts() {
        this._hosts = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostsInput() {
        return this._hosts;
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    resetPort() {
        this._port = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
    get subnetId() {
        return this.getStringAttribute('subnet_id');
    }
    set subnetId(value) {
        this._subnetId = value;
    }
    resetSubnetId() {
        this._subnetId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetIdInput() {
        return this._subnetId;
    }
    get tlsMode() {
        return this._tlsMode;
    }
    putTlsMode(value) {
        this._tlsMode.internalValue = value;
    }
    resetTlsMode() {
        this._tlsMode.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tlsModeInput() {
        return this._tlsMode.internalValue;
    }
}
exports.DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseOutputReference = DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseOutputReference;
_39 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseOutputReference[_39] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsPostgresSourceConnectionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        mdb_cluster_id: cdktf.stringToTerraform(struct.mdbClusterId),
        on_premise: datatransferEndpointSettingsPostgresSourceConnectionOnPremiseToTerraform(struct.onPremise),
    };
}
exports.datatransferEndpointSettingsPostgresSourceConnectionToTerraform = datatransferEndpointSettingsPostgresSourceConnectionToTerraform;
class DatatransferEndpointSettingsPostgresSourceConnectionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // on_premise - computed: false, optional: true, required: false
        this._onPremise = new DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseOutputReference(this, "on_premise");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._mdbClusterId !== undefined) {
            hasAnyValues = true;
            internalValueResult.mdbClusterId = this._mdbClusterId;
        }
        if (this._onPremise?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.onPremise = this._onPremise?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._mdbClusterId = undefined;
            this._onPremise.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._mdbClusterId = value.mdbClusterId;
            this._onPremise.internalValue = value.onPremise;
        }
    }
    get mdbClusterId() {
        return this.getStringAttribute('mdb_cluster_id');
    }
    set mdbClusterId(value) {
        this._mdbClusterId = value;
    }
    resetMdbClusterId() {
        this._mdbClusterId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mdbClusterIdInput() {
        return this._mdbClusterId;
    }
    get onPremise() {
        return this._onPremise;
    }
    putOnPremise(value) {
        this._onPremise.internalValue = value;
    }
    resetOnPremise() {
        this._onPremise.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get onPremiseInput() {
        return this._onPremise.internalValue;
    }
}
exports.DatatransferEndpointSettingsPostgresSourceConnectionOutputReference = DatatransferEndpointSettingsPostgresSourceConnectionOutputReference;
_40 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsPostgresSourceConnectionOutputReference[_40] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsPostgresSourceConnectionOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsPostgresSourceObjectTransferSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cast: cdktf.stringToTerraform(struct.cast),
        collation: cdktf.stringToTerraform(struct.collation),
        constraint: cdktf.stringToTerraform(struct.constraint),
        default_values: cdktf.stringToTerraform(struct.defaultValues),
        fk_constraint: cdktf.stringToTerraform(struct.fkConstraint),
        function: cdktf.stringToTerraform(struct.function),
        index: cdktf.stringToTerraform(struct.index),
        materialized_view: cdktf.stringToTerraform(struct.materializedView),
        policy: cdktf.stringToTerraform(struct.policy),
        primary_key: cdktf.stringToTerraform(struct.primaryKey),
        rule: cdktf.stringToTerraform(struct.rule),
        sequence: cdktf.stringToTerraform(struct.sequence),
        sequence_owned_by: cdktf.stringToTerraform(struct.sequenceOwnedBy),
        table: cdktf.stringToTerraform(struct.table),
        trigger: cdktf.stringToTerraform(struct.trigger),
        type: cdktf.stringToTerraform(struct.type),
        view: cdktf.stringToTerraform(struct.view),
    };
}
exports.datatransferEndpointSettingsPostgresSourceObjectTransferSettingsToTerraform = datatransferEndpointSettingsPostgresSourceObjectTransferSettingsToTerraform;
class DatatransferEndpointSettingsPostgresSourceObjectTransferSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cast !== undefined) {
            hasAnyValues = true;
            internalValueResult.cast = this._cast;
        }
        if (this._collation !== undefined) {
            hasAnyValues = true;
            internalValueResult.collation = this._collation;
        }
        if (this._constraint !== undefined) {
            hasAnyValues = true;
            internalValueResult.constraint = this._constraint;
        }
        if (this._defaultValues !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultValues = this._defaultValues;
        }
        if (this._fkConstraint !== undefined) {
            hasAnyValues = true;
            internalValueResult.fkConstraint = this._fkConstraint;
        }
        if (this._function !== undefined) {
            hasAnyValues = true;
            internalValueResult.function = this._function;
        }
        if (this._index !== undefined) {
            hasAnyValues = true;
            internalValueResult.index = this._index;
        }
        if (this._materializedView !== undefined) {
            hasAnyValues = true;
            internalValueResult.materializedView = this._materializedView;
        }
        if (this._policy !== undefined) {
            hasAnyValues = true;
            internalValueResult.policy = this._policy;
        }
        if (this._primaryKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.primaryKey = this._primaryKey;
        }
        if (this._rule !== undefined) {
            hasAnyValues = true;
            internalValueResult.rule = this._rule;
        }
        if (this._sequence !== undefined) {
            hasAnyValues = true;
            internalValueResult.sequence = this._sequence;
        }
        if (this._sequenceOwnedBy !== undefined) {
            hasAnyValues = true;
            internalValueResult.sequenceOwnedBy = this._sequenceOwnedBy;
        }
        if (this._table !== undefined) {
            hasAnyValues = true;
            internalValueResult.table = this._table;
        }
        if (this._trigger !== undefined) {
            hasAnyValues = true;
            internalValueResult.trigger = this._trigger;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        if (this._view !== undefined) {
            hasAnyValues = true;
            internalValueResult.view = this._view;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cast = undefined;
            this._collation = undefined;
            this._constraint = undefined;
            this._defaultValues = undefined;
            this._fkConstraint = undefined;
            this._function = undefined;
            this._index = undefined;
            this._materializedView = undefined;
            this._policy = undefined;
            this._primaryKey = undefined;
            this._rule = undefined;
            this._sequence = undefined;
            this._sequenceOwnedBy = undefined;
            this._table = undefined;
            this._trigger = undefined;
            this._type = undefined;
            this._view = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cast = value.cast;
            this._collation = value.collation;
            this._constraint = value.constraint;
            this._defaultValues = value.defaultValues;
            this._fkConstraint = value.fkConstraint;
            this._function = value.function;
            this._index = value.index;
            this._materializedView = value.materializedView;
            this._policy = value.policy;
            this._primaryKey = value.primaryKey;
            this._rule = value.rule;
            this._sequence = value.sequence;
            this._sequenceOwnedBy = value.sequenceOwnedBy;
            this._table = value.table;
            this._trigger = value.trigger;
            this._type = value.type;
            this._view = value.view;
        }
    }
    get cast() {
        return this.getStringAttribute('cast');
    }
    set cast(value) {
        this._cast = value;
    }
    resetCast() {
        this._cast = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get castInput() {
        return this._cast;
    }
    get collation() {
        return this.getStringAttribute('collation');
    }
    set collation(value) {
        this._collation = value;
    }
    resetCollation() {
        this._collation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get collationInput() {
        return this._collation;
    }
    get constraint() {
        return this.getStringAttribute('constraint');
    }
    set constraint(value) {
        this._constraint = value;
    }
    resetConstraint() {
        this._constraint = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get constraintInput() {
        return this._constraint;
    }
    get defaultValues() {
        return this.getStringAttribute('default_values');
    }
    set defaultValues(value) {
        this._defaultValues = value;
    }
    resetDefaultValues() {
        this._defaultValues = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultValuesInput() {
        return this._defaultValues;
    }
    get fkConstraint() {
        return this.getStringAttribute('fk_constraint');
    }
    set fkConstraint(value) {
        this._fkConstraint = value;
    }
    resetFkConstraint() {
        this._fkConstraint = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fkConstraintInput() {
        return this._fkConstraint;
    }
    get function() {
        return this.getStringAttribute('function');
    }
    set function(value) {
        this._function = value;
    }
    resetFunction() {
        this._function = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get functionInput() {
        return this._function;
    }
    get index() {
        return this.getStringAttribute('index');
    }
    set index(value) {
        this._index = value;
    }
    resetIndex() {
        this._index = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get indexInput() {
        return this._index;
    }
    get materializedView() {
        return this.getStringAttribute('materialized_view');
    }
    set materializedView(value) {
        this._materializedView = value;
    }
    resetMaterializedView() {
        this._materializedView = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get materializedViewInput() {
        return this._materializedView;
    }
    get policy() {
        return this.getStringAttribute('policy');
    }
    set policy(value) {
        this._policy = value;
    }
    resetPolicy() {
        this._policy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get policyInput() {
        return this._policy;
    }
    get primaryKey() {
        return this.getStringAttribute('primary_key');
    }
    set primaryKey(value) {
        this._primaryKey = value;
    }
    resetPrimaryKey() {
        this._primaryKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get primaryKeyInput() {
        return this._primaryKey;
    }
    get rule() {
        return this.getStringAttribute('rule');
    }
    set rule(value) {
        this._rule = value;
    }
    resetRule() {
        this._rule = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ruleInput() {
        return this._rule;
    }
    get sequence() {
        return this.getStringAttribute('sequence');
    }
    set sequence(value) {
        this._sequence = value;
    }
    resetSequence() {
        this._sequence = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sequenceInput() {
        return this._sequence;
    }
    get sequenceOwnedBy() {
        return this.getStringAttribute('sequence_owned_by');
    }
    set sequenceOwnedBy(value) {
        this._sequenceOwnedBy = value;
    }
    resetSequenceOwnedBy() {
        this._sequenceOwnedBy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sequenceOwnedByInput() {
        return this._sequenceOwnedBy;
    }
    get table() {
        return this.getStringAttribute('table');
    }
    set table(value) {
        this._table = value;
    }
    resetTable() {
        this._table = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tableInput() {
        return this._table;
    }
    get trigger() {
        return this.getStringAttribute('trigger');
    }
    set trigger(value) {
        this._trigger = value;
    }
    resetTrigger() {
        this._trigger = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get triggerInput() {
        return this._trigger;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    resetType() {
        this._type = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get view() {
        return this.getStringAttribute('view');
    }
    set view(value) {
        this._view = value;
    }
    resetView() {
        this._view = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get viewInput() {
        return this._view;
    }
}
exports.DatatransferEndpointSettingsPostgresSourceObjectTransferSettingsOutputReference = DatatransferEndpointSettingsPostgresSourceObjectTransferSettingsOutputReference;
_41 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsPostgresSourceObjectTransferSettingsOutputReference[_41] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsPostgresSourceObjectTransferSettingsOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsPostgresSourcePasswordToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        raw: cdktf.stringToTerraform(struct.raw),
    };
}
exports.datatransferEndpointSettingsPostgresSourcePasswordToTerraform = datatransferEndpointSettingsPostgresSourcePasswordToTerraform;
class DatatransferEndpointSettingsPostgresSourcePasswordOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._raw !== undefined) {
            hasAnyValues = true;
            internalValueResult.raw = this._raw;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._raw = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._raw = value.raw;
        }
    }
    get raw() {
        return this.getStringAttribute('raw');
    }
    set raw(value) {
        this._raw = value;
    }
    resetRaw() {
        this._raw = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rawInput() {
        return this._raw;
    }
}
exports.DatatransferEndpointSettingsPostgresSourcePasswordOutputReference = DatatransferEndpointSettingsPostgresSourcePasswordOutputReference;
_42 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsPostgresSourcePasswordOutputReference[_42] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsPostgresSourcePasswordOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsPostgresSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        exclude_tables: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.excludeTables),
        include_tables: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.includeTables),
        security_groups: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.securityGroups),
        service_schema: cdktf.stringToTerraform(struct.serviceSchema),
        slot_gigabyte_lag_limit: cdktf.numberToTerraform(struct.slotGigabyteLagLimit),
        user: cdktf.stringToTerraform(struct.user),
        connection: datatransferEndpointSettingsPostgresSourceConnectionToTerraform(struct.connection),
        object_transfer_settings: datatransferEndpointSettingsPostgresSourceObjectTransferSettingsToTerraform(struct.objectTransferSettings),
        password: datatransferEndpointSettingsPostgresSourcePasswordToTerraform(struct.password),
    };
}
exports.datatransferEndpointSettingsPostgresSourceToTerraform = datatransferEndpointSettingsPostgresSourceToTerraform;
class DatatransferEndpointSettingsPostgresSourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // connection - computed: false, optional: true, required: false
        this._connection = new DatatransferEndpointSettingsPostgresSourceConnectionOutputReference(this, "connection");
        // object_transfer_settings - computed: false, optional: true, required: false
        this._objectTransferSettings = new DatatransferEndpointSettingsPostgresSourceObjectTransferSettingsOutputReference(this, "object_transfer_settings");
        // password - computed: false, optional: true, required: false
        this._password = new DatatransferEndpointSettingsPostgresSourcePasswordOutputReference(this, "password");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._database !== undefined) {
            hasAnyValues = true;
            internalValueResult.database = this._database;
        }
        if (this._excludeTables !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludeTables = this._excludeTables;
        }
        if (this._includeTables !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeTables = this._includeTables;
        }
        if (this._securityGroups !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityGroups = this._securityGroups;
        }
        if (this._serviceSchema !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceSchema = this._serviceSchema;
        }
        if (this._slotGigabyteLagLimit !== undefined) {
            hasAnyValues = true;
            internalValueResult.slotGigabyteLagLimit = this._slotGigabyteLagLimit;
        }
        if (this._user !== undefined) {
            hasAnyValues = true;
            internalValueResult.user = this._user;
        }
        if (this._connection?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.connection = this._connection?.internalValue;
        }
        if (this._objectTransferSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.objectTransferSettings = this._objectTransferSettings?.internalValue;
        }
        if (this._password?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.password = this._password?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._database = undefined;
            this._excludeTables = undefined;
            this._includeTables = undefined;
            this._securityGroups = undefined;
            this._serviceSchema = undefined;
            this._slotGigabyteLagLimit = undefined;
            this._user = undefined;
            this._connection.internalValue = undefined;
            this._objectTransferSettings.internalValue = undefined;
            this._password.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._database = value.database;
            this._excludeTables = value.excludeTables;
            this._includeTables = value.includeTables;
            this._securityGroups = value.securityGroups;
            this._serviceSchema = value.serviceSchema;
            this._slotGigabyteLagLimit = value.slotGigabyteLagLimit;
            this._user = value.user;
            this._connection.internalValue = value.connection;
            this._objectTransferSettings.internalValue = value.objectTransferSettings;
            this._password.internalValue = value.password;
        }
    }
    get database() {
        return this.getStringAttribute('database');
    }
    set database(value) {
        this._database = value;
    }
    resetDatabase() {
        this._database = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get databaseInput() {
        return this._database;
    }
    get excludeTables() {
        return this.getListAttribute('exclude_tables');
    }
    set excludeTables(value) {
        this._excludeTables = value;
    }
    resetExcludeTables() {
        this._excludeTables = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludeTablesInput() {
        return this._excludeTables;
    }
    get includeTables() {
        return this.getListAttribute('include_tables');
    }
    set includeTables(value) {
        this._includeTables = value;
    }
    resetIncludeTables() {
        this._includeTables = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeTablesInput() {
        return this._includeTables;
    }
    get securityGroups() {
        return this.getListAttribute('security_groups');
    }
    set securityGroups(value) {
        this._securityGroups = value;
    }
    resetSecurityGroups() {
        this._securityGroups = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityGroupsInput() {
        return this._securityGroups;
    }
    get serviceSchema() {
        return this.getStringAttribute('service_schema');
    }
    set serviceSchema(value) {
        this._serviceSchema = value;
    }
    resetServiceSchema() {
        this._serviceSchema = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceSchemaInput() {
        return this._serviceSchema;
    }
    get slotGigabyteLagLimit() {
        return this.getNumberAttribute('slot_gigabyte_lag_limit');
    }
    set slotGigabyteLagLimit(value) {
        this._slotGigabyteLagLimit = value;
    }
    resetSlotGigabyteLagLimit() {
        this._slotGigabyteLagLimit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get slotGigabyteLagLimitInput() {
        return this._slotGigabyteLagLimit;
    }
    get user() {
        return this.getStringAttribute('user');
    }
    set user(value) {
        this._user = value;
    }
    resetUser() {
        this._user = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userInput() {
        return this._user;
    }
    get connection() {
        return this._connection;
    }
    putConnection(value) {
        this._connection.internalValue = value;
    }
    resetConnection() {
        this._connection.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionInput() {
        return this._connection.internalValue;
    }
    get objectTransferSettings() {
        return this._objectTransferSettings;
    }
    putObjectTransferSettings(value) {
        this._objectTransferSettings.internalValue = value;
    }
    resetObjectTransferSettings() {
        this._objectTransferSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get objectTransferSettingsInput() {
        return this._objectTransferSettings.internalValue;
    }
    get password() {
        return this._password;
    }
    putPassword(value) {
        this._password.internalValue = value;
    }
    resetPassword() {
        this._password.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password.internalValue;
    }
}
exports.DatatransferEndpointSettingsPostgresSourceOutputReference = DatatransferEndpointSettingsPostgresSourceOutputReference;
_43 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsPostgresSourceOutputReference[_43] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsPostgresSourceOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeDisabledToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.datatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeDisabledToTerraform = datatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeDisabledToTerraform;
class DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeDisabledOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeDisabledOutputReference = DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeDisabledOutputReference;
_44 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeDisabledOutputReference[_44] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeDisabledOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeEnabledToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ca_certificate: cdktf.stringToTerraform(struct.caCertificate),
    };
}
exports.datatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeEnabledToTerraform = datatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeEnabledToTerraform;
class DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeEnabledOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._caCertificate !== undefined) {
            hasAnyValues = true;
            internalValueResult.caCertificate = this._caCertificate;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._caCertificate = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._caCertificate = value.caCertificate;
        }
    }
    get caCertificate() {
        return this.getStringAttribute('ca_certificate');
    }
    set caCertificate(value) {
        this._caCertificate = value;
    }
    resetCaCertificate() {
        this._caCertificate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get caCertificateInput() {
        return this._caCertificate;
    }
}
exports.DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeEnabledOutputReference = DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeEnabledOutputReference;
_45 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeEnabledOutputReference[_45] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeEnabledOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        disabled: datatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeDisabledToTerraform(struct.disabled),
        enabled: datatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeEnabledToTerraform(struct.enabled),
    };
}
exports.datatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeToTerraform = datatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeToTerraform;
class DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // disabled - computed: false, optional: true, required: false
        this._disabled = new DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeDisabledOutputReference(this, "disabled");
        // enabled - computed: false, optional: true, required: false
        this._enabled = new DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeEnabledOutputReference(this, "enabled");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._disabled?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.disabled = this._disabled?.internalValue;
        }
        if (this._enabled?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._disabled.internalValue = undefined;
            this._enabled.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._disabled.internalValue = value.disabled;
            this._enabled.internalValue = value.enabled;
        }
    }
    get disabled() {
        return this._disabled;
    }
    putDisabled(value) {
        this._disabled.internalValue = value;
    }
    resetDisabled() {
        this._disabled.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disabledInput() {
        return this._disabled.internalValue;
    }
    get enabled() {
        return this._enabled;
    }
    putEnabled(value) {
        this._enabled.internalValue = value;
    }
    resetEnabled() {
        this._enabled.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled.internalValue;
    }
}
exports.DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeOutputReference = DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeOutputReference;
_46 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeOutputReference[_46] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsPostgresTargetConnectionOnPremiseToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        hosts: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.hosts),
        port: cdktf.numberToTerraform(struct.port),
        subnet_id: cdktf.stringToTerraform(struct.subnetId),
        tls_mode: datatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeToTerraform(struct.tlsMode),
    };
}
exports.datatransferEndpointSettingsPostgresTargetConnectionOnPremiseToTerraform = datatransferEndpointSettingsPostgresTargetConnectionOnPremiseToTerraform;
class DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // tls_mode - computed: false, optional: true, required: false
        this._tlsMode = new DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeOutputReference(this, "tls_mode");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hosts !== undefined) {
            hasAnyValues = true;
            internalValueResult.hosts = this._hosts;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        if (this._subnetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetId = this._subnetId;
        }
        if (this._tlsMode?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tlsMode = this._tlsMode?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hosts = undefined;
            this._port = undefined;
            this._subnetId = undefined;
            this._tlsMode.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hosts = value.hosts;
            this._port = value.port;
            this._subnetId = value.subnetId;
            this._tlsMode.internalValue = value.tlsMode;
        }
    }
    get hosts() {
        return this.getListAttribute('hosts');
    }
    set hosts(value) {
        this._hosts = value;
    }
    resetHosts() {
        this._hosts = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostsInput() {
        return this._hosts;
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    resetPort() {
        this._port = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
    get subnetId() {
        return this.getStringAttribute('subnet_id');
    }
    set subnetId(value) {
        this._subnetId = value;
    }
    resetSubnetId() {
        this._subnetId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetIdInput() {
        return this._subnetId;
    }
    get tlsMode() {
        return this._tlsMode;
    }
    putTlsMode(value) {
        this._tlsMode.internalValue = value;
    }
    resetTlsMode() {
        this._tlsMode.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tlsModeInput() {
        return this._tlsMode.internalValue;
    }
}
exports.DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseOutputReference = DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseOutputReference;
_47 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseOutputReference[_47] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsPostgresTargetConnectionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        mdb_cluster_id: cdktf.stringToTerraform(struct.mdbClusterId),
        on_premise: datatransferEndpointSettingsPostgresTargetConnectionOnPremiseToTerraform(struct.onPremise),
    };
}
exports.datatransferEndpointSettingsPostgresTargetConnectionToTerraform = datatransferEndpointSettingsPostgresTargetConnectionToTerraform;
class DatatransferEndpointSettingsPostgresTargetConnectionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // on_premise - computed: false, optional: true, required: false
        this._onPremise = new DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseOutputReference(this, "on_premise");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._mdbClusterId !== undefined) {
            hasAnyValues = true;
            internalValueResult.mdbClusterId = this._mdbClusterId;
        }
        if (this._onPremise?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.onPremise = this._onPremise?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._mdbClusterId = undefined;
            this._onPremise.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._mdbClusterId = value.mdbClusterId;
            this._onPremise.internalValue = value.onPremise;
        }
    }
    get mdbClusterId() {
        return this.getStringAttribute('mdb_cluster_id');
    }
    set mdbClusterId(value) {
        this._mdbClusterId = value;
    }
    resetMdbClusterId() {
        this._mdbClusterId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mdbClusterIdInput() {
        return this._mdbClusterId;
    }
    get onPremise() {
        return this._onPremise;
    }
    putOnPremise(value) {
        this._onPremise.internalValue = value;
    }
    resetOnPremise() {
        this._onPremise.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get onPremiseInput() {
        return this._onPremise.internalValue;
    }
}
exports.DatatransferEndpointSettingsPostgresTargetConnectionOutputReference = DatatransferEndpointSettingsPostgresTargetConnectionOutputReference;
_48 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsPostgresTargetConnectionOutputReference[_48] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsPostgresTargetConnectionOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsPostgresTargetPasswordToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        raw: cdktf.stringToTerraform(struct.raw),
    };
}
exports.datatransferEndpointSettingsPostgresTargetPasswordToTerraform = datatransferEndpointSettingsPostgresTargetPasswordToTerraform;
class DatatransferEndpointSettingsPostgresTargetPasswordOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._raw !== undefined) {
            hasAnyValues = true;
            internalValueResult.raw = this._raw;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._raw = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._raw = value.raw;
        }
    }
    get raw() {
        return this.getStringAttribute('raw');
    }
    set raw(value) {
        this._raw = value;
    }
    resetRaw() {
        this._raw = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rawInput() {
        return this._raw;
    }
}
exports.DatatransferEndpointSettingsPostgresTargetPasswordOutputReference = DatatransferEndpointSettingsPostgresTargetPasswordOutputReference;
_49 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsPostgresTargetPasswordOutputReference[_49] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsPostgresTargetPasswordOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsPostgresTargetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        security_groups: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.securityGroups),
        user: cdktf.stringToTerraform(struct.user),
        connection: datatransferEndpointSettingsPostgresTargetConnectionToTerraform(struct.connection),
        password: datatransferEndpointSettingsPostgresTargetPasswordToTerraform(struct.password),
    };
}
exports.datatransferEndpointSettingsPostgresTargetToTerraform = datatransferEndpointSettingsPostgresTargetToTerraform;
class DatatransferEndpointSettingsPostgresTargetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // connection - computed: false, optional: true, required: false
        this._connection = new DatatransferEndpointSettingsPostgresTargetConnectionOutputReference(this, "connection");
        // password - computed: false, optional: true, required: false
        this._password = new DatatransferEndpointSettingsPostgresTargetPasswordOutputReference(this, "password");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._database !== undefined) {
            hasAnyValues = true;
            internalValueResult.database = this._database;
        }
        if (this._securityGroups !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityGroups = this._securityGroups;
        }
        if (this._user !== undefined) {
            hasAnyValues = true;
            internalValueResult.user = this._user;
        }
        if (this._connection?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.connection = this._connection?.internalValue;
        }
        if (this._password?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.password = this._password?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._database = undefined;
            this._securityGroups = undefined;
            this._user = undefined;
            this._connection.internalValue = undefined;
            this._password.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._database = value.database;
            this._securityGroups = value.securityGroups;
            this._user = value.user;
            this._connection.internalValue = value.connection;
            this._password.internalValue = value.password;
        }
    }
    get database() {
        return this.getStringAttribute('database');
    }
    set database(value) {
        this._database = value;
    }
    resetDatabase() {
        this._database = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get databaseInput() {
        return this._database;
    }
    get securityGroups() {
        return this.getListAttribute('security_groups');
    }
    set securityGroups(value) {
        this._securityGroups = value;
    }
    resetSecurityGroups() {
        this._securityGroups = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityGroupsInput() {
        return this._securityGroups;
    }
    get user() {
        return this.getStringAttribute('user');
    }
    set user(value) {
        this._user = value;
    }
    resetUser() {
        this._user = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userInput() {
        return this._user;
    }
    get connection() {
        return this._connection;
    }
    putConnection(value) {
        this._connection.internalValue = value;
    }
    resetConnection() {
        this._connection.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionInput() {
        return this._connection.internalValue;
    }
    get password() {
        return this._password;
    }
    putPassword(value) {
        this._password.internalValue = value;
    }
    resetPassword() {
        this._password.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password.internalValue;
    }
}
exports.DatatransferEndpointSettingsPostgresTargetOutputReference = DatatransferEndpointSettingsPostgresTargetOutputReference;
_50 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsPostgresTargetOutputReference[_50] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsPostgresTargetOutputReference", version: "2.0.32" };
function datatransferEndpointSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        clickhouse_source: datatransferEndpointSettingsClickhouseSourceToTerraform(struct.clickhouseSource),
        clickhouse_target: datatransferEndpointSettingsClickhouseTargetToTerraform(struct.clickhouseTarget),
        mongo_source: datatransferEndpointSettingsMongoSourceToTerraform(struct.mongoSource),
        mongo_target: datatransferEndpointSettingsMongoTargetToTerraform(struct.mongoTarget),
        mysql_source: datatransferEndpointSettingsMysqlSourceToTerraform(struct.mysqlSource),
        mysql_target: datatransferEndpointSettingsMysqlTargetToTerraform(struct.mysqlTarget),
        postgres_source: datatransferEndpointSettingsPostgresSourceToTerraform(struct.postgresSource),
        postgres_target: datatransferEndpointSettingsPostgresTargetToTerraform(struct.postgresTarget),
    };
}
exports.datatransferEndpointSettingsToTerraform = datatransferEndpointSettingsToTerraform;
class DatatransferEndpointSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // clickhouse_source - computed: false, optional: true, required: false
        this._clickhouseSource = new DatatransferEndpointSettingsClickhouseSourceOutputReference(this, "clickhouse_source");
        // clickhouse_target - computed: false, optional: true, required: false
        this._clickhouseTarget = new DatatransferEndpointSettingsClickhouseTargetOutputReference(this, "clickhouse_target");
        // mongo_source - computed: false, optional: true, required: false
        this._mongoSource = new DatatransferEndpointSettingsMongoSourceOutputReference(this, "mongo_source");
        // mongo_target - computed: false, optional: true, required: false
        this._mongoTarget = new DatatransferEndpointSettingsMongoTargetOutputReference(this, "mongo_target");
        // mysql_source - computed: false, optional: true, required: false
        this._mysqlSource = new DatatransferEndpointSettingsMysqlSourceOutputReference(this, "mysql_source");
        // mysql_target - computed: false, optional: true, required: false
        this._mysqlTarget = new DatatransferEndpointSettingsMysqlTargetOutputReference(this, "mysql_target");
        // postgres_source - computed: false, optional: true, required: false
        this._postgresSource = new DatatransferEndpointSettingsPostgresSourceOutputReference(this, "postgres_source");
        // postgres_target - computed: false, optional: true, required: false
        this._postgresTarget = new DatatransferEndpointSettingsPostgresTargetOutputReference(this, "postgres_target");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clickhouseSource?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.clickhouseSource = this._clickhouseSource?.internalValue;
        }
        if (this._clickhouseTarget?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.clickhouseTarget = this._clickhouseTarget?.internalValue;
        }
        if (this._mongoSource?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mongoSource = this._mongoSource?.internalValue;
        }
        if (this._mongoTarget?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mongoTarget = this._mongoTarget?.internalValue;
        }
        if (this._mysqlSource?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mysqlSource = this._mysqlSource?.internalValue;
        }
        if (this._mysqlTarget?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mysqlTarget = this._mysqlTarget?.internalValue;
        }
        if (this._postgresSource?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.postgresSource = this._postgresSource?.internalValue;
        }
        if (this._postgresTarget?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.postgresTarget = this._postgresTarget?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clickhouseSource.internalValue = undefined;
            this._clickhouseTarget.internalValue = undefined;
            this._mongoSource.internalValue = undefined;
            this._mongoTarget.internalValue = undefined;
            this._mysqlSource.internalValue = undefined;
            this._mysqlTarget.internalValue = undefined;
            this._postgresSource.internalValue = undefined;
            this._postgresTarget.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clickhouseSource.internalValue = value.clickhouseSource;
            this._clickhouseTarget.internalValue = value.clickhouseTarget;
            this._mongoSource.internalValue = value.mongoSource;
            this._mongoTarget.internalValue = value.mongoTarget;
            this._mysqlSource.internalValue = value.mysqlSource;
            this._mysqlTarget.internalValue = value.mysqlTarget;
            this._postgresSource.internalValue = value.postgresSource;
            this._postgresTarget.internalValue = value.postgresTarget;
        }
    }
    get clickhouseSource() {
        return this._clickhouseSource;
    }
    putClickhouseSource(value) {
        this._clickhouseSource.internalValue = value;
    }
    resetClickhouseSource() {
        this._clickhouseSource.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clickhouseSourceInput() {
        return this._clickhouseSource.internalValue;
    }
    get clickhouseTarget() {
        return this._clickhouseTarget;
    }
    putClickhouseTarget(value) {
        this._clickhouseTarget.internalValue = value;
    }
    resetClickhouseTarget() {
        this._clickhouseTarget.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clickhouseTargetInput() {
        return this._clickhouseTarget.internalValue;
    }
    get mongoSource() {
        return this._mongoSource;
    }
    putMongoSource(value) {
        this._mongoSource.internalValue = value;
    }
    resetMongoSource() {
        this._mongoSource.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mongoSourceInput() {
        return this._mongoSource.internalValue;
    }
    get mongoTarget() {
        return this._mongoTarget;
    }
    putMongoTarget(value) {
        this._mongoTarget.internalValue = value;
    }
    resetMongoTarget() {
        this._mongoTarget.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mongoTargetInput() {
        return this._mongoTarget.internalValue;
    }
    get mysqlSource() {
        return this._mysqlSource;
    }
    putMysqlSource(value) {
        this._mysqlSource.internalValue = value;
    }
    resetMysqlSource() {
        this._mysqlSource.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mysqlSourceInput() {
        return this._mysqlSource.internalValue;
    }
    get mysqlTarget() {
        return this._mysqlTarget;
    }
    putMysqlTarget(value) {
        this._mysqlTarget.internalValue = value;
    }
    resetMysqlTarget() {
        this._mysqlTarget.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mysqlTargetInput() {
        return this._mysqlTarget.internalValue;
    }
    get postgresSource() {
        return this._postgresSource;
    }
    putPostgresSource(value) {
        this._postgresSource.internalValue = value;
    }
    resetPostgresSource() {
        this._postgresSource.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get postgresSourceInput() {
        return this._postgresSource.internalValue;
    }
    get postgresTarget() {
        return this._postgresTarget;
    }
    putPostgresTarget(value) {
        this._postgresTarget.internalValue = value;
    }
    resetPostgresTarget() {
        this._postgresTarget.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get postgresTargetInput() {
        return this._postgresTarget.internalValue;
    }
}
exports.DatatransferEndpointSettingsOutputReference = DatatransferEndpointSettingsOutputReference;
_51 = JSII_RTTI_SYMBOL_1;
DatatransferEndpointSettingsOutputReference[_51] = { fqn: "@cdktf/provider-yandex.DatatransferEndpointSettingsOutputReference", version: "2.0.32" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/yandex/r/datatransfer_endpoint yandex_datatransfer_endpoint}
*/
class DatatransferEndpoint extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/yandex/r/datatransfer_endpoint yandex_datatransfer_endpoint} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DatatransferEndpointConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'yandex_datatransfer_endpoint',
            terraformGeneratorMetadata: {
                providerName: 'yandex',
                providerVersion: '0.77.0',
                providerVersionConstraint: '~> 0.73'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // settings - computed: false, optional: true, required: false
        this._settings = new DatatransferEndpointSettingsOutputReference(this, "settings");
        this._description = config.description;
        this._folderId = config.folderId;
        this._id = config.id;
        this._labels = config.labels;
        this._name = config.name;
        this._settings.internalValue = config.settings;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get folderId() {
        return this.getStringAttribute('folder_id');
    }
    set folderId(value) {
        this._folderId = value;
    }
    resetFolderId() {
        this._folderId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get folderIdInput() {
        return this._folderId;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get settings() {
        return this._settings;
    }
    putSettings(value) {
        this._settings.internalValue = value;
    }
    resetSettings() {
        this._settings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get settingsInput() {
        return this._settings.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            folder_id: cdktf.stringToTerraform(this._folderId),
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            name: cdktf.stringToTerraform(this._name),
            settings: datatransferEndpointSettingsToTerraform(this._settings.internalValue),
        };
    }
}
exports.DatatransferEndpoint = DatatransferEndpoint;
_52 = JSII_RTTI_SYMBOL_1;
DatatransferEndpoint[_52] = { fqn: "@cdktf/provider-yandex.DatatransferEndpoint", version: "2.0.32" };
// =================
// STATIC PROPERTIES
// =================
DatatransferEndpoint.tfResourceType = "yandex_datatransfer_endpoint";
//# sourceMappingURL=data:application/json;base64,