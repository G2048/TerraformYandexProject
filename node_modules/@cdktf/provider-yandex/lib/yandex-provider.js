"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.YandexProvider = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
* Represents a {@link https://www.terraform.io/docs/providers/yandex yandex}
*/
class YandexProvider extends cdktf.TerraformProvider {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/yandex yandex} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options YandexProviderConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'yandex',
            terraformGeneratorMetadata: {
                providerName: 'yandex',
                providerVersion: '0.77.0',
                providerVersionConstraint: '~> 0.73'
            },
            terraformProviderSource: 'yandex-cloud/yandex'
        });
        this._cloudId = config.cloudId;
        this._endpoint = config.endpoint;
        this._folderId = config.folderId;
        this._insecure = config.insecure;
        this._maxRetries = config.maxRetries;
        this._organizationId = config.organizationId;
        this._plaintext = config.plaintext;
        this._regionId = config.regionId;
        this._serviceAccountKeyFile = config.serviceAccountKeyFile;
        this._storageAccessKey = config.storageAccessKey;
        this._storageEndpoint = config.storageEndpoint;
        this._storageSecretKey = config.storageSecretKey;
        this._token = config.token;
        this._ymqAccessKey = config.ymqAccessKey;
        this._ymqEndpoint = config.ymqEndpoint;
        this._ymqSecretKey = config.ymqSecretKey;
        this._zone = config.zone;
        this._alias = config.alias;
    }
    get cloudId() {
        return this._cloudId;
    }
    set cloudId(value) {
        this._cloudId = value;
    }
    resetCloudId() {
        this._cloudId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudIdInput() {
        return this._cloudId;
    }
    get endpoint() {
        return this._endpoint;
    }
    set endpoint(value) {
        this._endpoint = value;
    }
    resetEndpoint() {
        this._endpoint = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get endpointInput() {
        return this._endpoint;
    }
    get folderId() {
        return this._folderId;
    }
    set folderId(value) {
        this._folderId = value;
    }
    resetFolderId() {
        this._folderId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get folderIdInput() {
        return this._folderId;
    }
    get insecure() {
        return this._insecure;
    }
    set insecure(value) {
        this._insecure = value;
    }
    resetInsecure() {
        this._insecure = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get insecureInput() {
        return this._insecure;
    }
    get maxRetries() {
        return this._maxRetries;
    }
    set maxRetries(value) {
        this._maxRetries = value;
    }
    resetMaxRetries() {
        this._maxRetries = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxRetriesInput() {
        return this._maxRetries;
    }
    get organizationId() {
        return this._organizationId;
    }
    set organizationId(value) {
        this._organizationId = value;
    }
    resetOrganizationId() {
        this._organizationId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get organizationIdInput() {
        return this._organizationId;
    }
    get plaintext() {
        return this._plaintext;
    }
    set plaintext(value) {
        this._plaintext = value;
    }
    resetPlaintext() {
        this._plaintext = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get plaintextInput() {
        return this._plaintext;
    }
    get regionId() {
        return this._regionId;
    }
    set regionId(value) {
        this._regionId = value;
    }
    resetRegionId() {
        this._regionId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regionIdInput() {
        return this._regionId;
    }
    get serviceAccountKeyFile() {
        return this._serviceAccountKeyFile;
    }
    set serviceAccountKeyFile(value) {
        this._serviceAccountKeyFile = value;
    }
    resetServiceAccountKeyFile() {
        this._serviceAccountKeyFile = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceAccountKeyFileInput() {
        return this._serviceAccountKeyFile;
    }
    get storageAccessKey() {
        return this._storageAccessKey;
    }
    set storageAccessKey(value) {
        this._storageAccessKey = value;
    }
    resetStorageAccessKey() {
        this._storageAccessKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storageAccessKeyInput() {
        return this._storageAccessKey;
    }
    get storageEndpoint() {
        return this._storageEndpoint;
    }
    set storageEndpoint(value) {
        this._storageEndpoint = value;
    }
    resetStorageEndpoint() {
        this._storageEndpoint = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storageEndpointInput() {
        return this._storageEndpoint;
    }
    get storageSecretKey() {
        return this._storageSecretKey;
    }
    set storageSecretKey(value) {
        this._storageSecretKey = value;
    }
    resetStorageSecretKey() {
        this._storageSecretKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storageSecretKeyInput() {
        return this._storageSecretKey;
    }
    get token() {
        return this._token;
    }
    set token(value) {
        this._token = value;
    }
    resetToken() {
        this._token = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tokenInput() {
        return this._token;
    }
    get ymqAccessKey() {
        return this._ymqAccessKey;
    }
    set ymqAccessKey(value) {
        this._ymqAccessKey = value;
    }
    resetYmqAccessKey() {
        this._ymqAccessKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ymqAccessKeyInput() {
        return this._ymqAccessKey;
    }
    get ymqEndpoint() {
        return this._ymqEndpoint;
    }
    set ymqEndpoint(value) {
        this._ymqEndpoint = value;
    }
    resetYmqEndpoint() {
        this._ymqEndpoint = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ymqEndpointInput() {
        return this._ymqEndpoint;
    }
    get ymqSecretKey() {
        return this._ymqSecretKey;
    }
    set ymqSecretKey(value) {
        this._ymqSecretKey = value;
    }
    resetYmqSecretKey() {
        this._ymqSecretKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ymqSecretKeyInput() {
        return this._ymqSecretKey;
    }
    get zone() {
        return this._zone;
    }
    set zone(value) {
        this._zone = value;
    }
    resetZone() {
        this._zone = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get zoneInput() {
        return this._zone;
    }
    get alias() {
        return this._alias;
    }
    set alias(value) {
        this._alias = value;
    }
    resetAlias() {
        this._alias = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aliasInput() {
        return this._alias;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            cloud_id: cdktf.stringToTerraform(this._cloudId),
            endpoint: cdktf.stringToTerraform(this._endpoint),
            folder_id: cdktf.stringToTerraform(this._folderId),
            insecure: cdktf.booleanToTerraform(this._insecure),
            max_retries: cdktf.numberToTerraform(this._maxRetries),
            organization_id: cdktf.stringToTerraform(this._organizationId),
            plaintext: cdktf.booleanToTerraform(this._plaintext),
            region_id: cdktf.stringToTerraform(this._regionId),
            service_account_key_file: cdktf.stringToTerraform(this._serviceAccountKeyFile),
            storage_access_key: cdktf.stringToTerraform(this._storageAccessKey),
            storage_endpoint: cdktf.stringToTerraform(this._storageEndpoint),
            storage_secret_key: cdktf.stringToTerraform(this._storageSecretKey),
            token: cdktf.stringToTerraform(this._token),
            ymq_access_key: cdktf.stringToTerraform(this._ymqAccessKey),
            ymq_endpoint: cdktf.stringToTerraform(this._ymqEndpoint),
            ymq_secret_key: cdktf.stringToTerraform(this._ymqSecretKey),
            zone: cdktf.stringToTerraform(this._zone),
            alias: cdktf.stringToTerraform(this._alias),
        };
    }
}
exports.YandexProvider = YandexProvider;
_a = JSII_RTTI_SYMBOL_1;
YandexProvider[_a] = { fqn: "@cdktf/provider-yandex.YandexProvider", version: "2.0.32" };
// =================
// STATIC PROPERTIES
// =================
YandexProvider.tfResourceType = "yandex";
//# sourceMappingURL=data:application/json;base64,