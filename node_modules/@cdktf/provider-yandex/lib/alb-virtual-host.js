"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlbVirtualHost = exports.AlbVirtualHostTimeoutsOutputReference = exports.albVirtualHostTimeoutsToTerraform = exports.AlbVirtualHostRouteList = exports.AlbVirtualHostRouteOutputReference = exports.albVirtualHostRouteToTerraform = exports.AlbVirtualHostRouteHttpRouteOutputReference = exports.albVirtualHostRouteHttpRouteToTerraform = exports.AlbVirtualHostRouteHttpRouteRedirectActionOutputReference = exports.albVirtualHostRouteHttpRouteRedirectActionToTerraform = exports.AlbVirtualHostRouteHttpRouteHttpRouteActionOutputReference = exports.albVirtualHostRouteHttpRouteHttpRouteActionToTerraform = exports.AlbVirtualHostRouteHttpRouteHttpMatchList = exports.AlbVirtualHostRouteHttpRouteHttpMatchOutputReference = exports.albVirtualHostRouteHttpRouteHttpMatchToTerraform = exports.AlbVirtualHostRouteHttpRouteHttpMatchPathOutputReference = exports.albVirtualHostRouteHttpRouteHttpMatchPathToTerraform = exports.AlbVirtualHostRouteHttpRouteDirectResponseActionOutputReference = exports.albVirtualHostRouteHttpRouteDirectResponseActionToTerraform = exports.AlbVirtualHostRouteGrpcRouteOutputReference = exports.albVirtualHostRouteGrpcRouteToTerraform = exports.AlbVirtualHostRouteGrpcRouteGrpcStatusResponseActionOutputReference = exports.albVirtualHostRouteGrpcRouteGrpcStatusResponseActionToTerraform = exports.AlbVirtualHostRouteGrpcRouteGrpcRouteActionOutputReference = exports.albVirtualHostRouteGrpcRouteGrpcRouteActionToTerraform = exports.AlbVirtualHostRouteGrpcRouteGrpcMatchList = exports.AlbVirtualHostRouteGrpcRouteGrpcMatchOutputReference = exports.albVirtualHostRouteGrpcRouteGrpcMatchToTerraform = exports.AlbVirtualHostRouteGrpcRouteGrpcMatchFqmnOutputReference = exports.albVirtualHostRouteGrpcRouteGrpcMatchFqmnToTerraform = exports.AlbVirtualHostModifyResponseHeadersList = exports.AlbVirtualHostModifyResponseHeadersOutputReference = exports.albVirtualHostModifyResponseHeadersToTerraform = exports.AlbVirtualHostModifyRequestHeadersList = exports.AlbVirtualHostModifyRequestHeadersOutputReference = exports.albVirtualHostModifyRequestHeadersToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function albVirtualHostModifyRequestHeadersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        append: cdktf.stringToTerraform(struct.append),
        name: cdktf.stringToTerraform(struct.name),
        remove: cdktf.booleanToTerraform(struct.remove),
        replace: cdktf.stringToTerraform(struct.replace),
    };
}
exports.albVirtualHostModifyRequestHeadersToTerraform = albVirtualHostModifyRequestHeadersToTerraform;
class AlbVirtualHostModifyRequestHeadersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._append !== undefined) {
            hasAnyValues = true;
            internalValueResult.append = this._append;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._remove !== undefined) {
            hasAnyValues = true;
            internalValueResult.remove = this._remove;
        }
        if (this._replace !== undefined) {
            hasAnyValues = true;
            internalValueResult.replace = this._replace;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._append = undefined;
            this._name = undefined;
            this._remove = undefined;
            this._replace = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._append = value.append;
            this._name = value.name;
            this._remove = value.remove;
            this._replace = value.replace;
        }
    }
    get append() {
        return this.getStringAttribute('append');
    }
    set append(value) {
        this._append = value;
    }
    resetAppend() {
        this._append = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get appendInput() {
        return this._append;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get remove() {
        return this.getBooleanAttribute('remove');
    }
    set remove(value) {
        this._remove = value;
    }
    resetRemove() {
        this._remove = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get removeInput() {
        return this._remove;
    }
    get replace() {
        return this.getStringAttribute('replace');
    }
    set replace(value) {
        this._replace = value;
    }
    resetReplace() {
        this._replace = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replaceInput() {
        return this._replace;
    }
}
exports.AlbVirtualHostModifyRequestHeadersOutputReference = AlbVirtualHostModifyRequestHeadersOutputReference;
_a = JSII_RTTI_SYMBOL_1;
AlbVirtualHostModifyRequestHeadersOutputReference[_a] = { fqn: "@cdktf/provider-yandex.AlbVirtualHostModifyRequestHeadersOutputReference", version: "2.0.32" };
class AlbVirtualHostModifyRequestHeadersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AlbVirtualHostModifyRequestHeadersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AlbVirtualHostModifyRequestHeadersList = AlbVirtualHostModifyRequestHeadersList;
_b = JSII_RTTI_SYMBOL_1;
AlbVirtualHostModifyRequestHeadersList[_b] = { fqn: "@cdktf/provider-yandex.AlbVirtualHostModifyRequestHeadersList", version: "2.0.32" };
function albVirtualHostModifyResponseHeadersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        append: cdktf.stringToTerraform(struct.append),
        name: cdktf.stringToTerraform(struct.name),
        remove: cdktf.booleanToTerraform(struct.remove),
        replace: cdktf.stringToTerraform(struct.replace),
    };
}
exports.albVirtualHostModifyResponseHeadersToTerraform = albVirtualHostModifyResponseHeadersToTerraform;
class AlbVirtualHostModifyResponseHeadersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._append !== undefined) {
            hasAnyValues = true;
            internalValueResult.append = this._append;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._remove !== undefined) {
            hasAnyValues = true;
            internalValueResult.remove = this._remove;
        }
        if (this._replace !== undefined) {
            hasAnyValues = true;
            internalValueResult.replace = this._replace;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._append = undefined;
            this._name = undefined;
            this._remove = undefined;
            this._replace = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._append = value.append;
            this._name = value.name;
            this._remove = value.remove;
            this._replace = value.replace;
        }
    }
    get append() {
        return this.getStringAttribute('append');
    }
    set append(value) {
        this._append = value;
    }
    resetAppend() {
        this._append = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get appendInput() {
        return this._append;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get remove() {
        return this.getBooleanAttribute('remove');
    }
    set remove(value) {
        this._remove = value;
    }
    resetRemove() {
        this._remove = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get removeInput() {
        return this._remove;
    }
    get replace() {
        return this.getStringAttribute('replace');
    }
    set replace(value) {
        this._replace = value;
    }
    resetReplace() {
        this._replace = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replaceInput() {
        return this._replace;
    }
}
exports.AlbVirtualHostModifyResponseHeadersOutputReference = AlbVirtualHostModifyResponseHeadersOutputReference;
_c = JSII_RTTI_SYMBOL_1;
AlbVirtualHostModifyResponseHeadersOutputReference[_c] = { fqn: "@cdktf/provider-yandex.AlbVirtualHostModifyResponseHeadersOutputReference", version: "2.0.32" };
class AlbVirtualHostModifyResponseHeadersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AlbVirtualHostModifyResponseHeadersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AlbVirtualHostModifyResponseHeadersList = AlbVirtualHostModifyResponseHeadersList;
_d = JSII_RTTI_SYMBOL_1;
AlbVirtualHostModifyResponseHeadersList[_d] = { fqn: "@cdktf/provider-yandex.AlbVirtualHostModifyResponseHeadersList", version: "2.0.32" };
function albVirtualHostRouteGrpcRouteGrpcMatchFqmnToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        exact: cdktf.stringToTerraform(struct.exact),
        prefix: cdktf.stringToTerraform(struct.prefix),
    };
}
exports.albVirtualHostRouteGrpcRouteGrpcMatchFqmnToTerraform = albVirtualHostRouteGrpcRouteGrpcMatchFqmnToTerraform;
class AlbVirtualHostRouteGrpcRouteGrpcMatchFqmnOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._exact !== undefined) {
            hasAnyValues = true;
            internalValueResult.exact = this._exact;
        }
        if (this._prefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefix = this._prefix;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._exact = undefined;
            this._prefix = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._exact = value.exact;
            this._prefix = value.prefix;
        }
    }
    get exact() {
        return this.getStringAttribute('exact');
    }
    set exact(value) {
        this._exact = value;
    }
    resetExact() {
        this._exact = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exactInput() {
        return this._exact;
    }
    get prefix() {
        return this.getStringAttribute('prefix');
    }
    set prefix(value) {
        this._prefix = value;
    }
    resetPrefix() {
        this._prefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixInput() {
        return this._prefix;
    }
}
exports.AlbVirtualHostRouteGrpcRouteGrpcMatchFqmnOutputReference = AlbVirtualHostRouteGrpcRouteGrpcMatchFqmnOutputReference;
_e = JSII_RTTI_SYMBOL_1;
AlbVirtualHostRouteGrpcRouteGrpcMatchFqmnOutputReference[_e] = { fqn: "@cdktf/provider-yandex.AlbVirtualHostRouteGrpcRouteGrpcMatchFqmnOutputReference", version: "2.0.32" };
function albVirtualHostRouteGrpcRouteGrpcMatchToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        fqmn: albVirtualHostRouteGrpcRouteGrpcMatchFqmnToTerraform(struct.fqmn),
    };
}
exports.albVirtualHostRouteGrpcRouteGrpcMatchToTerraform = albVirtualHostRouteGrpcRouteGrpcMatchToTerraform;
class AlbVirtualHostRouteGrpcRouteGrpcMatchOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // fqmn - computed: false, optional: true, required: false
        this._fqmn = new AlbVirtualHostRouteGrpcRouteGrpcMatchFqmnOutputReference(this, "fqmn");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._fqmn?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.fqmn = this._fqmn?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._fqmn.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._fqmn.internalValue = value.fqmn;
        }
    }
    get fqmn() {
        return this._fqmn;
    }
    putFqmn(value) {
        this._fqmn.internalValue = value;
    }
    resetFqmn() {
        this._fqmn.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fqmnInput() {
        return this._fqmn.internalValue;
    }
}
exports.AlbVirtualHostRouteGrpcRouteGrpcMatchOutputReference = AlbVirtualHostRouteGrpcRouteGrpcMatchOutputReference;
_f = JSII_RTTI_SYMBOL_1;
AlbVirtualHostRouteGrpcRouteGrpcMatchOutputReference[_f] = { fqn: "@cdktf/provider-yandex.AlbVirtualHostRouteGrpcRouteGrpcMatchOutputReference", version: "2.0.32" };
class AlbVirtualHostRouteGrpcRouteGrpcMatchList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AlbVirtualHostRouteGrpcRouteGrpcMatchOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AlbVirtualHostRouteGrpcRouteGrpcMatchList = AlbVirtualHostRouteGrpcRouteGrpcMatchList;
_g = JSII_RTTI_SYMBOL_1;
AlbVirtualHostRouteGrpcRouteGrpcMatchList[_g] = { fqn: "@cdktf/provider-yandex.AlbVirtualHostRouteGrpcRouteGrpcMatchList", version: "2.0.32" };
function albVirtualHostRouteGrpcRouteGrpcRouteActionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auto_host_rewrite: cdktf.booleanToTerraform(struct.autoHostRewrite),
        backend_group_id: cdktf.stringToTerraform(struct.backendGroupId),
        host_rewrite: cdktf.stringToTerraform(struct.hostRewrite),
        idle_timeout: cdktf.stringToTerraform(struct.idleTimeout),
        max_timeout: cdktf.stringToTerraform(struct.maxTimeout),
    };
}
exports.albVirtualHostRouteGrpcRouteGrpcRouteActionToTerraform = albVirtualHostRouteGrpcRouteGrpcRouteActionToTerraform;
class AlbVirtualHostRouteGrpcRouteGrpcRouteActionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._autoHostRewrite !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoHostRewrite = this._autoHostRewrite;
        }
        if (this._backendGroupId !== undefined) {
            hasAnyValues = true;
            internalValueResult.backendGroupId = this._backendGroupId;
        }
        if (this._hostRewrite !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostRewrite = this._hostRewrite;
        }
        if (this._idleTimeout !== undefined) {
            hasAnyValues = true;
            internalValueResult.idleTimeout = this._idleTimeout;
        }
        if (this._maxTimeout !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxTimeout = this._maxTimeout;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._autoHostRewrite = undefined;
            this._backendGroupId = undefined;
            this._hostRewrite = undefined;
            this._idleTimeout = undefined;
            this._maxTimeout = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._autoHostRewrite = value.autoHostRewrite;
            this._backendGroupId = value.backendGroupId;
            this._hostRewrite = value.hostRewrite;
            this._idleTimeout = value.idleTimeout;
            this._maxTimeout = value.maxTimeout;
        }
    }
    get autoHostRewrite() {
        return this.getBooleanAttribute('auto_host_rewrite');
    }
    set autoHostRewrite(value) {
        this._autoHostRewrite = value;
    }
    resetAutoHostRewrite() {
        this._autoHostRewrite = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoHostRewriteInput() {
        return this._autoHostRewrite;
    }
    get backendGroupId() {
        return this.getStringAttribute('backend_group_id');
    }
    set backendGroupId(value) {
        this._backendGroupId = value;
    }
    // Temporarily expose input value. Use with caution.
    get backendGroupIdInput() {
        return this._backendGroupId;
    }
    get hostRewrite() {
        return this.getStringAttribute('host_rewrite');
    }
    set hostRewrite(value) {
        this._hostRewrite = value;
    }
    resetHostRewrite() {
        this._hostRewrite = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostRewriteInput() {
        return this._hostRewrite;
    }
    get idleTimeout() {
        return this.getStringAttribute('idle_timeout');
    }
    set idleTimeout(value) {
        this._idleTimeout = value;
    }
    resetIdleTimeout() {
        this._idleTimeout = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idleTimeoutInput() {
        return this._idleTimeout;
    }
    get maxTimeout() {
        return this.getStringAttribute('max_timeout');
    }
    set maxTimeout(value) {
        this._maxTimeout = value;
    }
    resetMaxTimeout() {
        this._maxTimeout = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxTimeoutInput() {
        return this._maxTimeout;
    }
}
exports.AlbVirtualHostRouteGrpcRouteGrpcRouteActionOutputReference = AlbVirtualHostRouteGrpcRouteGrpcRouteActionOutputReference;
_h = JSII_RTTI_SYMBOL_1;
AlbVirtualHostRouteGrpcRouteGrpcRouteActionOutputReference[_h] = { fqn: "@cdktf/provider-yandex.AlbVirtualHostRouteGrpcRouteGrpcRouteActionOutputReference", version: "2.0.32" };
function albVirtualHostRouteGrpcRouteGrpcStatusResponseActionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        status: cdktf.stringToTerraform(struct.status),
    };
}
exports.albVirtualHostRouteGrpcRouteGrpcStatusResponseActionToTerraform = albVirtualHostRouteGrpcRouteGrpcStatusResponseActionToTerraform;
class AlbVirtualHostRouteGrpcRouteGrpcStatusResponseActionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._status !== undefined) {
            hasAnyValues = true;
            internalValueResult.status = this._status;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._status = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._status = value.status;
        }
    }
    get status() {
        return this.getStringAttribute('status');
    }
    set status(value) {
        this._status = value;
    }
    resetStatus() {
        this._status = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statusInput() {
        return this._status;
    }
}
exports.AlbVirtualHostRouteGrpcRouteGrpcStatusResponseActionOutputReference = AlbVirtualHostRouteGrpcRouteGrpcStatusResponseActionOutputReference;
_j = JSII_RTTI_SYMBOL_1;
AlbVirtualHostRouteGrpcRouteGrpcStatusResponseActionOutputReference[_j] = { fqn: "@cdktf/provider-yandex.AlbVirtualHostRouteGrpcRouteGrpcStatusResponseActionOutputReference", version: "2.0.32" };
function albVirtualHostRouteGrpcRouteToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        grpc_match: cdktf.listMapper(albVirtualHostRouteGrpcRouteGrpcMatchToTerraform, true)(struct.grpcMatch),
        grpc_route_action: albVirtualHostRouteGrpcRouteGrpcRouteActionToTerraform(struct.grpcRouteAction),
        grpc_status_response_action: albVirtualHostRouteGrpcRouteGrpcStatusResponseActionToTerraform(struct.grpcStatusResponseAction),
    };
}
exports.albVirtualHostRouteGrpcRouteToTerraform = albVirtualHostRouteGrpcRouteToTerraform;
class AlbVirtualHostRouteGrpcRouteOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // grpc_match - computed: false, optional: true, required: false
        this._grpcMatch = new AlbVirtualHostRouteGrpcRouteGrpcMatchList(this, "grpc_match", false);
        // grpc_route_action - computed: false, optional: true, required: false
        this._grpcRouteAction = new AlbVirtualHostRouteGrpcRouteGrpcRouteActionOutputReference(this, "grpc_route_action");
        // grpc_status_response_action - computed: false, optional: true, required: false
        this._grpcStatusResponseAction = new AlbVirtualHostRouteGrpcRouteGrpcStatusResponseActionOutputReference(this, "grpc_status_response_action");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._grpcMatch?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.grpcMatch = this._grpcMatch?.internalValue;
        }
        if (this._grpcRouteAction?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.grpcRouteAction = this._grpcRouteAction?.internalValue;
        }
        if (this._grpcStatusResponseAction?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.grpcStatusResponseAction = this._grpcStatusResponseAction?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._grpcMatch.internalValue = undefined;
            this._grpcRouteAction.internalValue = undefined;
            this._grpcStatusResponseAction.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._grpcMatch.internalValue = value.grpcMatch;
            this._grpcRouteAction.internalValue = value.grpcRouteAction;
            this._grpcStatusResponseAction.internalValue = value.grpcStatusResponseAction;
        }
    }
    get grpcMatch() {
        return this._grpcMatch;
    }
    putGrpcMatch(value) {
        this._grpcMatch.internalValue = value;
    }
    resetGrpcMatch() {
        this._grpcMatch.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get grpcMatchInput() {
        return this._grpcMatch.internalValue;
    }
    get grpcRouteAction() {
        return this._grpcRouteAction;
    }
    putGrpcRouteAction(value) {
        this._grpcRouteAction.internalValue = value;
    }
    resetGrpcRouteAction() {
        this._grpcRouteAction.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get grpcRouteActionInput() {
        return this._grpcRouteAction.internalValue;
    }
    get grpcStatusResponseAction() {
        return this._grpcStatusResponseAction;
    }
    putGrpcStatusResponseAction(value) {
        this._grpcStatusResponseAction.internalValue = value;
    }
    resetGrpcStatusResponseAction() {
        this._grpcStatusResponseAction.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get grpcStatusResponseActionInput() {
        return this._grpcStatusResponseAction.internalValue;
    }
}
exports.AlbVirtualHostRouteGrpcRouteOutputReference = AlbVirtualHostRouteGrpcRouteOutputReference;
_k = JSII_RTTI_SYMBOL_1;
AlbVirtualHostRouteGrpcRouteOutputReference[_k] = { fqn: "@cdktf/provider-yandex.AlbVirtualHostRouteGrpcRouteOutputReference", version: "2.0.32" };
function albVirtualHostRouteHttpRouteDirectResponseActionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        body: cdktf.stringToTerraform(struct.body),
        status: cdktf.numberToTerraform(struct.status),
    };
}
exports.albVirtualHostRouteHttpRouteDirectResponseActionToTerraform = albVirtualHostRouteHttpRouteDirectResponseActionToTerraform;
class AlbVirtualHostRouteHttpRouteDirectResponseActionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._body !== undefined) {
            hasAnyValues = true;
            internalValueResult.body = this._body;
        }
        if (this._status !== undefined) {
            hasAnyValues = true;
            internalValueResult.status = this._status;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._body = undefined;
            this._status = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._body = value.body;
            this._status = value.status;
        }
    }
    get body() {
        return this.getStringAttribute('body');
    }
    set body(value) {
        this._body = value;
    }
    resetBody() {
        this._body = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bodyInput() {
        return this._body;
    }
    get status() {
        return this.getNumberAttribute('status');
    }
    set status(value) {
        this._status = value;
    }
    resetStatus() {
        this._status = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statusInput() {
        return this._status;
    }
}
exports.AlbVirtualHostRouteHttpRouteDirectResponseActionOutputReference = AlbVirtualHostRouteHttpRouteDirectResponseActionOutputReference;
_l = JSII_RTTI_SYMBOL_1;
AlbVirtualHostRouteHttpRouteDirectResponseActionOutputReference[_l] = { fqn: "@cdktf/provider-yandex.AlbVirtualHostRouteHttpRouteDirectResponseActionOutputReference", version: "2.0.32" };
function albVirtualHostRouteHttpRouteHttpMatchPathToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        exact: cdktf.stringToTerraform(struct.exact),
        prefix: cdktf.stringToTerraform(struct.prefix),
    };
}
exports.albVirtualHostRouteHttpRouteHttpMatchPathToTerraform = albVirtualHostRouteHttpRouteHttpMatchPathToTerraform;
class AlbVirtualHostRouteHttpRouteHttpMatchPathOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._exact !== undefined) {
            hasAnyValues = true;
            internalValueResult.exact = this._exact;
        }
        if (this._prefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefix = this._prefix;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._exact = undefined;
            this._prefix = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._exact = value.exact;
            this._prefix = value.prefix;
        }
    }
    get exact() {
        return this.getStringAttribute('exact');
    }
    set exact(value) {
        this._exact = value;
    }
    resetExact() {
        this._exact = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exactInput() {
        return this._exact;
    }
    get prefix() {
        return this.getStringAttribute('prefix');
    }
    set prefix(value) {
        this._prefix = value;
    }
    resetPrefix() {
        this._prefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixInput() {
        return this._prefix;
    }
}
exports.AlbVirtualHostRouteHttpRouteHttpMatchPathOutputReference = AlbVirtualHostRouteHttpRouteHttpMatchPathOutputReference;
_m = JSII_RTTI_SYMBOL_1;
AlbVirtualHostRouteHttpRouteHttpMatchPathOutputReference[_m] = { fqn: "@cdktf/provider-yandex.AlbVirtualHostRouteHttpRouteHttpMatchPathOutputReference", version: "2.0.32" };
function albVirtualHostRouteHttpRouteHttpMatchToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        http_method: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.httpMethod),
        path: albVirtualHostRouteHttpRouteHttpMatchPathToTerraform(struct.path),
    };
}
exports.albVirtualHostRouteHttpRouteHttpMatchToTerraform = albVirtualHostRouteHttpRouteHttpMatchToTerraform;
class AlbVirtualHostRouteHttpRouteHttpMatchOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // path - computed: false, optional: true, required: false
        this._path = new AlbVirtualHostRouteHttpRouteHttpMatchPathOutputReference(this, "path");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._httpMethod !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpMethod = this._httpMethod;
        }
        if (this._path?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._httpMethod = undefined;
            this._path.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._httpMethod = value.httpMethod;
            this._path.internalValue = value.path;
        }
    }
    get httpMethod() {
        return cdktf.Fn.tolist(this.getListAttribute('http_method'));
    }
    set httpMethod(value) {
        this._httpMethod = value;
    }
    resetHttpMethod() {
        this._httpMethod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpMethodInput() {
        return this._httpMethod;
    }
    get path() {
        return this._path;
    }
    putPath(value) {
        this._path.internalValue = value;
    }
    resetPath() {
        this._path.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path.internalValue;
    }
}
exports.AlbVirtualHostRouteHttpRouteHttpMatchOutputReference = AlbVirtualHostRouteHttpRouteHttpMatchOutputReference;
_o = JSII_RTTI_SYMBOL_1;
AlbVirtualHostRouteHttpRouteHttpMatchOutputReference[_o] = { fqn: "@cdktf/provider-yandex.AlbVirtualHostRouteHttpRouteHttpMatchOutputReference", version: "2.0.32" };
class AlbVirtualHostRouteHttpRouteHttpMatchList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AlbVirtualHostRouteHttpRouteHttpMatchOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AlbVirtualHostRouteHttpRouteHttpMatchList = AlbVirtualHostRouteHttpRouteHttpMatchList;
_p = JSII_RTTI_SYMBOL_1;
AlbVirtualHostRouteHttpRouteHttpMatchList[_p] = { fqn: "@cdktf/provider-yandex.AlbVirtualHostRouteHttpRouteHttpMatchList", version: "2.0.32" };
function albVirtualHostRouteHttpRouteHttpRouteActionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auto_host_rewrite: cdktf.booleanToTerraform(struct.autoHostRewrite),
        backend_group_id: cdktf.stringToTerraform(struct.backendGroupId),
        host_rewrite: cdktf.stringToTerraform(struct.hostRewrite),
        idle_timeout: cdktf.stringToTerraform(struct.idleTimeout),
        prefix_rewrite: cdktf.stringToTerraform(struct.prefixRewrite),
        timeout: cdktf.stringToTerraform(struct.timeout),
        upgrade_types: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.upgradeTypes),
    };
}
exports.albVirtualHostRouteHttpRouteHttpRouteActionToTerraform = albVirtualHostRouteHttpRouteHttpRouteActionToTerraform;
class AlbVirtualHostRouteHttpRouteHttpRouteActionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._autoHostRewrite !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoHostRewrite = this._autoHostRewrite;
        }
        if (this._backendGroupId !== undefined) {
            hasAnyValues = true;
            internalValueResult.backendGroupId = this._backendGroupId;
        }
        if (this._hostRewrite !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostRewrite = this._hostRewrite;
        }
        if (this._idleTimeout !== undefined) {
            hasAnyValues = true;
            internalValueResult.idleTimeout = this._idleTimeout;
        }
        if (this._prefixRewrite !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefixRewrite = this._prefixRewrite;
        }
        if (this._timeout !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeout = this._timeout;
        }
        if (this._upgradeTypes !== undefined) {
            hasAnyValues = true;
            internalValueResult.upgradeTypes = this._upgradeTypes;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._autoHostRewrite = undefined;
            this._backendGroupId = undefined;
            this._hostRewrite = undefined;
            this._idleTimeout = undefined;
            this._prefixRewrite = undefined;
            this._timeout = undefined;
            this._upgradeTypes = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._autoHostRewrite = value.autoHostRewrite;
            this._backendGroupId = value.backendGroupId;
            this._hostRewrite = value.hostRewrite;
            this._idleTimeout = value.idleTimeout;
            this._prefixRewrite = value.prefixRewrite;
            this._timeout = value.timeout;
            this._upgradeTypes = value.upgradeTypes;
        }
    }
    get autoHostRewrite() {
        return this.getBooleanAttribute('auto_host_rewrite');
    }
    set autoHostRewrite(value) {
        this._autoHostRewrite = value;
    }
    resetAutoHostRewrite() {
        this._autoHostRewrite = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoHostRewriteInput() {
        return this._autoHostRewrite;
    }
    get backendGroupId() {
        return this.getStringAttribute('backend_group_id');
    }
    set backendGroupId(value) {
        this._backendGroupId = value;
    }
    // Temporarily expose input value. Use with caution.
    get backendGroupIdInput() {
        return this._backendGroupId;
    }
    get hostRewrite() {
        return this.getStringAttribute('host_rewrite');
    }
    set hostRewrite(value) {
        this._hostRewrite = value;
    }
    resetHostRewrite() {
        this._hostRewrite = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostRewriteInput() {
        return this._hostRewrite;
    }
    get idleTimeout() {
        return this.getStringAttribute('idle_timeout');
    }
    set idleTimeout(value) {
        this._idleTimeout = value;
    }
    resetIdleTimeout() {
        this._idleTimeout = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idleTimeoutInput() {
        return this._idleTimeout;
    }
    get prefixRewrite() {
        return this.getStringAttribute('prefix_rewrite');
    }
    set prefixRewrite(value) {
        this._prefixRewrite = value;
    }
    resetPrefixRewrite() {
        this._prefixRewrite = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixRewriteInput() {
        return this._prefixRewrite;
    }
    get timeout() {
        return this.getStringAttribute('timeout');
    }
    set timeout(value) {
        this._timeout = value;
    }
    resetTimeout() {
        this._timeout = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutInput() {
        return this._timeout;
    }
    get upgradeTypes() {
        return cdktf.Fn.tolist(this.getListAttribute('upgrade_types'));
    }
    set upgradeTypes(value) {
        this._upgradeTypes = value;
    }
    resetUpgradeTypes() {
        this._upgradeTypes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get upgradeTypesInput() {
        return this._upgradeTypes;
    }
}
exports.AlbVirtualHostRouteHttpRouteHttpRouteActionOutputReference = AlbVirtualHostRouteHttpRouteHttpRouteActionOutputReference;
_q = JSII_RTTI_SYMBOL_1;
AlbVirtualHostRouteHttpRouteHttpRouteActionOutputReference[_q] = { fqn: "@cdktf/provider-yandex.AlbVirtualHostRouteHttpRouteHttpRouteActionOutputReference", version: "2.0.32" };
function albVirtualHostRouteHttpRouteRedirectActionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        remove_query: cdktf.booleanToTerraform(struct.removeQuery),
        replace_host: cdktf.stringToTerraform(struct.replaceHost),
        replace_path: cdktf.stringToTerraform(struct.replacePath),
        replace_port: cdktf.numberToTerraform(struct.replacePort),
        replace_prefix: cdktf.stringToTerraform(struct.replacePrefix),
        replace_scheme: cdktf.stringToTerraform(struct.replaceScheme),
        response_code: cdktf.stringToTerraform(struct.responseCode),
    };
}
exports.albVirtualHostRouteHttpRouteRedirectActionToTerraform = albVirtualHostRouteHttpRouteRedirectActionToTerraform;
class AlbVirtualHostRouteHttpRouteRedirectActionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._removeQuery !== undefined) {
            hasAnyValues = true;
            internalValueResult.removeQuery = this._removeQuery;
        }
        if (this._replaceHost !== undefined) {
            hasAnyValues = true;
            internalValueResult.replaceHost = this._replaceHost;
        }
        if (this._replacePath !== undefined) {
            hasAnyValues = true;
            internalValueResult.replacePath = this._replacePath;
        }
        if (this._replacePort !== undefined) {
            hasAnyValues = true;
            internalValueResult.replacePort = this._replacePort;
        }
        if (this._replacePrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.replacePrefix = this._replacePrefix;
        }
        if (this._replaceScheme !== undefined) {
            hasAnyValues = true;
            internalValueResult.replaceScheme = this._replaceScheme;
        }
        if (this._responseCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.responseCode = this._responseCode;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._removeQuery = undefined;
            this._replaceHost = undefined;
            this._replacePath = undefined;
            this._replacePort = undefined;
            this._replacePrefix = undefined;
            this._replaceScheme = undefined;
            this._responseCode = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._removeQuery = value.removeQuery;
            this._replaceHost = value.replaceHost;
            this._replacePath = value.replacePath;
            this._replacePort = value.replacePort;
            this._replacePrefix = value.replacePrefix;
            this._replaceScheme = value.replaceScheme;
            this._responseCode = value.responseCode;
        }
    }
    get removeQuery() {
        return this.getBooleanAttribute('remove_query');
    }
    set removeQuery(value) {
        this._removeQuery = value;
    }
    resetRemoveQuery() {
        this._removeQuery = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get removeQueryInput() {
        return this._removeQuery;
    }
    get replaceHost() {
        return this.getStringAttribute('replace_host');
    }
    set replaceHost(value) {
        this._replaceHost = value;
    }
    resetReplaceHost() {
        this._replaceHost = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replaceHostInput() {
        return this._replaceHost;
    }
    get replacePath() {
        return this.getStringAttribute('replace_path');
    }
    set replacePath(value) {
        this._replacePath = value;
    }
    resetReplacePath() {
        this._replacePath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replacePathInput() {
        return this._replacePath;
    }
    get replacePort() {
        return this.getNumberAttribute('replace_port');
    }
    set replacePort(value) {
        this._replacePort = value;
    }
    resetReplacePort() {
        this._replacePort = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replacePortInput() {
        return this._replacePort;
    }
    get replacePrefix() {
        return this.getStringAttribute('replace_prefix');
    }
    set replacePrefix(value) {
        this._replacePrefix = value;
    }
    resetReplacePrefix() {
        this._replacePrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replacePrefixInput() {
        return this._replacePrefix;
    }
    get replaceScheme() {
        return this.getStringAttribute('replace_scheme');
    }
    set replaceScheme(value) {
        this._replaceScheme = value;
    }
    resetReplaceScheme() {
        this._replaceScheme = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replaceSchemeInput() {
        return this._replaceScheme;
    }
    get responseCode() {
        return this.getStringAttribute('response_code');
    }
    set responseCode(value) {
        this._responseCode = value;
    }
    resetResponseCode() {
        this._responseCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responseCodeInput() {
        return this._responseCode;
    }
}
exports.AlbVirtualHostRouteHttpRouteRedirectActionOutputReference = AlbVirtualHostRouteHttpRouteRedirectActionOutputReference;
_r = JSII_RTTI_SYMBOL_1;
AlbVirtualHostRouteHttpRouteRedirectActionOutputReference[_r] = { fqn: "@cdktf/provider-yandex.AlbVirtualHostRouteHttpRouteRedirectActionOutputReference", version: "2.0.32" };
function albVirtualHostRouteHttpRouteToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        direct_response_action: albVirtualHostRouteHttpRouteDirectResponseActionToTerraform(struct.directResponseAction),
        http_match: cdktf.listMapper(albVirtualHostRouteHttpRouteHttpMatchToTerraform, true)(struct.httpMatch),
        http_route_action: albVirtualHostRouteHttpRouteHttpRouteActionToTerraform(struct.httpRouteAction),
        redirect_action: albVirtualHostRouteHttpRouteRedirectActionToTerraform(struct.redirectAction),
    };
}
exports.albVirtualHostRouteHttpRouteToTerraform = albVirtualHostRouteHttpRouteToTerraform;
class AlbVirtualHostRouteHttpRouteOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // direct_response_action - computed: false, optional: true, required: false
        this._directResponseAction = new AlbVirtualHostRouteHttpRouteDirectResponseActionOutputReference(this, "direct_response_action");
        // http_match - computed: false, optional: true, required: false
        this._httpMatch = new AlbVirtualHostRouteHttpRouteHttpMatchList(this, "http_match", false);
        // http_route_action - computed: false, optional: true, required: false
        this._httpRouteAction = new AlbVirtualHostRouteHttpRouteHttpRouteActionOutputReference(this, "http_route_action");
        // redirect_action - computed: false, optional: true, required: false
        this._redirectAction = new AlbVirtualHostRouteHttpRouteRedirectActionOutputReference(this, "redirect_action");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._directResponseAction?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.directResponseAction = this._directResponseAction?.internalValue;
        }
        if (this._httpMatch?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpMatch = this._httpMatch?.internalValue;
        }
        if (this._httpRouteAction?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpRouteAction = this._httpRouteAction?.internalValue;
        }
        if (this._redirectAction?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.redirectAction = this._redirectAction?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._directResponseAction.internalValue = undefined;
            this._httpMatch.internalValue = undefined;
            this._httpRouteAction.internalValue = undefined;
            this._redirectAction.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._directResponseAction.internalValue = value.directResponseAction;
            this._httpMatch.internalValue = value.httpMatch;
            this._httpRouteAction.internalValue = value.httpRouteAction;
            this._redirectAction.internalValue = value.redirectAction;
        }
    }
    get directResponseAction() {
        return this._directResponseAction;
    }
    putDirectResponseAction(value) {
        this._directResponseAction.internalValue = value;
    }
    resetDirectResponseAction() {
        this._directResponseAction.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get directResponseActionInput() {
        return this._directResponseAction.internalValue;
    }
    get httpMatch() {
        return this._httpMatch;
    }
    putHttpMatch(value) {
        this._httpMatch.internalValue = value;
    }
    resetHttpMatch() {
        this._httpMatch.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpMatchInput() {
        return this._httpMatch.internalValue;
    }
    get httpRouteAction() {
        return this._httpRouteAction;
    }
    putHttpRouteAction(value) {
        this._httpRouteAction.internalValue = value;
    }
    resetHttpRouteAction() {
        this._httpRouteAction.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpRouteActionInput() {
        return this._httpRouteAction.internalValue;
    }
    get redirectAction() {
        return this._redirectAction;
    }
    putRedirectAction(value) {
        this._redirectAction.internalValue = value;
    }
    resetRedirectAction() {
        this._redirectAction.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redirectActionInput() {
        return this._redirectAction.internalValue;
    }
}
exports.AlbVirtualHostRouteHttpRouteOutputReference = AlbVirtualHostRouteHttpRouteOutputReference;
_s = JSII_RTTI_SYMBOL_1;
AlbVirtualHostRouteHttpRouteOutputReference[_s] = { fqn: "@cdktf/provider-yandex.AlbVirtualHostRouteHttpRouteOutputReference", version: "2.0.32" };
function albVirtualHostRouteToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        grpc_route: albVirtualHostRouteGrpcRouteToTerraform(struct.grpcRoute),
        http_route: albVirtualHostRouteHttpRouteToTerraform(struct.httpRoute),
    };
}
exports.albVirtualHostRouteToTerraform = albVirtualHostRouteToTerraform;
class AlbVirtualHostRouteOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // grpc_route - computed: false, optional: true, required: false
        this._grpcRoute = new AlbVirtualHostRouteGrpcRouteOutputReference(this, "grpc_route");
        // http_route - computed: false, optional: true, required: false
        this._httpRoute = new AlbVirtualHostRouteHttpRouteOutputReference(this, "http_route");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._grpcRoute?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.grpcRoute = this._grpcRoute?.internalValue;
        }
        if (this._httpRoute?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpRoute = this._httpRoute?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._grpcRoute.internalValue = undefined;
            this._httpRoute.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._grpcRoute.internalValue = value.grpcRoute;
            this._httpRoute.internalValue = value.httpRoute;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get grpcRoute() {
        return this._grpcRoute;
    }
    putGrpcRoute(value) {
        this._grpcRoute.internalValue = value;
    }
    resetGrpcRoute() {
        this._grpcRoute.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get grpcRouteInput() {
        return this._grpcRoute.internalValue;
    }
    get httpRoute() {
        return this._httpRoute;
    }
    putHttpRoute(value) {
        this._httpRoute.internalValue = value;
    }
    resetHttpRoute() {
        this._httpRoute.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpRouteInput() {
        return this._httpRoute.internalValue;
    }
}
exports.AlbVirtualHostRouteOutputReference = AlbVirtualHostRouteOutputReference;
_t = JSII_RTTI_SYMBOL_1;
AlbVirtualHostRouteOutputReference[_t] = { fqn: "@cdktf/provider-yandex.AlbVirtualHostRouteOutputReference", version: "2.0.32" };
class AlbVirtualHostRouteList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AlbVirtualHostRouteOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AlbVirtualHostRouteList = AlbVirtualHostRouteList;
_u = JSII_RTTI_SYMBOL_1;
AlbVirtualHostRouteList[_u] = { fqn: "@cdktf/provider-yandex.AlbVirtualHostRouteList", version: "2.0.32" };
function albVirtualHostTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.albVirtualHostTimeoutsToTerraform = albVirtualHostTimeoutsToTerraform;
class AlbVirtualHostTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.AlbVirtualHostTimeoutsOutputReference = AlbVirtualHostTimeoutsOutputReference;
_v = JSII_RTTI_SYMBOL_1;
AlbVirtualHostTimeoutsOutputReference[_v] = { fqn: "@cdktf/provider-yandex.AlbVirtualHostTimeoutsOutputReference", version: "2.0.32" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/yandex/r/alb_virtual_host yandex_alb_virtual_host}
*/
class AlbVirtualHost extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/yandex/r/alb_virtual_host yandex_alb_virtual_host} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options AlbVirtualHostConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'yandex_alb_virtual_host',
            terraformGeneratorMetadata: {
                providerName: 'yandex',
                providerVersion: '0.77.0',
                providerVersionConstraint: '~> 0.73'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // modify_request_headers - computed: false, optional: true, required: false
        this._modifyRequestHeaders = new AlbVirtualHostModifyRequestHeadersList(this, "modify_request_headers", false);
        // modify_response_headers - computed: false, optional: true, required: false
        this._modifyResponseHeaders = new AlbVirtualHostModifyResponseHeadersList(this, "modify_response_headers", false);
        // route - computed: false, optional: true, required: false
        this._route = new AlbVirtualHostRouteList(this, "route", false);
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new AlbVirtualHostTimeoutsOutputReference(this, "timeouts");
        this._authority = config.authority;
        this._httpRouterId = config.httpRouterId;
        this._id = config.id;
        this._name = config.name;
        this._modifyRequestHeaders.internalValue = config.modifyRequestHeaders;
        this._modifyResponseHeaders.internalValue = config.modifyResponseHeaders;
        this._route.internalValue = config.route;
        this._timeouts.internalValue = config.timeouts;
    }
    get authority() {
        return cdktf.Fn.tolist(this.getListAttribute('authority'));
    }
    set authority(value) {
        this._authority = value;
    }
    resetAuthority() {
        this._authority = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authorityInput() {
        return this._authority;
    }
    get httpRouterId() {
        return this.getStringAttribute('http_router_id');
    }
    set httpRouterId(value) {
        this._httpRouterId = value;
    }
    // Temporarily expose input value. Use with caution.
    get httpRouterIdInput() {
        return this._httpRouterId;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get modifyRequestHeaders() {
        return this._modifyRequestHeaders;
    }
    putModifyRequestHeaders(value) {
        this._modifyRequestHeaders.internalValue = value;
    }
    resetModifyRequestHeaders() {
        this._modifyRequestHeaders.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get modifyRequestHeadersInput() {
        return this._modifyRequestHeaders.internalValue;
    }
    get modifyResponseHeaders() {
        return this._modifyResponseHeaders;
    }
    putModifyResponseHeaders(value) {
        this._modifyResponseHeaders.internalValue = value;
    }
    resetModifyResponseHeaders() {
        this._modifyResponseHeaders.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get modifyResponseHeadersInput() {
        return this._modifyResponseHeaders.internalValue;
    }
    get route() {
        return this._route;
    }
    putRoute(value) {
        this._route.internalValue = value;
    }
    resetRoute() {
        this._route.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get routeInput() {
        return this._route.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            authority: cdktf.listMapper(cdktf.stringToTerraform, false)(this._authority),
            http_router_id: cdktf.stringToTerraform(this._httpRouterId),
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            modify_request_headers: cdktf.listMapper(albVirtualHostModifyRequestHeadersToTerraform, true)(this._modifyRequestHeaders.internalValue),
            modify_response_headers: cdktf.listMapper(albVirtualHostModifyResponseHeadersToTerraform, true)(this._modifyResponseHeaders.internalValue),
            route: cdktf.listMapper(albVirtualHostRouteToTerraform, true)(this._route.internalValue),
            timeouts: albVirtualHostTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
}
exports.AlbVirtualHost = AlbVirtualHost;
_w = JSII_RTTI_SYMBOL_1;
AlbVirtualHost[_w] = { fqn: "@cdktf/provider-yandex.AlbVirtualHost", version: "2.0.32" };
// =================
// STATIC PROPERTIES
// =================
AlbVirtualHost.tfResourceType = "yandex_alb_virtual_host";
//# sourceMappingURL=data:application/json;base64,