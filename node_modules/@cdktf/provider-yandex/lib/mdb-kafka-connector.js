"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MdbKafkaConnector = exports.MdbKafkaConnectorConnectorConfigMirrormakerList = exports.MdbKafkaConnectorConnectorConfigMirrormakerOutputReference = exports.mdbKafkaConnectorConnectorConfigMirrormakerToTerraform = exports.MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterOutputReference = exports.mdbKafkaConnectorConnectorConfigMirrormakerTargetClusterToTerraform = exports.MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisClusterList = exports.MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisClusterOutputReference = exports.mdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisClusterToTerraform = exports.MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalClusterList = exports.MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalClusterOutputReference = exports.mdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalClusterToTerraform = exports.MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterOutputReference = exports.mdbKafkaConnectorConnectorConfigMirrormakerSourceClusterToTerraform = exports.MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisClusterList = exports.MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisClusterOutputReference = exports.mdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisClusterToTerraform = exports.MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalClusterList = exports.MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalClusterOutputReference = exports.mdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalClusterToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function mdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalClusterToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bootstrap_servers: cdktf.stringToTerraform(struct.bootstrapServers),
        sasl_mechanism: cdktf.stringToTerraform(struct.saslMechanism),
        sasl_password: cdktf.stringToTerraform(struct.saslPassword),
        sasl_username: cdktf.stringToTerraform(struct.saslUsername),
        security_protocol: cdktf.stringToTerraform(struct.securityProtocol),
    };
}
exports.mdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalClusterToTerraform = mdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalClusterToTerraform;
class MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalClusterOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bootstrapServers !== undefined) {
            hasAnyValues = true;
            internalValueResult.bootstrapServers = this._bootstrapServers;
        }
        if (this._saslMechanism !== undefined) {
            hasAnyValues = true;
            internalValueResult.saslMechanism = this._saslMechanism;
        }
        if (this._saslPassword !== undefined) {
            hasAnyValues = true;
            internalValueResult.saslPassword = this._saslPassword;
        }
        if (this._saslUsername !== undefined) {
            hasAnyValues = true;
            internalValueResult.saslUsername = this._saslUsername;
        }
        if (this._securityProtocol !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityProtocol = this._securityProtocol;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._bootstrapServers = undefined;
            this._saslMechanism = undefined;
            this._saslPassword = undefined;
            this._saslUsername = undefined;
            this._securityProtocol = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._bootstrapServers = value.bootstrapServers;
            this._saslMechanism = value.saslMechanism;
            this._saslPassword = value.saslPassword;
            this._saslUsername = value.saslUsername;
            this._securityProtocol = value.securityProtocol;
        }
    }
    get bootstrapServers() {
        return this.getStringAttribute('bootstrap_servers');
    }
    set bootstrapServers(value) {
        this._bootstrapServers = value;
    }
    // Temporarily expose input value. Use with caution.
    get bootstrapServersInput() {
        return this._bootstrapServers;
    }
    get saslMechanism() {
        return this.getStringAttribute('sasl_mechanism');
    }
    set saslMechanism(value) {
        this._saslMechanism = value;
    }
    resetSaslMechanism() {
        this._saslMechanism = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get saslMechanismInput() {
        return this._saslMechanism;
    }
    get saslPassword() {
        return this.getStringAttribute('sasl_password');
    }
    set saslPassword(value) {
        this._saslPassword = value;
    }
    resetSaslPassword() {
        this._saslPassword = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get saslPasswordInput() {
        return this._saslPassword;
    }
    get saslUsername() {
        return this.getStringAttribute('sasl_username');
    }
    set saslUsername(value) {
        this._saslUsername = value;
    }
    resetSaslUsername() {
        this._saslUsername = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get saslUsernameInput() {
        return this._saslUsername;
    }
    get securityProtocol() {
        return this.getStringAttribute('security_protocol');
    }
    set securityProtocol(value) {
        this._securityProtocol = value;
    }
    resetSecurityProtocol() {
        this._securityProtocol = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityProtocolInput() {
        return this._securityProtocol;
    }
}
exports.MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalClusterOutputReference = MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalClusterOutputReference;
_a = JSII_RTTI_SYMBOL_1;
MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalClusterOutputReference[_a] = { fqn: "@cdktf/provider-yandex.MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalClusterOutputReference", version: "2.0.32" };
class MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalClusterList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalClusterOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalClusterList = MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalClusterList;
_b = JSII_RTTI_SYMBOL_1;
MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalClusterList[_b] = { fqn: "@cdktf/provider-yandex.MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalClusterList", version: "2.0.32" };
function mdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisClusterToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.mdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisClusterToTerraform = mdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisClusterToTerraform;
class MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisClusterOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
        }
    }
}
exports.MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisClusterOutputReference = MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisClusterOutputReference;
_c = JSII_RTTI_SYMBOL_1;
MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisClusterOutputReference[_c] = { fqn: "@cdktf/provider-yandex.MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisClusterOutputReference", version: "2.0.32" };
class MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisClusterList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisClusterOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisClusterList = MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisClusterList;
_d = JSII_RTTI_SYMBOL_1;
MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisClusterList[_d] = { fqn: "@cdktf/provider-yandex.MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisClusterList", version: "2.0.32" };
function mdbKafkaConnectorConnectorConfigMirrormakerSourceClusterToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        alias: cdktf.stringToTerraform(struct.alias),
        external_cluster: cdktf.listMapper(mdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalClusterToTerraform, true)(struct.externalCluster),
        this_cluster: cdktf.listMapper(mdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisClusterToTerraform, true)(struct.thisCluster),
    };
}
exports.mdbKafkaConnectorConnectorConfigMirrormakerSourceClusterToTerraform = mdbKafkaConnectorConnectorConfigMirrormakerSourceClusterToTerraform;
class MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // external_cluster - computed: false, optional: true, required: false
        this._externalCluster = new MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalClusterList(this, "external_cluster", false);
        // this_cluster - computed: false, optional: true, required: false
        this._thisCluster = new MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisClusterList(this, "this_cluster", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._alias !== undefined) {
            hasAnyValues = true;
            internalValueResult.alias = this._alias;
        }
        if (this._externalCluster?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.externalCluster = this._externalCluster?.internalValue;
        }
        if (this._thisCluster?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.thisCluster = this._thisCluster?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._alias = undefined;
            this._externalCluster.internalValue = undefined;
            this._thisCluster.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._alias = value.alias;
            this._externalCluster.internalValue = value.externalCluster;
            this._thisCluster.internalValue = value.thisCluster;
        }
    }
    get alias() {
        return this.getStringAttribute('alias');
    }
    set alias(value) {
        this._alias = value;
    }
    resetAlias() {
        this._alias = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aliasInput() {
        return this._alias;
    }
    get externalCluster() {
        return this._externalCluster;
    }
    putExternalCluster(value) {
        this._externalCluster.internalValue = value;
    }
    resetExternalCluster() {
        this._externalCluster.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get externalClusterInput() {
        return this._externalCluster.internalValue;
    }
    get thisCluster() {
        return this._thisCluster;
    }
    putThisCluster(value) {
        this._thisCluster.internalValue = value;
    }
    resetThisCluster() {
        this._thisCluster.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get thisClusterInput() {
        return this._thisCluster.internalValue;
    }
}
exports.MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterOutputReference = MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterOutputReference;
_e = JSII_RTTI_SYMBOL_1;
MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterOutputReference[_e] = { fqn: "@cdktf/provider-yandex.MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterOutputReference", version: "2.0.32" };
function mdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalClusterToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bootstrap_servers: cdktf.stringToTerraform(struct.bootstrapServers),
        sasl_mechanism: cdktf.stringToTerraform(struct.saslMechanism),
        sasl_password: cdktf.stringToTerraform(struct.saslPassword),
        sasl_username: cdktf.stringToTerraform(struct.saslUsername),
        security_protocol: cdktf.stringToTerraform(struct.securityProtocol),
    };
}
exports.mdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalClusterToTerraform = mdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalClusterToTerraform;
class MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalClusterOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bootstrapServers !== undefined) {
            hasAnyValues = true;
            internalValueResult.bootstrapServers = this._bootstrapServers;
        }
        if (this._saslMechanism !== undefined) {
            hasAnyValues = true;
            internalValueResult.saslMechanism = this._saslMechanism;
        }
        if (this._saslPassword !== undefined) {
            hasAnyValues = true;
            internalValueResult.saslPassword = this._saslPassword;
        }
        if (this._saslUsername !== undefined) {
            hasAnyValues = true;
            internalValueResult.saslUsername = this._saslUsername;
        }
        if (this._securityProtocol !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityProtocol = this._securityProtocol;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._bootstrapServers = undefined;
            this._saslMechanism = undefined;
            this._saslPassword = undefined;
            this._saslUsername = undefined;
            this._securityProtocol = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._bootstrapServers = value.bootstrapServers;
            this._saslMechanism = value.saslMechanism;
            this._saslPassword = value.saslPassword;
            this._saslUsername = value.saslUsername;
            this._securityProtocol = value.securityProtocol;
        }
    }
    get bootstrapServers() {
        return this.getStringAttribute('bootstrap_servers');
    }
    set bootstrapServers(value) {
        this._bootstrapServers = value;
    }
    // Temporarily expose input value. Use with caution.
    get bootstrapServersInput() {
        return this._bootstrapServers;
    }
    get saslMechanism() {
        return this.getStringAttribute('sasl_mechanism');
    }
    set saslMechanism(value) {
        this._saslMechanism = value;
    }
    resetSaslMechanism() {
        this._saslMechanism = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get saslMechanismInput() {
        return this._saslMechanism;
    }
    get saslPassword() {
        return this.getStringAttribute('sasl_password');
    }
    set saslPassword(value) {
        this._saslPassword = value;
    }
    resetSaslPassword() {
        this._saslPassword = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get saslPasswordInput() {
        return this._saslPassword;
    }
    get saslUsername() {
        return this.getStringAttribute('sasl_username');
    }
    set saslUsername(value) {
        this._saslUsername = value;
    }
    resetSaslUsername() {
        this._saslUsername = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get saslUsernameInput() {
        return this._saslUsername;
    }
    get securityProtocol() {
        return this.getStringAttribute('security_protocol');
    }
    set securityProtocol(value) {
        this._securityProtocol = value;
    }
    resetSecurityProtocol() {
        this._securityProtocol = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityProtocolInput() {
        return this._securityProtocol;
    }
}
exports.MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalClusterOutputReference = MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalClusterOutputReference;
_f = JSII_RTTI_SYMBOL_1;
MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalClusterOutputReference[_f] = { fqn: "@cdktf/provider-yandex.MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalClusterOutputReference", version: "2.0.32" };
class MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalClusterList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalClusterOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalClusterList = MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalClusterList;
_g = JSII_RTTI_SYMBOL_1;
MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalClusterList[_g] = { fqn: "@cdktf/provider-yandex.MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalClusterList", version: "2.0.32" };
function mdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisClusterToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.mdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisClusterToTerraform = mdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisClusterToTerraform;
class MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisClusterOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
        }
    }
}
exports.MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisClusterOutputReference = MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisClusterOutputReference;
_h = JSII_RTTI_SYMBOL_1;
MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisClusterOutputReference[_h] = { fqn: "@cdktf/provider-yandex.MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisClusterOutputReference", version: "2.0.32" };
class MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisClusterList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisClusterOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisClusterList = MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisClusterList;
_j = JSII_RTTI_SYMBOL_1;
MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisClusterList[_j] = { fqn: "@cdktf/provider-yandex.MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisClusterList", version: "2.0.32" };
function mdbKafkaConnectorConnectorConfigMirrormakerTargetClusterToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        alias: cdktf.stringToTerraform(struct.alias),
        external_cluster: cdktf.listMapper(mdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalClusterToTerraform, true)(struct.externalCluster),
        this_cluster: cdktf.listMapper(mdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisClusterToTerraform, true)(struct.thisCluster),
    };
}
exports.mdbKafkaConnectorConnectorConfigMirrormakerTargetClusterToTerraform = mdbKafkaConnectorConnectorConfigMirrormakerTargetClusterToTerraform;
class MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // external_cluster - computed: false, optional: true, required: false
        this._externalCluster = new MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalClusterList(this, "external_cluster", false);
        // this_cluster - computed: false, optional: true, required: false
        this._thisCluster = new MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisClusterList(this, "this_cluster", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._alias !== undefined) {
            hasAnyValues = true;
            internalValueResult.alias = this._alias;
        }
        if (this._externalCluster?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.externalCluster = this._externalCluster?.internalValue;
        }
        if (this._thisCluster?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.thisCluster = this._thisCluster?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._alias = undefined;
            this._externalCluster.internalValue = undefined;
            this._thisCluster.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._alias = value.alias;
            this._externalCluster.internalValue = value.externalCluster;
            this._thisCluster.internalValue = value.thisCluster;
        }
    }
    get alias() {
        return this.getStringAttribute('alias');
    }
    set alias(value) {
        this._alias = value;
    }
    resetAlias() {
        this._alias = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aliasInput() {
        return this._alias;
    }
    get externalCluster() {
        return this._externalCluster;
    }
    putExternalCluster(value) {
        this._externalCluster.internalValue = value;
    }
    resetExternalCluster() {
        this._externalCluster.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get externalClusterInput() {
        return this._externalCluster.internalValue;
    }
    get thisCluster() {
        return this._thisCluster;
    }
    putThisCluster(value) {
        this._thisCluster.internalValue = value;
    }
    resetThisCluster() {
        this._thisCluster.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get thisClusterInput() {
        return this._thisCluster.internalValue;
    }
}
exports.MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterOutputReference = MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterOutputReference;
_k = JSII_RTTI_SYMBOL_1;
MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterOutputReference[_k] = { fqn: "@cdktf/provider-yandex.MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterOutputReference", version: "2.0.32" };
function mdbKafkaConnectorConnectorConfigMirrormakerToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        replication_factor: cdktf.numberToTerraform(struct.replicationFactor),
        topics: cdktf.stringToTerraform(struct.topics),
        source_cluster: mdbKafkaConnectorConnectorConfigMirrormakerSourceClusterToTerraform(struct.sourceCluster),
        target_cluster: mdbKafkaConnectorConnectorConfigMirrormakerTargetClusterToTerraform(struct.targetCluster),
    };
}
exports.mdbKafkaConnectorConnectorConfigMirrormakerToTerraform = mdbKafkaConnectorConnectorConfigMirrormakerToTerraform;
class MdbKafkaConnectorConnectorConfigMirrormakerOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // source_cluster - computed: false, optional: false, required: true
        this._sourceCluster = new MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterOutputReference(this, "source_cluster");
        // target_cluster - computed: false, optional: false, required: true
        this._targetCluster = new MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterOutputReference(this, "target_cluster");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._replicationFactor !== undefined) {
            hasAnyValues = true;
            internalValueResult.replicationFactor = this._replicationFactor;
        }
        if (this._topics !== undefined) {
            hasAnyValues = true;
            internalValueResult.topics = this._topics;
        }
        if (this._sourceCluster?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceCluster = this._sourceCluster?.internalValue;
        }
        if (this._targetCluster?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetCluster = this._targetCluster?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._replicationFactor = undefined;
            this._topics = undefined;
            this._sourceCluster.internalValue = undefined;
            this._targetCluster.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._replicationFactor = value.replicationFactor;
            this._topics = value.topics;
            this._sourceCluster.internalValue = value.sourceCluster;
            this._targetCluster.internalValue = value.targetCluster;
        }
    }
    get replicationFactor() {
        return this.getNumberAttribute('replication_factor');
    }
    set replicationFactor(value) {
        this._replicationFactor = value;
    }
    // Temporarily expose input value. Use with caution.
    get replicationFactorInput() {
        return this._replicationFactor;
    }
    get topics() {
        return this.getStringAttribute('topics');
    }
    set topics(value) {
        this._topics = value;
    }
    // Temporarily expose input value. Use with caution.
    get topicsInput() {
        return this._topics;
    }
    get sourceCluster() {
        return this._sourceCluster;
    }
    putSourceCluster(value) {
        this._sourceCluster.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceClusterInput() {
        return this._sourceCluster.internalValue;
    }
    get targetCluster() {
        return this._targetCluster;
    }
    putTargetCluster(value) {
        this._targetCluster.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get targetClusterInput() {
        return this._targetCluster.internalValue;
    }
}
exports.MdbKafkaConnectorConnectorConfigMirrormakerOutputReference = MdbKafkaConnectorConnectorConfigMirrormakerOutputReference;
_l = JSII_RTTI_SYMBOL_1;
MdbKafkaConnectorConnectorConfigMirrormakerOutputReference[_l] = { fqn: "@cdktf/provider-yandex.MdbKafkaConnectorConnectorConfigMirrormakerOutputReference", version: "2.0.32" };
class MdbKafkaConnectorConnectorConfigMirrormakerList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MdbKafkaConnectorConnectorConfigMirrormakerOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MdbKafkaConnectorConnectorConfigMirrormakerList = MdbKafkaConnectorConnectorConfigMirrormakerList;
_m = JSII_RTTI_SYMBOL_1;
MdbKafkaConnectorConnectorConfigMirrormakerList[_m] = { fqn: "@cdktf/provider-yandex.MdbKafkaConnectorConnectorConfigMirrormakerList", version: "2.0.32" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/yandex/r/mdb_kafka_connector yandex_mdb_kafka_connector}
*/
class MdbKafkaConnector extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/yandex/r/mdb_kafka_connector yandex_mdb_kafka_connector} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options MdbKafkaConnectorConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'yandex_mdb_kafka_connector',
            terraformGeneratorMetadata: {
                providerName: 'yandex',
                providerVersion: '0.77.0',
                providerVersionConstraint: '~> 0.73'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // connector_config_mirrormaker - computed: false, optional: true, required: false
        this._connectorConfigMirrormaker = new MdbKafkaConnectorConnectorConfigMirrormakerList(this, "connector_config_mirrormaker", false);
        this._clusterId = config.clusterId;
        this._id = config.id;
        this._name = config.name;
        this._properties = config.properties;
        this._tasksMax = config.tasksMax;
        this._connectorConfigMirrormaker.internalValue = config.connectorConfigMirrormaker;
    }
    get clusterId() {
        return this.getStringAttribute('cluster_id');
    }
    set clusterId(value) {
        this._clusterId = value;
    }
    // Temporarily expose input value. Use with caution.
    get clusterIdInput() {
        return this._clusterId;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get properties() {
        return this.getStringMapAttribute('properties');
    }
    set properties(value) {
        this._properties = value;
    }
    resetProperties() {
        this._properties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get propertiesInput() {
        return this._properties;
    }
    get tasksMax() {
        return this.getNumberAttribute('tasks_max');
    }
    set tasksMax(value) {
        this._tasksMax = value;
    }
    resetTasksMax() {
        this._tasksMax = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tasksMaxInput() {
        return this._tasksMax;
    }
    get connectorConfigMirrormaker() {
        return this._connectorConfigMirrormaker;
    }
    putConnectorConfigMirrormaker(value) {
        this._connectorConfigMirrormaker.internalValue = value;
    }
    resetConnectorConfigMirrormaker() {
        this._connectorConfigMirrormaker.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectorConfigMirrormakerInput() {
        return this._connectorConfigMirrormaker.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            cluster_id: cdktf.stringToTerraform(this._clusterId),
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            properties: cdktf.hashMapper(cdktf.stringToTerraform)(this._properties),
            tasks_max: cdktf.numberToTerraform(this._tasksMax),
            connector_config_mirrormaker: cdktf.listMapper(mdbKafkaConnectorConnectorConfigMirrormakerToTerraform, true)(this._connectorConfigMirrormaker.internalValue),
        };
    }
}
exports.MdbKafkaConnector = MdbKafkaConnector;
_o = JSII_RTTI_SYMBOL_1;
MdbKafkaConnector[_o] = { fqn: "@cdktf/provider-yandex.MdbKafkaConnector", version: "2.0.32" };
// =================
// STATIC PROPERTIES
// =================
MdbKafkaConnector.tfResourceType = "yandex_mdb_kafka_connector";
//# sourceMappingURL=data:application/json;base64,